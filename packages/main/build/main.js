"use strict";var Sf=Object.defineProperty,$f=Object.defineProperties;var Cf=Object.getOwnPropertyDescriptors;var Tr=Object.getOwnPropertySymbols;var Ao=Object.prototype.hasOwnProperty,So=Object.prototype.propertyIsEnumerable;var $o=(e,t,n)=>t in e?Sf(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,F=(e,t)=>{for(var n in t||(t={}))Ao.call(t,n)&&$o(e,n,t[n]);if(Tr)for(var n of Tr(t))So.call(t,n)&&$o(e,n,t[n]);return e},Ie=(e,t)=>$f(e,Cf(t));var Co=(e,t)=>{var n={};for(var r in e)Ao.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&Tr)for(var r of Tr(e))t.indexOf(r)<0&&So.call(e,r)&&(n[r]=e[r]);return n};var bf=require("events"),Of=require("crypto"),If=require("fs"),Nf=require("stream"),Rf=require("url"),Df=require("string_decoder"),Pf=require("constants"),xf=require("util"),Ff=require("assert"),Lf=require("path"),Uf=require("fs/promises"),kf=require("os"),Mf=require("electron"),Bf=require("child_process"),qf=require("zlib"),Hf=require("http");function we(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}function jf(e,t){return t.forEach(function(n){n&&typeof n!="string"&&!Array.isArray(n)&&Object.keys(n).forEach(function(r){if(r!=="default"&&!(r in e)){var i=Object.getOwnPropertyDescriptor(n,r);Object.defineProperty(e,r,i.get?i:{enumerable:!0,get:function(){return n[r]}})}})}),Object.freeze(e)}var bo=we(bf),Ar=we(Of),Ze=we(If),$n=we(Nf),St=we(Rf),Gf=we(Df),Vf=we(Pf),Oo=we(xf),Io=we(Ff),re=we(Lf),Yf=we(Uf),No=we(kf),Cn=we(Mf),Sr=we(Bf),Ro=we(qf),Wf=we(Hf),Be=typeof globalThis!="undefined"?globalThis:typeof window!="undefined"?window:typeof global!="undefined"?global:typeof self!="undefined"?self:{};function Xf(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Ht={},te={},$t={};Object.defineProperty($t,"__esModule",{value:!0});$t.CancellationError=$t.CancellationToken=void 0;const zf=bo.default;class Kf extends zf.EventEmitter{constructor(t){super();this.parentCancelHandler=null,this._parent=null,this._cancelled=!1,t!=null&&(this.parent=t)}get cancelled(){return this._cancelled||this._parent!=null&&this._parent.cancelled}set parent(t){this.removeParentCancelHandler(),this._parent=t,this.parentCancelHandler=()=>this.cancel(),this._parent.onCancel(this.parentCancelHandler)}cancel(){this._cancelled=!0,this.emit("cancel")}onCancel(t){this.cancelled?t():this.once("cancel",t)}createPromise(t){if(this.cancelled)return Promise.reject(new Bi);const n=()=>{if(r!=null)try{this.removeListener("cancel",r),r=null}catch{}};let r=null;return new Promise((i,a)=>{let o=null;if(r=()=>{try{o!=null&&(o(),o=null)}finally{a(new Bi)}},this.cancelled){r();return}this.onCancel(r),t(i,a,s=>{o=s})}).then(i=>(n(),i)).catch(i=>{throw n(),i})}removeParentCancelHandler(){const t=this._parent;t!=null&&this.parentCancelHandler!=null&&(t.removeListener("cancel",this.parentCancelHandler),this.parentCancelHandler=null)}dispose(){try{this.removeParentCancelHandler()}finally{this.removeAllListeners(),this._parent=null}}}$t.CancellationToken=Kf;class Bi extends Error{constructor(){super("cancelled")}}$t.CancellationError=Bi;var J={},qi={exports:{}},jt=1e3,Gt=jt*60,Vt=Gt*60,Ct=Vt*24,Jf=Ct*7,Qf=Ct*365.25,Zf=function(e,t){t=t||{};var n=typeof e;if(n==="string"&&e.length>0)return ed(e);if(n==="number"&&isFinite(e))return t.long?nd(e):td(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function ed(e){if(e=String(e),!(e.length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!!t){var n=parseFloat(t[1]),r=(t[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"yrs":case"yr":case"y":return n*Qf;case"weeks":case"week":case"w":return n*Jf;case"days":case"day":case"d":return n*Ct;case"hours":case"hour":case"hrs":case"hr":case"h":return n*Vt;case"minutes":case"minute":case"mins":case"min":case"m":return n*Gt;case"seconds":case"second":case"secs":case"sec":case"s":return n*jt;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}function td(e){var t=Math.abs(e);return t>=Ct?Math.round(e/Ct)+"d":t>=Vt?Math.round(e/Vt)+"h":t>=Gt?Math.round(e/Gt)+"m":t>=jt?Math.round(e/jt)+"s":e+"ms"}function nd(e){var t=Math.abs(e);return t>=Ct?$r(e,t,Ct,"day"):t>=Vt?$r(e,t,Vt,"hour"):t>=Gt?$r(e,t,Gt,"minute"):t>=jt?$r(e,t,jt,"second"):e+" ms"}function $r(e,t,n,r){var i=t>=n*1.5;return Math.round(e/n)+" "+r+(i?"s":"")}function rd(e){n.debug=n,n.default=n,n.coerce=l,n.disable=a,n.enable=i,n.enabled=o,n.humanize=Zf,n.destroy=p,Object.keys(e).forEach(f=>{n[f]=e[f]}),n.names=[],n.skips=[],n.formatters={};function t(f){let c=0;for(let m=0;m<f.length;m++)c=(c<<5)-c+f.charCodeAt(m),c|=0;return n.colors[Math.abs(c)%n.colors.length]}n.selectColor=t;function n(f){let c,m=null,g,w;function A(...S){if(!A.enabled)return;const C=A,$=Number(new Date),Q=$-(c||$);C.diff=Q,C.prev=c,C.curr=$,c=$,S[0]=n.coerce(S[0]),typeof S[0]!="string"&&S.unshift("%O");let D=0;S[0]=S[0].replace(/%([a-zA-Z%])/g,(j,M)=>{if(j==="%%")return"%";D++;const O=n.formatters[M];if(typeof O=="function"){const y=S[D];j=O.call(C,y),S.splice(D,1),D--}return j}),n.formatArgs.call(C,S),(C.log||n.log).apply(C,S)}return A.namespace=f,A.useColors=n.useColors(),A.color=n.selectColor(f),A.extend=r,A.destroy=n.destroy,Object.defineProperty(A,"enabled",{enumerable:!0,configurable:!1,get:()=>m!==null?m:(g!==n.namespaces&&(g=n.namespaces,w=n.enabled(f)),w),set:S=>{m=S}}),typeof n.init=="function"&&n.init(A),A}function r(f,c){const m=n(this.namespace+(typeof c=="undefined"?":":c)+f);return m.log=this.log,m}function i(f){n.save(f),n.namespaces=f,n.names=[],n.skips=[];let c;const m=(typeof f=="string"?f:"").split(/[\s,]+/),g=m.length;for(c=0;c<g;c++)!m[c]||(f=m[c].replace(/\*/g,".*?"),f[0]==="-"?n.skips.push(new RegExp("^"+f.substr(1)+"$")):n.names.push(new RegExp("^"+f+"$")))}function a(){const f=[...n.names.map(s),...n.skips.map(s).map(c=>"-"+c)].join(",");return n.enable(""),f}function o(f){if(f[f.length-1]==="*")return!0;let c,m;for(c=0,m=n.skips.length;c<m;c++)if(n.skips[c].test(f))return!1;for(c=0,m=n.names.length;c<m;c++)if(n.names[c].test(f))return!0;return!1}function s(f){return f.toString().substring(2,f.toString().length-2).replace(/\.\*\?$/,"*")}function l(f){return f instanceof Error?f.stack||f.message:f}function p(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return n.enable(n.load()),n}var id=rd;(function(e,t){t.formatArgs=r,t.save=i,t.load=a,t.useColors=n,t.storage=o(),t.destroy=(()=>{let l=!1;return()=>{l||(l=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function n(){return typeof window!="undefined"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document!="undefined"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window!="undefined"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(l){if(l[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+l[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const p="color: "+this.color;l.splice(1,0,p,"color: inherit");let f=0,c=0;l[0].replace(/%[a-zA-Z%]/g,m=>{m!=="%%"&&(f++,m==="%c"&&(c=f))}),l.splice(c,0,p)}t.log=console.debug||console.log||(()=>{});function i(l){try{l?t.storage.setItem("debug",l):t.storage.removeItem("debug")}catch{}}function a(){let l;try{l=t.storage.getItem("debug")}catch{}return!l&&typeof process!="undefined"&&"env"in process&&(l={}.DEBUG),l}function o(){try{return localStorage}catch{}}e.exports=id(t);const{formatters:s}=e.exports;s.j=function(l){try{return JSON.stringify(l)}catch(p){return"[UnexpectedJSONParseError]: "+p.message}}})(qi,qi.exports);var bn={};Object.defineProperty(bn,"__esModule",{value:!0});bn.ProgressCallbackTransform=void 0;const ad=$n.default;class od extends ad.Transform{constructor(t,n,r){super();this.total=t,this.cancellationToken=n,this.onProgress=r,this.start=Date.now(),this.transferred=0,this.delta=0,this.nextUpdate=this.start+1e3}_transform(t,n,r){if(this.cancellationToken.cancelled){r(new Error("cancelled"),null);return}this.transferred+=t.length,this.delta+=t.length;const i=Date.now();i>=this.nextUpdate&&this.transferred!==this.total&&(this.nextUpdate=i+1e3,this.onProgress({total:this.total,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.total*100,bytesPerSecond:Math.round(this.transferred/((i-this.start)/1e3))}),this.delta=0),r(null,t)}_flush(t){if(this.cancellationToken.cancelled){t(new Error("cancelled"));return}this.onProgress({total:this.total,delta:this.delta,transferred:this.total,percent:100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))}),this.delta=0,t(null)}}bn.ProgressCallbackTransform=od;Object.defineProperty(J,"__esModule",{value:!0});J.safeStringifyJson=J.configureRequestOptions=J.safeGetHeader=J.DigestTransform=J.configureRequestUrl=J.configureRequestOptionsFromUrl=J.HttpExecutor=J.parseJson=J.HttpError=J.createHttpError=void 0;const sd=Ar.default,ld=qi.exports,ud=Ze.default,cd=$n.default,Do=St.default,fd=$t,Po=te,dd=bn,On=ld.default("electron-builder");function Hi(e,t=null){return new ji(e.statusCode||-1,`${e.statusCode} ${e.statusMessage}`+(t==null?"":`
`+JSON.stringify(t,null,"  "))+`
Headers: `+Or(e.headers),t)}J.createHttpError=Hi;const hd=new Map([[429,"Too many requests"],[400,"Bad request"],[403,"Forbidden"],[404,"Not found"],[405,"Method not allowed"],[406,"Not acceptable"],[408,"Request timeout"],[413,"Request entity too large"],[500,"Internal server error"],[502,"Bad gateway"],[503,"Service unavailable"],[504,"Gateway timeout"],[505,"HTTP version not supported"]]);class ji extends Error{constructor(t,n=`HTTP error: ${hd.get(t)||t}`,r=null){super(n);this.statusCode=t,this.description=r,this.name="HttpError",this.code=`HTTP_ERROR_${t}`}isServerError(){return this.statusCode>=500&&this.statusCode<=599}}J.HttpError=ji;function pd(e){return e.then(t=>t==null||t.length===0?null:JSON.parse(t))}J.parseJson=pd;class Cr{constructor(){this.maxRedirects=10}request(t,n=new fd.CancellationToken,r){br(t);const i=r==null?void 0:JSON.stringify(r),a=i?Buffer.from(i):void 0;if(a!=null){On(i);const o=t,{headers:s}=o,l=Co(o,["headers"]);t=F({method:"post",headers:F({"Content-Type":"application/json","Content-Length":a.length},s)},l)}return this.doApiRequest(t,n,s=>s.end(a))}doApiRequest(t,n,r,i=0){return On.enabled&&On(`Request: ${Or(t)}`),n.createPromise((a,o,s)=>{const l=this.createRequest(t,p=>{try{this.handleResponse(p,t,n,a,o,i,r)}catch(f){o(f)}});this.addErrorAndTimeoutHandlers(l,o),this.addRedirectHandlers(l,t,o,i,p=>{this.doApiRequest(p,n,r,i).then(a).catch(o)}),r(l,o),s(()=>l.abort())})}addRedirectHandlers(t,n,r,i,a){}addErrorAndTimeoutHandlers(t,n){this.addTimeOutHandler(t,n),t.on("error",n),t.on("aborted",()=>{n(new Error("Request has been aborted by the server"))})}handleResponse(t,n,r,i,a,o,s){var l;if(On.enabled&&On(`Response: ${t.statusCode} ${t.statusMessage}, request options: ${Or(n)}`),t.statusCode===404){a(Hi(t,`method: ${n.method||"GET"} url: ${n.protocol||"https:"}//${n.hostname}${n.port?`:${n.port}`:""}${n.path}

Please double check that your authentication token is correct. Due to security reasons, actual status maybe not reported, but 404.
`));return}else if(t.statusCode===204){i();return}const p=(l=t.statusCode)!==null&&l!==void 0?l:0,f=p>=300&&p<400,c=bt(t,"location");if(f&&c!=null){if(o>this.maxRedirects){a(this.createMaxRedirectError());return}this.doApiRequest(Cr.prepareRedirectUrlOptions(c,n),r,s,o).then(i).catch(a);return}t.setEncoding("utf8");let m="";t.on("error",a),t.on("data",g=>m+=g),t.on("end",()=>{try{if(t.statusCode!=null&&t.statusCode>=400){const g=bt(t,"content-type"),w=g!=null&&(Array.isArray(g)?g.find(A=>A.includes("json"))!=null:g.includes("json"));a(Hi(t,`method: ${n.method||"GET"} url: ${n.protocol||"https:"}//${n.hostname}${n.port?`:${n.port}`:""}${n.path}

          Data:
          ${w?JSON.stringify(JSON.parse(m)):m}
          `))}else i(m.length===0?null:m)}catch(g){a(g)}})}async downloadToBuffer(t,n){return await n.cancellationToken.createPromise((r,i,a)=>{let o=null;const s={headers:n.headers||void 0,redirect:"manual"};Gi(t,s),br(s),this.doDownload(s,{destination:null,options:n,onCancel:a,callback:l=>{l==null?r(o):i(l)},responseHandler:(l,p)=>{const f=bt(l,"content-length");let c=-1;if(f!=null){const m=parseInt(f,10);if(m>0){if(m>524288e3){p(new Error("Maximum allowed size is 500 MB"));return}o=Buffer.alloc(m),c=0}}l.on("data",m=>{if(c!==-1)m.copy(o,c),c+=m.length;else if(o==null)o=m;else{if(o.length>524288e3){p(new Error("Maximum allowed size is 500 MB"));return}o=Buffer.concat([o,m])}}),l.on("end",()=>{o!=null&&c!==-1&&c!==o.length?p(new Error(`Received data length ${c} is not equal to expected ${o.length}`)):p(null)})}},0)})}doDownload(t,n,r){const i=this.createRequest(t,a=>{if(a.statusCode>=400){n.callback(new Error(`Cannot download "${t.protocol||"https:"}//${t.hostname}${t.path}", status ${a.statusCode}: ${a.statusMessage}`));return}a.on("error",n.callback);const o=bt(a,"location");if(o!=null){r<this.maxRedirects?this.doDownload(Cr.prepareRedirectUrlOptions(o,t),n,r++):n.callback(this.createMaxRedirectError());return}n.responseHandler==null?gd(n,a):n.responseHandler(a,n.callback)});this.addErrorAndTimeoutHandlers(i,n.callback),this.addRedirectHandlers(i,t,n.callback,r,a=>{this.doDownload(a,n,r++)}),i.end()}createMaxRedirectError(){return new Error(`Too many redirects (> ${this.maxRedirects})`)}addTimeOutHandler(t,n){t.on("socket",r=>{r.setTimeout(60*1e3,()=>{t.abort(),n(new Error("Request timed out"))})})}static prepareRedirectUrlOptions(t,n){const r=xo(t,F({},n)),i=r.headers;if(i==null?void 0:i.authorization){const a=new Do.URL(t);(a.hostname.endsWith(".amazonaws.com")||a.searchParams.has("X-Amz-Credential"))&&delete i.authorization}return r}static retryOnServerError(t,n=3){for(let r=0;;r++)try{return t()}catch(i){if(r<n&&(i instanceof ji&&i.isServerError()||i.code==="EPIPE"))continue;throw i}}}J.HttpExecutor=Cr;function xo(e,t){const n=br(t);return Gi(new Do.URL(e),n),n}J.configureRequestOptionsFromUrl=xo;function Gi(e,t){t.protocol=e.protocol,t.hostname=e.hostname,e.port?t.port=e.port:t.port&&delete t.port,t.path=e.pathname+e.search}J.configureRequestUrl=Gi;class Vi extends cd.Transform{constructor(t,n="sha512",r="base64"){super();this.expected=t,this.algorithm=n,this.encoding=r,this._actual=null,this.isValidateOnEnd=!0,this.digester=sd.createHash(n)}get actual(){return this._actual}_transform(t,n,r){this.digester.update(t),r(null,t)}_flush(t){if(this._actual=this.digester.digest(this.encoding),this.isValidateOnEnd)try{this.validate()}catch(n){t(n);return}t(null)}validate(){if(this._actual==null)throw Po.newError("Not finished yet","ERR_STREAM_NOT_FINISHED");if(this._actual!==this.expected)throw Po.newError(`${this.algorithm} checksum mismatch, expected ${this.expected}, got ${this._actual}`,"ERR_CHECKSUM_MISMATCH");return null}}J.DigestTransform=Vi;function md(e,t,n){return e!=null&&t!=null&&e!==t?(n(new Error(`checksum mismatch: expected ${t} but got ${e} (X-Checksum-Sha2 header)`)),!1):!0}function bt(e,t){const n=e.headers[t];return n==null?null:Array.isArray(n)?n.length===0?null:n[n.length-1]:n}J.safeGetHeader=bt;function gd(e,t){if(!md(bt(t,"X-Checksum-Sha2"),e.options.sha2,e.callback))return;const n=[];if(e.options.onProgress!=null){const o=bt(t,"content-length");o!=null&&n.push(new dd.ProgressCallbackTransform(parseInt(o,10),e.options.cancellationToken,e.options.onProgress))}const r=e.options.sha512;r!=null?n.push(new Vi(r,"sha512",r.length===128&&!r.includes("+")&&!r.includes("Z")&&!r.includes("=")?"hex":"base64")):e.options.sha2!=null&&n.push(new Vi(e.options.sha2,"sha256","hex"));const i=ud.createWriteStream(e.destination);n.push(i);let a=t;for(const o of n)o.on("error",s=>{e.options.cancellationToken.cancelled||e.callback(s)}),a=a.pipe(o);i.on("finish",()=>{i.close(e.callback)})}function br(e,t,n){n!=null&&(e.method=n),e.headers=F({},e.headers);const r=e.headers;return t!=null&&(r.authorization=t.startsWith("Basic")||t.startsWith("Bearer")?t:`token ${t}`),r["User-Agent"]==null&&(r["User-Agent"]="electron-builder"),(n==null||n==="GET"||r["Cache-Control"]==null)&&(r["Cache-Control"]="no-cache"),e.protocol==null&&process.versions.electron!=null&&(e.protocol="https:"),e}J.configureRequestOptions=br;function Or(e,t){return JSON.stringify(e,(n,r)=>n.endsWith("Authorization")||n.endsWith("authorization")||n.endsWith("Password")||n.endsWith("PASSWORD")||n.endsWith("Token")||n.includes("password")||n.includes("token")||t!=null&&t.has(n)?"<stripped sensitive data>":r,2)}J.safeStringifyJson=Or;var Yt={};Object.defineProperty(Yt,"__esModule",{value:!0});Yt.getS3LikeProviderBaseUrl=Yt.githubUrl=void 0;function yd(e,t="github.com"){return`${e.protocol||"https"}://${e.host||t}`}Yt.githubUrl=yd;function Ed(e){const t=e.provider;if(t==="s3")return vd(e);if(t==="spaces")return wd(e);throw new Error(`Not supported provider: ${t}`)}Yt.getS3LikeProviderBaseUrl=Ed;function vd(e){let t;if(e.endpoint!=null)t=`${e.endpoint}/${e.bucket}`;else if(e.bucket.includes(".")){if(e.region==null)throw new Error(`Bucket name "${e.bucket}" includes a dot, but S3 region is missing`);e.region==="us-east-1"?t=`https://s3.amazonaws.com/${e.bucket}`:t=`https://s3-${e.region}.amazonaws.com/${e.bucket}`}else e.region==="cn-north-1"?t=`https://${e.bucket}.s3.${e.region}.amazonaws.com.cn`:t=`https://${e.bucket}.s3.amazonaws.com`;return Fo(t,e.path)}function Fo(e,t){return t!=null&&t.length>0&&(t.startsWith("/")||(e+="/"),e+=t),e}function wd(e){if(e.name==null)throw new Error("name is missing");if(e.region==null)throw new Error("region is missing");return Fo(`https://${e.name}.${e.region}.digitaloceanspaces.com`,e.path)}var Ir={};Object.defineProperty(Ir,"__esModule",{value:!0});Ir.parseDn=void 0;function _d(e){let t=!1,n=null,r="",i=0;e=e.trim();const a=new Map;for(let o=0;o<=e.length;o++){if(o===e.length){n!==null&&a.set(n,r);break}const s=e[o];if(t){if(s==='"'){t=!1;continue}}else{if(s==='"'){t=!0;continue}if(s==="\\"){o++;const l=parseInt(e.slice(o,o+2),16);Number.isNaN(l)?r+=e[o]:(o++,r+=String.fromCharCode(l));continue}if(n===null&&s==="="){n=r,r="";continue}if(s===","||s===";"||s==="+"){n!==null&&a.set(n,r),n=null,r="";continue}}if(s===" "&&!t){if(r.length===0)continue;if(o>i){let l=o;for(;e[l]===" ";)l++;i=l}if(i>=e.length||e[i]===","||e[i]===";"||n===null&&e[i]==="="||n!==null&&e[i]==="+"){o=i-1;continue}}r+=s}return a}Ir.parseDn=_d;var Wt={};Object.defineProperty(Wt,"__esModule",{value:!0});Wt.nil=Wt.UUID=void 0;const Lo=Ar.default,Uo=te,Td="options.name must be either a string or a Buffer",ko=Lo.randomBytes(16);ko[0]=ko[0]|1;const Nr={},L=[];for(let e=0;e<256;e++){const t=(e+256).toString(16).substr(1);Nr[t]=e,L[e]=t}class Ot{constructor(t){this.ascii=null,this.binary=null;const n=Ot.check(t);if(!n)throw new Error("not a UUID");this.version=n.version,n.format==="ascii"?this.ascii=t:this.binary=t}static v5(t,n){return Ad(t,"sha1",80,n)}toString(){return this.ascii==null&&(this.ascii=Sd(this.binary)),this.ascii}inspect(){return`UUID v${this.version} ${this.toString()}`}static check(t,n=0){if(typeof t=="string")return t=t.toLowerCase(),/^[a-f0-9]{8}(-[a-f0-9]{4}){3}-([a-f0-9]{12})$/.test(t)?t==="00000000-0000-0000-0000-000000000000"?{version:void 0,variant:"nil",format:"ascii"}:{version:(Nr[t[14]+t[15]]&240)>>4,variant:Mo((Nr[t[19]+t[20]]&224)>>5),format:"ascii"}:!1;if(Buffer.isBuffer(t)){if(t.length<n+16)return!1;let r=0;for(;r<16&&t[n+r]===0;r++);return r===16?{version:void 0,variant:"nil",format:"binary"}:{version:(t[n+6]&240)>>4,variant:Mo((t[n+8]&224)>>5),format:"binary"}}throw Uo.newError("Unknown type of uuid","ERR_UNKNOWN_UUID_TYPE")}static parse(t){const n=Buffer.allocUnsafe(16);let r=0;for(let i=0;i<16;i++)n[i]=Nr[t[r++]+t[r++]],(i===3||i===5||i===7||i===9)&&(r+=1);return n}}Wt.UUID=Ot;Ot.OID=Ot.parse("6ba7b812-9dad-11d1-80b4-00c04fd430c8");function Mo(e){switch(e){case 0:case 1:case 3:return"ncs";case 4:case 5:return"rfc4122";case 6:return"microsoft";default:return"future"}}var In;(function(e){e[e.ASCII=0]="ASCII",e[e.BINARY=1]="BINARY",e[e.OBJECT=2]="OBJECT"})(In||(In={}));function Ad(e,t,n,r,i=In.ASCII){const a=Lo.createHash(t);if(typeof e!="string"&&!Buffer.isBuffer(e))throw Uo.newError(Td,"ERR_INVALID_UUID_NAME");a.update(r),a.update(e);const s=a.digest();let l;switch(i){case In.BINARY:s[6]=s[6]&15|n,s[8]=s[8]&63|128,l=s;break;case In.OBJECT:s[6]=s[6]&15|n,s[8]=s[8]&63|128,l=new Ot(s);break;default:l=L[s[0]]+L[s[1]]+L[s[2]]+L[s[3]]+"-"+L[s[4]]+L[s[5]]+"-"+L[s[6]&15|n]+L[s[7]]+"-"+L[s[8]&63|128]+L[s[9]]+"-"+L[s[10]]+L[s[11]]+L[s[12]]+L[s[13]]+L[s[14]]+L[s[15]];break}return l}function Sd(e){return L[e[0]]+L[e[1]]+L[e[2]]+L[e[3]]+"-"+L[e[4]]+L[e[5]]+"-"+L[e[6]]+L[e[7]]+"-"+L[e[8]]+L[e[9]]+"-"+L[e[10]]+L[e[11]]+L[e[12]]+L[e[13]]+L[e[14]]+L[e[15]]}Wt.nil=new Ot("00000000-0000-0000-0000-000000000000");var Xt={},Bo={};(function(e){(function(t){t.parser=function(d,u){return new r(d,u)},t.SAXParser=r,t.SAXStream=f,t.createStream=p,t.MAX_BUFFER_LENGTH=64*1024;var n=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];t.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"];function r(d,u){if(!(this instanceof r))return new r(d,u);var _=this;a(_),_.q=_.c="",_.bufferCheckPosition=t.MAX_BUFFER_LENGTH,_.opt=u||{},_.opt.lowercase=_.opt.lowercase||_.opt.lowercasetags,_.looseCase=_.opt.lowercase?"toLowerCase":"toUpperCase",_.tags=[],_.closed=_.closedRoot=_.sawRoot=!1,_.tag=_.error=null,_.strict=!!d,_.noscript=!!(d||_.opt.noscript),_.state=y.BEGIN,_.strictEntities=_.opt.strictEntities,_.ENTITIES=_.strictEntities?Object.create(t.XML_ENTITIES):Object.create(t.ENTITIES),_.attribList=[],_.opt.xmlns&&(_.ns=Object.create(A)),_.trackPosition=_.opt.position!==!1,_.trackPosition&&(_.position=_.line=_.column=0),G(_,"onready")}Object.create||(Object.create=function(d){function u(){}u.prototype=d;var _=new u;return _}),Object.keys||(Object.keys=function(d){var u=[];for(var _ in d)d.hasOwnProperty(_)&&u.push(_);return u});function i(d){for(var u=Math.max(t.MAX_BUFFER_LENGTH,10),_=0,v=0,U=n.length;v<U;v++){var z=d[n[v]].length;if(z>u)switch(n[v]){case"textNode":V(d);break;case"cdata":N(d,"oncdata",d.cdata),d.cdata="";break;case"script":N(d,"onscript",d.script),d.script="";break;default:Z(d,"Max buffer length exceeded: "+n[v])}_=Math.max(_,z)}var ne=t.MAX_BUFFER_LENGTH-_;d.bufferCheckPosition=ne+d.position}function a(d){for(var u=0,_=n.length;u<_;u++)d[n[u]]=""}function o(d){V(d),d.cdata!==""&&(N(d,"oncdata",d.cdata),d.cdata=""),d.script!==""&&(N(d,"onscript",d.script),d.script="")}r.prototype={end:function(){B(this)},write:fr,resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){o(this)}};var s;try{s=require("stream").Stream}catch{s=function(){}}var l=t.EVENTS.filter(function(d){return d!=="error"&&d!=="end"});function p(d,u){return new f(d,u)}function f(d,u){if(!(this instanceof f))return new f(d,u);s.apply(this),this._parser=new r(d,u),this.writable=!0,this.readable=!0;var _=this;this._parser.onend=function(){_.emit("end")},this._parser.onerror=function(v){_.emit("error",v),_._parser.error=null},this._decoder=null,l.forEach(function(v){Object.defineProperty(_,"on"+v,{get:function(){return _._parser["on"+v]},set:function(U){if(!U)return _.removeAllListeners(v),_._parser["on"+v]=U,U;_.on(v,U)},enumerable:!0,configurable:!1})})}f.prototype=Object.create(s.prototype,{constructor:{value:f}}),f.prototype.write=function(d){if(typeof Buffer=="function"&&typeof Buffer.isBuffer=="function"&&Buffer.isBuffer(d)){if(!this._decoder){var u=Gf.default.StringDecoder;this._decoder=new u("utf8")}d=this._decoder.write(d)}return this._parser.write(d.toString()),this.emit("data",d),!0},f.prototype.end=function(d){return d&&d.length&&this.write(d),this._parser.end(),!0},f.prototype.on=function(d,u){var _=this;return!_._parser["on"+d]&&l.indexOf(d)!==-1&&(_._parser["on"+d]=function(){var v=arguments.length===1?[arguments[0]]:Array.apply(null,arguments);v.splice(0,0,d),_.emit.apply(_,v)}),s.prototype.on.call(_,d,u)};var c="[CDATA[",m="DOCTYPE",g="http://www.w3.org/XML/1998/namespace",w="http://www.w3.org/2000/xmlns/",A={xml:g,xmlns:w},S=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,C=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,$=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,Q=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function D(d){return d===" "||d===`
`||d==="\r"||d==="	"}function le(d){return d==='"'||d==="'"}function j(d){return d===">"||D(d)}function M(d,u){return d.test(u)}function O(d,u){return!M(d,u)}var y=0;t.STATE={BEGIN:y++,BEGIN_WHITESPACE:y++,TEXT:y++,TEXT_ENTITY:y++,OPEN_WAKA:y++,SGML_DECL:y++,SGML_DECL_QUOTED:y++,DOCTYPE:y++,DOCTYPE_QUOTED:y++,DOCTYPE_DTD:y++,DOCTYPE_DTD_QUOTED:y++,COMMENT_STARTING:y++,COMMENT:y++,COMMENT_ENDING:y++,COMMENT_ENDED:y++,CDATA:y++,CDATA_ENDING:y++,CDATA_ENDING_2:y++,PROC_INST:y++,PROC_INST_BODY:y++,PROC_INST_ENDING:y++,OPEN_TAG:y++,OPEN_TAG_SLASH:y++,ATTRIB:y++,ATTRIB_NAME:y++,ATTRIB_NAME_SAW_WHITE:y++,ATTRIB_VALUE:y++,ATTRIB_VALUE_QUOTED:y++,ATTRIB_VALUE_CLOSED:y++,ATTRIB_VALUE_UNQUOTED:y++,ATTRIB_VALUE_ENTITY_Q:y++,ATTRIB_VALUE_ENTITY_U:y++,CLOSE_TAG:y++,CLOSE_TAG_SAW_WHITE:y++,SCRIPT:y++,SCRIPT_ENDING:y++},t.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},t.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(t.ENTITIES).forEach(function(d){var u=t.ENTITIES[d],_=typeof u=="number"?String.fromCharCode(u):u;t.ENTITIES[d]=_});for(var x in t.STATE)t.STATE[t.STATE[x]]=x;y=t.STATE;function G(d,u,_){d[u]&&d[u](_)}function N(d,u,_){d.textNode&&V(d),G(d,u,_)}function V(d){d.textNode=W(d.opt,d.textNode),d.textNode&&G(d,"ontext",d.textNode),d.textNode=""}function W(d,u){return d.trim&&(u=u.trim()),d.normalize&&(u=u.replace(/\s+/g," ")),u}function Z(d,u){return V(d),d.trackPosition&&(u+=`
Line: `+d.line+`
Column: `+d.column+`
Char: `+d.c),u=new Error(u),d.error=u,G(d,"onerror",u),d}function B(d){return d.sawRoot&&!d.closedRoot&&R(d,"Unclosed root tag"),d.state!==y.BEGIN&&d.state!==y.BEGIN_WHITESPACE&&d.state!==y.TEXT&&Z(d,"Unexpected end"),V(d),d.c="",d.closed=!0,G(d,"onend"),r.call(d,d.strict,d.opt),d}function R(d,u){if(typeof d!="object"||!(d instanceof r))throw new Error("bad call to strictFail");d.strict&&Z(d,u)}function X(d){d.strict||(d.tagName=d.tagName[d.looseCase]());var u=d.tags[d.tags.length-1]||d,_=d.tag={name:d.tagName,attributes:{}};d.opt.xmlns&&(_.ns=u.ns),d.attribList.length=0,N(d,"onopentagstart",_)}function Bt(d,u){var _=d.indexOf(":"),v=_<0?["",d]:d.split(":"),U=v[0],z=v[1];return u&&d==="xmlns"&&(U="xmlns",z=""),{prefix:U,local:z}}function En(d){if(d.strict||(d.attribName=d.attribName[d.looseCase]()),d.attribList.indexOf(d.attribName)!==-1||d.tag.attributes.hasOwnProperty(d.attribName)){d.attribName=d.attribValue="";return}if(d.opt.xmlns){var u=Bt(d.attribName,!0),_=u.prefix,v=u.local;if(_==="xmlns")if(v==="xml"&&d.attribValue!==g)R(d,"xml: prefix must be bound to "+g+`
Actual: `+d.attribValue);else if(v==="xmlns"&&d.attribValue!==w)R(d,"xmlns: prefix must be bound to "+w+`
Actual: `+d.attribValue);else{var U=d.tag,z=d.tags[d.tags.length-1]||d;U.ns===z.ns&&(U.ns=Object.create(z.ns)),U.ns[v]=d.attribValue}d.attribList.push([d.attribName,d.attribValue])}else d.tag.attributes[d.attribName]=d.attribValue,N(d,"onattribute",{name:d.attribName,value:d.attribValue});d.attribName=d.attribValue=""}function Ke(d,u){if(d.opt.xmlns){var _=d.tag,v=Bt(d.tagName);_.prefix=v.prefix,_.local=v.local,_.uri=_.ns[v.prefix]||"",_.prefix&&!_.uri&&(R(d,"Unbound namespace prefix: "+JSON.stringify(d.tagName)),_.uri=v.prefix);var U=d.tags[d.tags.length-1]||d;_.ns&&U.ns!==_.ns&&Object.keys(_.ns).forEach(function(hr){N(d,"onopennamespace",{prefix:hr,uri:_.ns[hr]})});for(var z=0,ne=d.attribList.length;z<ne;z++){var he=d.attribList[z],Fe=he[0],at=he[1],ue=Bt(Fe,!0),ke=ue.prefix,Di=ue.local,dr=ke===""?"":_.ns[ke]||"",wn={name:Fe,value:at,prefix:ke,local:Di,uri:dr};ke&&ke!=="xmlns"&&!dr&&(R(d,"Unbound namespace prefix: "+JSON.stringify(ke)),wn.uri=ke),d.tag.attributes[Fe]=wn,N(d,"onattribute",wn)}d.attribList.length=0}d.tag.isSelfClosing=!!u,d.sawRoot=!0,d.tags.push(d.tag),N(d,"onopentag",d.tag),u||(!d.noscript&&d.tagName.toLowerCase()==="script"?d.state=y.SCRIPT:d.state=y.TEXT,d.tag=null,d.tagName=""),d.attribName=d.attribValue="",d.attribList.length=0}function vn(d){if(!d.tagName){R(d,"Weird empty close tag."),d.textNode+="</>",d.state=y.TEXT;return}if(d.script){if(d.tagName!=="script"){d.script+="</"+d.tagName+">",d.tagName="",d.state=y.SCRIPT;return}N(d,"onscript",d.script),d.script=""}var u=d.tags.length,_=d.tagName;d.strict||(_=_[d.looseCase]());for(var v=_;u--;){var U=d.tags[u];if(U.name!==v)R(d,"Unexpected close tag");else break}if(u<0){R(d,"Unmatched closing tag: "+d.tagName),d.textNode+="</"+d.tagName+">",d.state=y.TEXT;return}d.tagName=_;for(var z=d.tags.length;z-- >u;){var ne=d.tag=d.tags.pop();d.tagName=d.tag.name,N(d,"onclosetag",d.tagName);var he={};for(var Fe in ne.ns)he[Fe]=ne.ns[Fe];var at=d.tags[d.tags.length-1]||d;d.opt.xmlns&&ne.ns!==at.ns&&Object.keys(ne.ns).forEach(function(ue){var ke=ne.ns[ue];N(d,"onclosenamespace",{prefix:ue,uri:ke})})}u===0&&(d.closedRoot=!0),d.tagName=d.attribValue=d.attribName="",d.attribList.length=0,d.state=y.TEXT}function Ri(d){var u=d.entity,_=u.toLowerCase(),v,U="";return d.ENTITIES[u]?d.ENTITIES[u]:d.ENTITIES[_]?d.ENTITIES[_]:(u=_,u.charAt(0)==="#"&&(u.charAt(1)==="x"?(u=u.slice(2),v=parseInt(u,16),U=v.toString(16)):(u=u.slice(1),v=parseInt(u,10),U=v.toString(10))),u=u.replace(/^0+/,""),isNaN(v)||U.toLowerCase()!==u?(R(d,"Invalid character entity"),"&"+d.entity+";"):String.fromCodePoint(v))}function cr(d,u){u==="<"?(d.state=y.OPEN_WAKA,d.startTagPosition=d.position):D(u)||(R(d,"Non-whitespace before first tag."),d.textNode=u,d.state=y.TEXT)}function q(d,u){var _="";return u<d.length&&(_=d.charAt(u)),_}function fr(d){var u=this;if(this.error)throw this.error;if(u.closed)return Z(u,"Cannot write after close. Assign an onready handler.");if(d===null)return B(u);typeof d=="object"&&(d=d.toString());for(var _=0,v="";v=q(d,_++),u.c=v,!!v;)switch(u.trackPosition&&(u.position++,v===`
`?(u.line++,u.column=0):u.column++),u.state){case y.BEGIN:if(u.state=y.BEGIN_WHITESPACE,v==="\uFEFF")continue;cr(u,v);continue;case y.BEGIN_WHITESPACE:cr(u,v);continue;case y.TEXT:if(u.sawRoot&&!u.closedRoot){for(var U=_-1;v&&v!=="<"&&v!=="&";)v=q(d,_++),v&&u.trackPosition&&(u.position++,v===`
`?(u.line++,u.column=0):u.column++);u.textNode+=d.substring(U,_-1)}v==="<"&&!(u.sawRoot&&u.closedRoot&&!u.strict)?(u.state=y.OPEN_WAKA,u.startTagPosition=u.position):(!D(v)&&(!u.sawRoot||u.closedRoot)&&R(u,"Text data outside of root node."),v==="&"?u.state=y.TEXT_ENTITY:u.textNode+=v);continue;case y.SCRIPT:v==="<"?u.state=y.SCRIPT_ENDING:u.script+=v;continue;case y.SCRIPT_ENDING:v==="/"?u.state=y.CLOSE_TAG:(u.script+="<"+v,u.state=y.SCRIPT);continue;case y.OPEN_WAKA:if(v==="!")u.state=y.SGML_DECL,u.sgmlDecl="";else if(!D(v))if(M(S,v))u.state=y.OPEN_TAG,u.tagName=v;else if(v==="/")u.state=y.CLOSE_TAG,u.tagName="";else if(v==="?")u.state=y.PROC_INST,u.procInstName=u.procInstBody="";else{if(R(u,"Unencoded <"),u.startTagPosition+1<u.position){var z=u.position-u.startTagPosition;v=new Array(z).join(" ")+v}u.textNode+="<"+v,u.state=y.TEXT}continue;case y.SGML_DECL:(u.sgmlDecl+v).toUpperCase()===c?(N(u,"onopencdata"),u.state=y.CDATA,u.sgmlDecl="",u.cdata=""):u.sgmlDecl+v==="--"?(u.state=y.COMMENT,u.comment="",u.sgmlDecl=""):(u.sgmlDecl+v).toUpperCase()===m?(u.state=y.DOCTYPE,(u.doctype||u.sawRoot)&&R(u,"Inappropriately located doctype declaration"),u.doctype="",u.sgmlDecl=""):v===">"?(N(u,"onsgmldeclaration",u.sgmlDecl),u.sgmlDecl="",u.state=y.TEXT):(le(v)&&(u.state=y.SGML_DECL_QUOTED),u.sgmlDecl+=v);continue;case y.SGML_DECL_QUOTED:v===u.q&&(u.state=y.SGML_DECL,u.q=""),u.sgmlDecl+=v;continue;case y.DOCTYPE:v===">"?(u.state=y.TEXT,N(u,"ondoctype",u.doctype),u.doctype=!0):(u.doctype+=v,v==="["?u.state=y.DOCTYPE_DTD:le(v)&&(u.state=y.DOCTYPE_QUOTED,u.q=v));continue;case y.DOCTYPE_QUOTED:u.doctype+=v,v===u.q&&(u.q="",u.state=y.DOCTYPE);continue;case y.DOCTYPE_DTD:u.doctype+=v,v==="]"?u.state=y.DOCTYPE:le(v)&&(u.state=y.DOCTYPE_DTD_QUOTED,u.q=v);continue;case y.DOCTYPE_DTD_QUOTED:u.doctype+=v,v===u.q&&(u.state=y.DOCTYPE_DTD,u.q="");continue;case y.COMMENT:v==="-"?u.state=y.COMMENT_ENDING:u.comment+=v;continue;case y.COMMENT_ENDING:v==="-"?(u.state=y.COMMENT_ENDED,u.comment=W(u.opt,u.comment),u.comment&&N(u,"oncomment",u.comment),u.comment=""):(u.comment+="-"+v,u.state=y.COMMENT);continue;case y.COMMENT_ENDED:v!==">"?(R(u,"Malformed comment"),u.comment+="--"+v,u.state=y.COMMENT):u.state=y.TEXT;continue;case y.CDATA:v==="]"?u.state=y.CDATA_ENDING:u.cdata+=v;continue;case y.CDATA_ENDING:v==="]"?u.state=y.CDATA_ENDING_2:(u.cdata+="]"+v,u.state=y.CDATA);continue;case y.CDATA_ENDING_2:v===">"?(u.cdata&&N(u,"oncdata",u.cdata),N(u,"onclosecdata"),u.cdata="",u.state=y.TEXT):v==="]"?u.cdata+="]":(u.cdata+="]]"+v,u.state=y.CDATA);continue;case y.PROC_INST:v==="?"?u.state=y.PROC_INST_ENDING:D(v)?u.state=y.PROC_INST_BODY:u.procInstName+=v;continue;case y.PROC_INST_BODY:if(!u.procInstBody&&D(v))continue;v==="?"?u.state=y.PROC_INST_ENDING:u.procInstBody+=v;continue;case y.PROC_INST_ENDING:v===">"?(N(u,"onprocessinginstruction",{name:u.procInstName,body:u.procInstBody}),u.procInstName=u.procInstBody="",u.state=y.TEXT):(u.procInstBody+="?"+v,u.state=y.PROC_INST_BODY);continue;case y.OPEN_TAG:M(C,v)?u.tagName+=v:(X(u),v===">"?Ke(u):v==="/"?u.state=y.OPEN_TAG_SLASH:(D(v)||R(u,"Invalid character in tag name"),u.state=y.ATTRIB));continue;case y.OPEN_TAG_SLASH:v===">"?(Ke(u,!0),vn(u)):(R(u,"Forward-slash in opening tag not followed by >"),u.state=y.ATTRIB);continue;case y.ATTRIB:if(D(v))continue;v===">"?Ke(u):v==="/"?u.state=y.OPEN_TAG_SLASH:M(S,v)?(u.attribName=v,u.attribValue="",u.state=y.ATTRIB_NAME):R(u,"Invalid attribute name");continue;case y.ATTRIB_NAME:v==="="?u.state=y.ATTRIB_VALUE:v===">"?(R(u,"Attribute without value"),u.attribValue=u.attribName,En(u),Ke(u)):D(v)?u.state=y.ATTRIB_NAME_SAW_WHITE:M(C,v)?u.attribName+=v:R(u,"Invalid attribute name");continue;case y.ATTRIB_NAME_SAW_WHITE:if(v==="=")u.state=y.ATTRIB_VALUE;else{if(D(v))continue;R(u,"Attribute without value"),u.tag.attributes[u.attribName]="",u.attribValue="",N(u,"onattribute",{name:u.attribName,value:""}),u.attribName="",v===">"?Ke(u):M(S,v)?(u.attribName=v,u.state=y.ATTRIB_NAME):(R(u,"Invalid attribute name"),u.state=y.ATTRIB)}continue;case y.ATTRIB_VALUE:if(D(v))continue;le(v)?(u.q=v,u.state=y.ATTRIB_VALUE_QUOTED):(R(u,"Unquoted attribute value"),u.state=y.ATTRIB_VALUE_UNQUOTED,u.attribValue=v);continue;case y.ATTRIB_VALUE_QUOTED:if(v!==u.q){v==="&"?u.state=y.ATTRIB_VALUE_ENTITY_Q:u.attribValue+=v;continue}En(u),u.q="",u.state=y.ATTRIB_VALUE_CLOSED;continue;case y.ATTRIB_VALUE_CLOSED:D(v)?u.state=y.ATTRIB:v===">"?Ke(u):v==="/"?u.state=y.OPEN_TAG_SLASH:M(S,v)?(R(u,"No whitespace between attributes"),u.attribName=v,u.attribValue="",u.state=y.ATTRIB_NAME):R(u,"Invalid attribute name");continue;case y.ATTRIB_VALUE_UNQUOTED:if(!j(v)){v==="&"?u.state=y.ATTRIB_VALUE_ENTITY_U:u.attribValue+=v;continue}En(u),v===">"?Ke(u):u.state=y.ATTRIB;continue;case y.CLOSE_TAG:if(u.tagName)v===">"?vn(u):M(C,v)?u.tagName+=v:u.script?(u.script+="</"+u.tagName,u.tagName="",u.state=y.SCRIPT):(D(v)||R(u,"Invalid tagname in closing tag"),u.state=y.CLOSE_TAG_SAW_WHITE);else{if(D(v))continue;O(S,v)?u.script?(u.script+="</"+v,u.state=y.SCRIPT):R(u,"Invalid tagname in closing tag."):u.tagName=v}continue;case y.CLOSE_TAG_SAW_WHITE:if(D(v))continue;v===">"?vn(u):R(u,"Invalid characters in closing tag");continue;case y.TEXT_ENTITY:case y.ATTRIB_VALUE_ENTITY_Q:case y.ATTRIB_VALUE_ENTITY_U:var ne,he;switch(u.state){case y.TEXT_ENTITY:ne=y.TEXT,he="textNode";break;case y.ATTRIB_VALUE_ENTITY_Q:ne=y.ATTRIB_VALUE_QUOTED,he="attribValue";break;case y.ATTRIB_VALUE_ENTITY_U:ne=y.ATTRIB_VALUE_UNQUOTED,he="attribValue";break}v===";"?(u[he]+=Ri(u),u.entity="",u.state=ne):M(u.entity.length?Q:$,v)?u.entity+=v:(R(u,"Invalid character in entity name"),u[he]+="&"+u.entity+v,u.entity="",u.state=ne);continue;default:throw new Error(u,"Unknown state: "+u.state)}return u.position>=u.bufferCheckPosition&&i(u),u}/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */String.fromCodePoint||function(){var d=String.fromCharCode,u=Math.floor,_=function(){var v=16384,U=[],z,ne,he=-1,Fe=arguments.length;if(!Fe)return"";for(var at="";++he<Fe;){var ue=Number(arguments[he]);if(!isFinite(ue)||ue<0||ue>1114111||u(ue)!==ue)throw RangeError("Invalid code point: "+ue);ue<=65535?U.push(ue):(ue-=65536,z=(ue>>10)+55296,ne=ue%1024+56320,U.push(z,ne)),(he+1===Fe||U.length>v)&&(at+=d.apply(null,U),U.length=0)}return at};Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:_,configurable:!0,writable:!0}):String.fromCodePoint=_}()})(e)})(Bo);Object.defineProperty(Xt,"__esModule",{value:!0});Xt.parseXml=Xt.XElement=void 0;const $d=Bo,Rr=te;class qo{constructor(t){if(this.name=t,this.value="",this.attributes=null,this.isCData=!1,this.elements=null,!t)throw Rr.newError("Element name cannot be empty","ERR_XML_ELEMENT_NAME_EMPTY");if(!bd(t))throw Rr.newError(`Invalid element name: ${t}`,"ERR_XML_ELEMENT_INVALID_NAME")}attribute(t){const n=this.attributes===null?null:this.attributes[t];if(n==null)throw Rr.newError(`No attribute "${t}"`,"ERR_XML_MISSED_ATTRIBUTE");return n}removeAttribute(t){this.attributes!==null&&delete this.attributes[t]}element(t,n=!1,r=null){const i=this.elementOrNull(t,n);if(i===null)throw Rr.newError(r||`No element "${t}"`,"ERR_XML_MISSED_ELEMENT");return i}elementOrNull(t,n=!1){if(this.elements===null)return null;for(const r of this.elements)if(Ho(r,t,n))return r;return null}getElements(t,n=!1){return this.elements===null?[]:this.elements.filter(r=>Ho(r,t,n))}elementValueOrEmpty(t,n=!1){const r=this.elementOrNull(t,n);return r===null?"":r.value}}Xt.XElement=qo;const Cd=new RegExp(/^[A-Za-z_][:A-Za-z0-9_-]*$/i);function bd(e){return Cd.test(e)}function Ho(e,t,n){const r=e.name;return r===t||n===!0&&r.length===t.length&&r.toLowerCase()===t.toLowerCase()}function Od(e){let t=null;const n=$d.parser(!0,{}),r=[];return n.onopentag=i=>{const a=new qo(i.name);if(a.attributes=i.attributes,t===null)t=a;else{const o=r[r.length-1];o.elements==null&&(o.elements=[]),o.elements.push(a)}r.push(a)},n.onclosetag=()=>{r.pop()},n.ontext=i=>{r.length>0&&(r[r.length-1].value=i)},n.oncdata=i=>{const a=r[r.length-1];a.value=i,a.isCData=!0},n.onerror=i=>{throw i},n.write(e),t}Xt.parseXml=Od;(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.newError=e.asArray=e.CURRENT_APP_PACKAGE_FILE_NAME=e.CURRENT_APP_INSTALLER_FILE_NAME=e.XElement=e.parseXml=e.ProgressCallbackTransform=e.UUID=e.parseDn=e.githubUrl=e.getS3LikeProviderBaseUrl=e.configureRequestUrl=e.parseJson=e.safeStringifyJson=e.configureRequestOptionsFromUrl=e.configureRequestOptions=e.safeGetHeader=e.DigestTransform=e.HttpExecutor=e.createHttpError=e.HttpError=e.CancellationError=e.CancellationToken=void 0;var t=$t;Object.defineProperty(e,"CancellationToken",{enumerable:!0,get:function(){return t.CancellationToken}}),Object.defineProperty(e,"CancellationError",{enumerable:!0,get:function(){return t.CancellationError}});var n=J;Object.defineProperty(e,"HttpError",{enumerable:!0,get:function(){return n.HttpError}}),Object.defineProperty(e,"createHttpError",{enumerable:!0,get:function(){return n.createHttpError}}),Object.defineProperty(e,"HttpExecutor",{enumerable:!0,get:function(){return n.HttpExecutor}}),Object.defineProperty(e,"DigestTransform",{enumerable:!0,get:function(){return n.DigestTransform}}),Object.defineProperty(e,"safeGetHeader",{enumerable:!0,get:function(){return n.safeGetHeader}}),Object.defineProperty(e,"configureRequestOptions",{enumerable:!0,get:function(){return n.configureRequestOptions}}),Object.defineProperty(e,"configureRequestOptionsFromUrl",{enumerable:!0,get:function(){return n.configureRequestOptionsFromUrl}}),Object.defineProperty(e,"safeStringifyJson",{enumerable:!0,get:function(){return n.safeStringifyJson}}),Object.defineProperty(e,"parseJson",{enumerable:!0,get:function(){return n.parseJson}}),Object.defineProperty(e,"configureRequestUrl",{enumerable:!0,get:function(){return n.configureRequestUrl}});var r=Yt;Object.defineProperty(e,"getS3LikeProviderBaseUrl",{enumerable:!0,get:function(){return r.getS3LikeProviderBaseUrl}}),Object.defineProperty(e,"githubUrl",{enumerable:!0,get:function(){return r.githubUrl}});var i=Ir;Object.defineProperty(e,"parseDn",{enumerable:!0,get:function(){return i.parseDn}});var a=Wt;Object.defineProperty(e,"UUID",{enumerable:!0,get:function(){return a.UUID}});var o=bn;Object.defineProperty(e,"ProgressCallbackTransform",{enumerable:!0,get:function(){return o.ProgressCallbackTransform}});var s=Xt;Object.defineProperty(e,"parseXml",{enumerable:!0,get:function(){return s.parseXml}}),Object.defineProperty(e,"XElement",{enumerable:!0,get:function(){return s.XElement}}),e.CURRENT_APP_INSTALLER_FILE_NAME="installer.exe",e.CURRENT_APP_PACKAGE_FILE_NAME="package.7z";function l(f){return f==null?[]:Array.isArray(f)?f:[f]}e.asArray=l;function p(f,c){const m=new Error(f);return m.code=c,m}e.newError=p})(te);var ut={},It={},Se={};Se.fromCallback=function(e){return Object.defineProperty(function(...t){if(typeof t[t.length-1]=="function")e.apply(this,t);else return new Promise((n,r)=>{e.call(this,...t,(i,a)=>i!=null?r(i):n(a))})},"name",{value:e.name})};Se.fromPromise=function(e){return Object.defineProperty(function(...t){const n=t[t.length-1];if(typeof n!="function")return e.apply(this,t);e.apply(this,t.slice(0,-1)).then(r=>n(null,r),n)},"name",{value:e.name})};var ct=Vf.default,Id=process.cwd,Dr=null,Nd=process.platform;process.cwd=function(){return Dr||(Dr=Id.call(process)),Dr};try{process.cwd()}catch{}if(typeof process.chdir=="function"){var jo=process.chdir;process.chdir=function(e){Dr=null,jo.call(process,e)},Object.setPrototypeOf&&Object.setPrototypeOf(process.chdir,jo)}var Rd=Dd;function Dd(e){ct.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&t(e),e.lutimes||n(e),e.chown=a(e.chown),e.fchown=a(e.fchown),e.lchown=a(e.lchown),e.chmod=r(e.chmod),e.fchmod=r(e.fchmod),e.lchmod=r(e.lchmod),e.chownSync=o(e.chownSync),e.fchownSync=o(e.fchownSync),e.lchownSync=o(e.lchownSync),e.chmodSync=i(e.chmodSync),e.fchmodSync=i(e.fchmodSync),e.lchmodSync=i(e.lchmodSync),e.stat=s(e.stat),e.fstat=s(e.fstat),e.lstat=s(e.lstat),e.statSync=l(e.statSync),e.fstatSync=l(e.fstatSync),e.lstatSync=l(e.lstatSync),e.lchmod||(e.lchmod=function(f,c,m){m&&process.nextTick(m)},e.lchmodSync=function(){}),e.lchown||(e.lchown=function(f,c,m,g){g&&process.nextTick(g)},e.lchownSync=function(){}),Nd==="win32"&&(e.rename=function(f){return function(c,m,g){var w=Date.now(),A=0;f(c,m,function S(C){if(C&&(C.code==="EACCES"||C.code==="EPERM")&&Date.now()-w<6e4){setTimeout(function(){e.stat(m,function($,Q){$&&$.code==="ENOENT"?f(c,m,S):g(C)})},A),A<100&&(A+=10);return}g&&g(C)})}}(e.rename)),e.read=function(f){function c(m,g,w,A,S,C){var $;if(C&&typeof C=="function"){var Q=0;$=function(D,le,j){if(D&&D.code==="EAGAIN"&&Q<10)return Q++,f.call(e,m,g,w,A,S,$);C.apply(this,arguments)}}return f.call(e,m,g,w,A,S,$)}return Object.setPrototypeOf&&Object.setPrototypeOf(c,f),c}(e.read),e.readSync=function(f){return function(c,m,g,w,A){for(var S=0;;)try{return f.call(e,c,m,g,w,A)}catch(C){if(C.code==="EAGAIN"&&S<10){S++;continue}throw C}}}(e.readSync);function t(f){f.lchmod=function(c,m,g){f.open(c,ct.O_WRONLY|ct.O_SYMLINK,m,function(w,A){if(w){g&&g(w);return}f.fchmod(A,m,function(S){f.close(A,function(C){g&&g(S||C)})})})},f.lchmodSync=function(c,m){var g=f.openSync(c,ct.O_WRONLY|ct.O_SYMLINK,m),w=!0,A;try{A=f.fchmodSync(g,m),w=!1}finally{if(w)try{f.closeSync(g)}catch{}else f.closeSync(g)}return A}}function n(f){ct.hasOwnProperty("O_SYMLINK")?(f.lutimes=function(c,m,g,w){f.open(c,ct.O_SYMLINK,function(A,S){if(A){w&&w(A);return}f.futimes(S,m,g,function(C){f.close(S,function($){w&&w(C||$)})})})},f.lutimesSync=function(c,m,g){var w=f.openSync(c,ct.O_SYMLINK),A,S=!0;try{A=f.futimesSync(w,m,g),S=!1}finally{if(S)try{f.closeSync(w)}catch{}else f.closeSync(w)}return A}):(f.lutimes=function(c,m,g,w){w&&process.nextTick(w)},f.lutimesSync=function(){})}function r(f){return f&&function(c,m,g){return f.call(e,c,m,function(w){p(w)&&(w=null),g&&g.apply(this,arguments)})}}function i(f){return f&&function(c,m){try{return f.call(e,c,m)}catch(g){if(!p(g))throw g}}}function a(f){return f&&function(c,m,g,w){return f.call(e,c,m,g,function(A){p(A)&&(A=null),w&&w.apply(this,arguments)})}}function o(f){return f&&function(c,m,g){try{return f.call(e,c,m,g)}catch(w){if(!p(w))throw w}}}function s(f){return f&&function(c,m,g){typeof m=="function"&&(g=m,m=null);function w(A,S){S&&(S.uid<0&&(S.uid+=4294967296),S.gid<0&&(S.gid+=4294967296)),g&&g.apply(this,arguments)}return m?f.call(e,c,m,w):f.call(e,c,w)}}function l(f){return f&&function(c,m){var g=m?f.call(e,c,m):f.call(e,c);return g&&(g.uid<0&&(g.uid+=4294967296),g.gid<0&&(g.gid+=4294967296)),g}}function p(f){if(!f||f.code==="ENOSYS")return!0;var c=!process.getuid||process.getuid()!==0;return!!(c&&(f.code==="EINVAL"||f.code==="EPERM"))}}var Go=$n.default.Stream,Pd=xd;function xd(e){return{ReadStream:t,WriteStream:n};function t(r,i){if(!(this instanceof t))return new t(r,i);Go.call(this);var a=this;this.path=r,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=64*1024,i=i||{};for(var o=Object.keys(i),s=0,l=o.length;s<l;s++){var p=o[s];this[p]=i[p]}if(this.encoding&&this.setEncoding(this.encoding),this.start!==void 0){if(typeof this.start!="number")throw TypeError("start must be a Number");if(this.end===void 0)this.end=1/0;else if(typeof this.end!="number")throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}if(this.fd!==null){process.nextTick(function(){a._read()});return}e.open(this.path,this.flags,this.mode,function(f,c){if(f){a.emit("error",f),a.readable=!1;return}a.fd=c,a.emit("open",c),a._read()})}function n(r,i){if(!(this instanceof n))return new n(r,i);Go.call(this),this.path=r,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,i=i||{};for(var a=Object.keys(i),o=0,s=a.length;o<s;o++){var l=a[o];this[l]=i[l]}if(this.start!==void 0){if(typeof this.start!="number")throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],this.fd===null&&(this._open=e.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}var Fd=Ud,Ld=Object.getPrototypeOf||function(e){return e.__proto__};function Ud(e){if(e===null||typeof e!="object")return e;if(e instanceof Object)var t={__proto__:Ld(e)};else var t=Object.create(null);return Object.getOwnPropertyNames(e).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}),t}var oe=Ze.default,kd=Rd,Md=Pd,Bd=Fd,Pr=Oo.default,me,xr;typeof Symbol=="function"&&typeof Symbol.for=="function"?(me=Symbol.for("graceful-fs.queue"),xr=Symbol.for("graceful-fs.previous")):(me="___graceful-fs.queue",xr="___graceful-fs.previous");function qd(){}function Vo(e,t){Object.defineProperty(e,me,{get:function(){return t}})}var Nt=qd;Pr.debuglog?Nt=Pr.debuglog("gfs4"):/\bgfs4\b/i.test("")&&(Nt=function(){var e=Pr.format.apply(Pr,arguments);e="GFS4: "+e.split(/\n/).join(`
GFS4: `),console.error(e)});if(!oe[me]){var Hd=Be[me]||[];Vo(oe,Hd),oe.close=function(e){function t(n,r){return e.call(oe,n,function(i){i||Wo(),typeof r=="function"&&r.apply(this,arguments)})}return Object.defineProperty(t,xr,{value:e}),t}(oe.close),oe.closeSync=function(e){function t(n){e.apply(oe,arguments),Wo()}return Object.defineProperty(t,xr,{value:e}),t}(oe.closeSync),/\bgfs4\b/i.test("")&&process.on("exit",function(){Nt(oe[me]),Io.default.equal(oe[me].length,0)})}Be[me]||Vo(Be,oe[me]);var xe=Yo(Bd(oe));function Yo(e){kd(e),e.gracefulify=Yo,e.createReadStream=D,e.createWriteStream=le;var t=e.readFile;e.readFile=n;function n(O,y,x){return typeof y=="function"&&(x=y,y=null),G(O,y,x);function G(N,V,W,Z){return t(N,V,function(B){B&&(B.code==="EMFILE"||B.code==="ENFILE")?zt([G,[N,V,W],B,Z||Date.now(),Date.now()]):typeof W=="function"&&W.apply(this,arguments)})}}var r=e.writeFile;e.writeFile=i;function i(O,y,x,G){return typeof x=="function"&&(G=x,x=null),N(O,y,x,G);function N(V,W,Z,B,R){return r(V,W,Z,function(X){X&&(X.code==="EMFILE"||X.code==="ENFILE")?zt([N,[V,W,Z,B],X,R||Date.now(),Date.now()]):typeof B=="function"&&B.apply(this,arguments)})}}var a=e.appendFile;a&&(e.appendFile=o);function o(O,y,x,G){return typeof x=="function"&&(G=x,x=null),N(O,y,x,G);function N(V,W,Z,B,R){return a(V,W,Z,function(X){X&&(X.code==="EMFILE"||X.code==="ENFILE")?zt([N,[V,W,Z,B],X,R||Date.now(),Date.now()]):typeof B=="function"&&B.apply(this,arguments)})}}var s=e.copyFile;s&&(e.copyFile=l);function l(O,y,x,G){return typeof x=="function"&&(G=x,x=0),N(O,y,x,G);function N(V,W,Z,B,R){return s(V,W,Z,function(X){X&&(X.code==="EMFILE"||X.code==="ENFILE")?zt([N,[V,W,Z,B],X,R||Date.now(),Date.now()]):typeof B=="function"&&B.apply(this,arguments)})}}var p=e.readdir;e.readdir=f;function f(O,y,x){return typeof y=="function"&&(x=y,y=null),G(O,y,x);function G(N,V,W,Z){return p(N,V,function(B,R){B&&(B.code==="EMFILE"||B.code==="ENFILE")?zt([G,[N,V,W],B,Z||Date.now(),Date.now()]):(R&&R.sort&&R.sort(),typeof W=="function"&&W.call(this,B,R))})}}if(process.version.substr(0,4)==="v0.8"){var c=Md(e);S=c.ReadStream,$=c.WriteStream}var m=e.ReadStream;m&&(S.prototype=Object.create(m.prototype),S.prototype.open=C);var g=e.WriteStream;g&&($.prototype=Object.create(g.prototype),$.prototype.open=Q),Object.defineProperty(e,"ReadStream",{get:function(){return S},set:function(O){S=O},enumerable:!0,configurable:!0}),Object.defineProperty(e,"WriteStream",{get:function(){return $},set:function(O){$=O},enumerable:!0,configurable:!0});var w=S;Object.defineProperty(e,"FileReadStream",{get:function(){return w},set:function(O){w=O},enumerable:!0,configurable:!0});var A=$;Object.defineProperty(e,"FileWriteStream",{get:function(){return A},set:function(O){A=O},enumerable:!0,configurable:!0});function S(O,y){return this instanceof S?(m.apply(this,arguments),this):S.apply(Object.create(S.prototype),arguments)}function C(){var O=this;M(O.path,O.flags,O.mode,function(y,x){y?(O.autoClose&&O.destroy(),O.emit("error",y)):(O.fd=x,O.emit("open",x),O.read())})}function $(O,y){return this instanceof $?(g.apply(this,arguments),this):$.apply(Object.create($.prototype),arguments)}function Q(){var O=this;M(O.path,O.flags,O.mode,function(y,x){y?(O.destroy(),O.emit("error",y)):(O.fd=x,O.emit("open",x))})}function D(O,y){return new e.ReadStream(O,y)}function le(O,y){return new e.WriteStream(O,y)}var j=e.open;e.open=M;function M(O,y,x,G){return typeof x=="function"&&(G=x,x=null),N(O,y,x,G);function N(V,W,Z,B,R){return j(V,W,Z,function(X,Bt){X&&(X.code==="EMFILE"||X.code==="ENFILE")?zt([N,[V,W,Z,B],X,R||Date.now(),Date.now()]):typeof B=="function"&&B.apply(this,arguments)})}}return e}function zt(e){Nt("ENQUEUE",e[0].name,e[1]),oe[me].push(e),Yi()}var Fr;function Wo(){for(var e=Date.now(),t=0;t<oe[me].length;++t)oe[me][t].length>2&&(oe[me][t][3]=e,oe[me][t][4]=e);Yi()}function Yi(){if(clearTimeout(Fr),Fr=void 0,oe[me].length!==0){var e=oe[me].shift(),t=e[0],n=e[1],r=e[2],i=e[3],a=e[4];if(i===void 0)Nt("RETRY",t.name,n),t.apply(null,n);else if(Date.now()-i>=6e4){Nt("TIMEOUT",t.name,n);var o=n.pop();typeof o=="function"&&o.call(null,r)}else{var s=Date.now()-a,l=Math.max(a-i,1),p=Math.min(l*1.2,100);s>=p?(Nt("RETRY",t.name,n),t.apply(null,n.concat([i]))):oe[me].push(e)}Fr===void 0&&(Fr=setTimeout(Yi,0))}}(function(e){const t=Se.fromCallback,n=xe,r=["access","appendFile","chmod","chown","close","copyFile","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","opendir","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","utimes","writeFile"].filter(i=>typeof n[i]=="function");Object.assign(e,n),r.forEach(i=>{e[i]=t(n[i])}),e.realpath.native=t(n.realpath.native),e.exists=function(i,a){return typeof a=="function"?n.exists(i,a):new Promise(o=>n.exists(i,o))},e.read=function(i,a,o,s,l,p){return typeof p=="function"?n.read(i,a,o,s,l,p):new Promise((f,c)=>{n.read(i,a,o,s,l,(m,g,w)=>{if(m)return c(m);f({bytesRead:g,buffer:w})})})},e.write=function(i,a,...o){return typeof o[o.length-1]=="function"?n.write(i,a,...o):new Promise((s,l)=>{n.write(i,a,...o,(p,f,c)=>{if(p)return l(p);s({bytesWritten:f,buffer:c})})})},typeof n.writev=="function"&&(e.writev=function(i,a,...o){return typeof o[o.length-1]=="function"?n.writev(i,a,...o):new Promise((s,l)=>{n.writev(i,a,...o,(p,f,c)=>{if(p)return l(p);s({bytesWritten:f,buffers:c})})})})})(It);var Wi={},Xo={};const jd=re.default;Xo.checkPath=function(t){if(process.platform==="win32"&&/[<>:"|?*]/.test(t.replace(jd.parse(t).root,""))){const r=new Error(`Path contains invalid characters: ${t}`);throw r.code="EINVAL",r}};const zo=It,{checkPath:Ko}=Xo,Jo=e=>{const t={mode:511};return typeof e=="number"?e:F(F({},t),e).mode};Wi.makeDir=async(e,t)=>(Ko(e),zo.mkdir(e,{mode:Jo(t),recursive:!0}));Wi.makeDirSync=(e,t)=>(Ko(e),zo.mkdirSync(e,{mode:Jo(t),recursive:!0}));const Gd=Se.fromPromise,{makeDir:Vd,makeDirSync:Xi}=Wi,zi=Gd(Vd);var Xe={mkdirs:zi,mkdirsSync:Xi,mkdirp:zi,mkdirpSync:Xi,ensureDir:zi,ensureDirSync:Xi};const Kt=xe;function Yd(e,t,n,r){Kt.open(e,"r+",(i,a)=>{if(i)return r(i);Kt.futimes(a,t,n,o=>{Kt.close(a,s=>{r&&r(o||s)})})})}function Wd(e,t,n){const r=Kt.openSync(e,"r+");return Kt.futimesSync(r,t,n),Kt.closeSync(r)}var Qo={utimesMillis:Yd,utimesMillisSync:Wd};const Jt=It,fe=re.default,Xd=Oo.default;function zd(e,t,n){const r=n.dereference?i=>Jt.stat(i,{bigint:!0}):i=>Jt.lstat(i,{bigint:!0});return Promise.all([r(e),r(t).catch(i=>{if(i.code==="ENOENT")return null;throw i})]).then(([i,a])=>({srcStat:i,destStat:a}))}function Kd(e,t,n){let r;const i=n.dereference?o=>Jt.statSync(o,{bigint:!0}):o=>Jt.lstatSync(o,{bigint:!0}),a=i(e);try{r=i(t)}catch(o){if(o.code==="ENOENT")return{srcStat:a,destStat:null};throw o}return{srcStat:a,destStat:r}}function Jd(e,t,n,r,i){Xd.callbackify(zd)(e,t,r,(a,o)=>{if(a)return i(a);const{srcStat:s,destStat:l}=o;if(l){if(Nn(s,l)){const p=fe.basename(e),f=fe.basename(t);return n==="move"&&p!==f&&p.toLowerCase()===f.toLowerCase()?i(null,{srcStat:s,destStat:l,isChangingCase:!0}):i(new Error("Source and destination must not be the same."))}if(s.isDirectory()&&!l.isDirectory())return i(new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`));if(!s.isDirectory()&&l.isDirectory())return i(new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`))}return s.isDirectory()&&Ki(e,t)?i(new Error(Lr(e,t,n))):i(null,{srcStat:s,destStat:l})})}function Qd(e,t,n,r){const{srcStat:i,destStat:a}=Kd(e,t,r);if(a){if(Nn(i,a)){const o=fe.basename(e),s=fe.basename(t);if(n==="move"&&o!==s&&o.toLowerCase()===s.toLowerCase())return{srcStat:i,destStat:a,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(i.isDirectory()&&!a.isDirectory())throw new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`);if(!i.isDirectory()&&a.isDirectory())throw new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`)}if(i.isDirectory()&&Ki(e,t))throw new Error(Lr(e,t,n));return{srcStat:i,destStat:a}}function Zo(e,t,n,r,i){const a=fe.resolve(fe.dirname(e)),o=fe.resolve(fe.dirname(n));if(o===a||o===fe.parse(o).root)return i();Jt.stat(o,{bigint:!0},(s,l)=>s?s.code==="ENOENT"?i():i(s):Nn(t,l)?i(new Error(Lr(e,n,r))):Zo(e,t,o,r,i))}function es(e,t,n,r){const i=fe.resolve(fe.dirname(e)),a=fe.resolve(fe.dirname(n));if(a===i||a===fe.parse(a).root)return;let o;try{o=Jt.statSync(a,{bigint:!0})}catch(s){if(s.code==="ENOENT")return;throw s}if(Nn(t,o))throw new Error(Lr(e,n,r));return es(e,t,a,r)}function Nn(e,t){return t.ino&&t.dev&&t.ino===e.ino&&t.dev===e.dev}function Ki(e,t){const n=fe.resolve(e).split(fe.sep).filter(i=>i),r=fe.resolve(t).split(fe.sep).filter(i=>i);return n.reduce((i,a,o)=>i&&r[o]===a,!0)}function Lr(e,t,n){return`Cannot ${n} '${e}' to a subdirectory of itself, '${t}'.`}var Qt={checkPaths:Jd,checkPathsSync:Qd,checkParentPaths:Zo,checkParentPathsSync:es,isSrcSubdir:Ki,areIdentical:Nn};const _e=xe,Rn=re.default,Zd=Xe.mkdirsSync,eh=Qo.utimesMillisSync,Dn=Qt;function th(e,t,n){typeof n=="function"&&(n={filter:n}),n=n||{},n.clobber="clobber"in n?!!n.clobber:!0,n.overwrite="overwrite"in n?!!n.overwrite:n.clobber,n.preserveTimestamps&&process.arch==="ia32"&&console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);const{srcStat:r,destStat:i}=Dn.checkPathsSync(e,t,"copy",n);return Dn.checkParentPathsSync(e,r,t,"copy"),nh(i,e,t,n)}function nh(e,t,n,r){if(r.filter&&!r.filter(t,n))return;const i=Rn.dirname(n);return _e.existsSync(i)||Zd(i),ts(e,t,n,r)}function rh(e,t,n,r){if(!(r.filter&&!r.filter(t,n)))return ts(e,t,n,r)}function ts(e,t,n,r){const a=(r.dereference?_e.statSync:_e.lstatSync)(t);if(a.isDirectory())return ch(a,e,t,n,r);if(a.isFile()||a.isCharacterDevice()||a.isBlockDevice())return ih(a,e,t,n,r);if(a.isSymbolicLink())return hh(e,t,n,r);throw a.isSocket()?new Error(`Cannot copy a socket file: ${t}`):a.isFIFO()?new Error(`Cannot copy a FIFO pipe: ${t}`):new Error(`Unknown file: ${t}`)}function ih(e,t,n,r,i){return t?ah(e,n,r,i):ns(e,n,r,i)}function ah(e,t,n,r){if(r.overwrite)return _e.unlinkSync(n),ns(e,t,n,r);if(r.errorOnExist)throw new Error(`'${n}' already exists`)}function ns(e,t,n,r){return _e.copyFileSync(t,n),r.preserveTimestamps&&oh(e.mode,t,n),Ji(n,e.mode)}function oh(e,t,n){return sh(e)&&lh(n,e),uh(t,n)}function sh(e){return(e&128)==0}function lh(e,t){return Ji(e,t|128)}function Ji(e,t){return _e.chmodSync(e,t)}function uh(e,t){const n=_e.statSync(e);return eh(t,n.atime,n.mtime)}function ch(e,t,n,r,i){return t?rs(n,r,i):fh(e.mode,n,r,i)}function fh(e,t,n,r){return _e.mkdirSync(n),rs(t,n,r),Ji(n,e)}function rs(e,t,n){_e.readdirSync(e).forEach(r=>dh(r,e,t,n))}function dh(e,t,n,r){const i=Rn.join(t,e),a=Rn.join(n,e),{destStat:o}=Dn.checkPathsSync(i,a,"copy",r);return rh(o,i,a,r)}function hh(e,t,n,r){let i=_e.readlinkSync(t);if(r.dereference&&(i=Rn.resolve(process.cwd(),i)),e){let a;try{a=_e.readlinkSync(n)}catch(o){if(o.code==="EINVAL"||o.code==="UNKNOWN")return _e.symlinkSync(i,n);throw o}if(r.dereference&&(a=Rn.resolve(process.cwd(),a)),Dn.isSrcSubdir(i,a))throw new Error(`Cannot copy '${i}' to a subdirectory of itself, '${a}'.`);if(_e.statSync(n).isDirectory()&&Dn.isSrcSubdir(a,i))throw new Error(`Cannot overwrite '${a}' with '${i}'.`);return ph(i,n)}else return _e.symlinkSync(i,n)}function ph(e,t){return _e.unlinkSync(t),_e.symlinkSync(e,t)}var mh=th,is={copySync:mh};const gh=Se.fromPromise,as=It;function yh(e){return as.access(e).then(()=>!0).catch(()=>!1)}var Rt={pathExists:gh(yh),pathExistsSync:as.existsSync};const Ne=xe,Pn=re.default,Eh=Xe.mkdirs,vh=Rt.pathExists,wh=Qo.utimesMillis,xn=Qt;function _h(e,t,n,r){typeof n=="function"&&!r?(r=n,n={}):typeof n=="function"&&(n={filter:n}),r=r||function(){},n=n||{},n.clobber="clobber"in n?!!n.clobber:!0,n.overwrite="overwrite"in n?!!n.overwrite:n.clobber,n.preserveTimestamps&&process.arch==="ia32"&&console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`),xn.checkPaths(e,t,"copy",n,(i,a)=>{if(i)return r(i);const{srcStat:o,destStat:s}=a;xn.checkParentPaths(e,o,t,"copy",l=>l?r(l):n.filter?ss(os,s,e,t,n,r):os(s,e,t,n,r))})}function os(e,t,n,r,i){const a=Pn.dirname(n);vh(a,(o,s)=>{if(o)return i(o);if(s)return Ur(e,t,n,r,i);Eh(a,l=>l?i(l):Ur(e,t,n,r,i))})}function ss(e,t,n,r,i,a){Promise.resolve(i.filter(n,r)).then(o=>o?e(t,n,r,i,a):a(),o=>a(o))}function Th(e,t,n,r,i){return r.filter?ss(Ur,e,t,n,r,i):Ur(e,t,n,r,i)}function Ur(e,t,n,r,i){(r.dereference?Ne.stat:Ne.lstat)(t,(o,s)=>o?i(o):s.isDirectory()?Ih(s,e,t,n,r,i):s.isFile()||s.isCharacterDevice()||s.isBlockDevice()?Ah(s,e,t,n,r,i):s.isSymbolicLink()?Dh(e,t,n,r,i):s.isSocket()?i(new Error(`Cannot copy a socket file: ${t}`)):s.isFIFO()?i(new Error(`Cannot copy a FIFO pipe: ${t}`)):i(new Error(`Unknown file: ${t}`)))}function Ah(e,t,n,r,i,a){return t?Sh(e,n,r,i,a):ls(e,n,r,i,a)}function Sh(e,t,n,r,i){if(r.overwrite)Ne.unlink(n,a=>a?i(a):ls(e,t,n,r,i));else return r.errorOnExist?i(new Error(`'${n}' already exists`)):i()}function ls(e,t,n,r,i){Ne.copyFile(t,n,a=>a?i(a):r.preserveTimestamps?$h(e.mode,t,n,i):kr(n,e.mode,i))}function $h(e,t,n,r){return Ch(e)?bh(n,e,i=>i?r(i):us(e,t,n,r)):us(e,t,n,r)}function Ch(e){return(e&128)==0}function bh(e,t,n){return kr(e,t|128,n)}function us(e,t,n,r){Oh(t,n,i=>i?r(i):kr(n,e,r))}function kr(e,t,n){return Ne.chmod(e,t,n)}function Oh(e,t,n){Ne.stat(e,(r,i)=>r?n(r):wh(t,i.atime,i.mtime,n))}function Ih(e,t,n,r,i,a){return t?cs(n,r,i,a):Nh(e.mode,n,r,i,a)}function Nh(e,t,n,r,i){Ne.mkdir(n,a=>{if(a)return i(a);cs(t,n,r,o=>o?i(o):kr(n,e,i))})}function cs(e,t,n,r){Ne.readdir(e,(i,a)=>i?r(i):fs(a,e,t,n,r))}function fs(e,t,n,r,i){const a=e.pop();return a?Rh(e,a,t,n,r,i):i()}function Rh(e,t,n,r,i,a){const o=Pn.join(n,t),s=Pn.join(r,t);xn.checkPaths(o,s,"copy",i,(l,p)=>{if(l)return a(l);const{destStat:f}=p;Th(f,o,s,i,c=>c?a(c):fs(e,n,r,i,a))})}function Dh(e,t,n,r,i){Ne.readlink(t,(a,o)=>{if(a)return i(a);if(r.dereference&&(o=Pn.resolve(process.cwd(),o)),e)Ne.readlink(n,(s,l)=>s?s.code==="EINVAL"||s.code==="UNKNOWN"?Ne.symlink(o,n,i):i(s):(r.dereference&&(l=Pn.resolve(process.cwd(),l)),xn.isSrcSubdir(o,l)?i(new Error(`Cannot copy '${o}' to a subdirectory of itself, '${l}'.`)):e.isDirectory()&&xn.isSrcSubdir(l,o)?i(new Error(`Cannot overwrite '${l}' with '${o}'.`)):Ph(o,n,i)));else return Ne.symlink(o,n,i)})}function Ph(e,t,n){Ne.unlink(t,r=>r?n(r):Ne.symlink(e,t,n))}var xh=_h;const Fh=Se.fromCallback;var ds={copy:Fh(xh)};const hs=xe,ps=re.default,H=Io.default,Fn=process.platform==="win32";function ms(e){["unlink","chmod","stat","lstat","rmdir","readdir"].forEach(n=>{e[n]=e[n]||hs[n],n=n+"Sync",e[n]=e[n]||hs[n]}),e.maxBusyTries=e.maxBusyTries||3}function Qi(e,t,n){let r=0;typeof t=="function"&&(n=t,t={}),H(e,"rimraf: missing path"),H.strictEqual(typeof e,"string","rimraf: path should be a string"),H.strictEqual(typeof n,"function","rimraf: callback function required"),H(t,"rimraf: invalid options argument provided"),H.strictEqual(typeof t,"object","rimraf: options should be object"),ms(t),gs(e,t,function i(a){if(a){if((a.code==="EBUSY"||a.code==="ENOTEMPTY"||a.code==="EPERM")&&r<t.maxBusyTries){r++;const o=r*100;return setTimeout(()=>gs(e,t,i),o)}a.code==="ENOENT"&&(a=null)}n(a)})}function gs(e,t,n){H(e),H(t),H(typeof n=="function"),t.lstat(e,(r,i)=>{if(r&&r.code==="ENOENT")return n(null);if(r&&r.code==="EPERM"&&Fn)return ys(e,t,r,n);if(i&&i.isDirectory())return Mr(e,t,r,n);t.unlink(e,a=>{if(a){if(a.code==="ENOENT")return n(null);if(a.code==="EPERM")return Fn?ys(e,t,a,n):Mr(e,t,a,n);if(a.code==="EISDIR")return Mr(e,t,a,n)}return n(a)})})}function ys(e,t,n,r){H(e),H(t),H(typeof r=="function"),t.chmod(e,438,i=>{i?r(i.code==="ENOENT"?null:n):t.stat(e,(a,o)=>{a?r(a.code==="ENOENT"?null:n):o.isDirectory()?Mr(e,t,n,r):t.unlink(e,r)})})}function Es(e,t,n){let r;H(e),H(t);try{t.chmodSync(e,438)}catch(i){if(i.code==="ENOENT")return;throw n}try{r=t.statSync(e)}catch(i){if(i.code==="ENOENT")return;throw n}r.isDirectory()?Br(e,t,n):t.unlinkSync(e)}function Mr(e,t,n,r){H(e),H(t),H(typeof r=="function"),t.rmdir(e,i=>{i&&(i.code==="ENOTEMPTY"||i.code==="EEXIST"||i.code==="EPERM")?Lh(e,t,r):i&&i.code==="ENOTDIR"?r(n):r(i)})}function Lh(e,t,n){H(e),H(t),H(typeof n=="function"),t.readdir(e,(r,i)=>{if(r)return n(r);let a=i.length,o;if(a===0)return t.rmdir(e,n);i.forEach(s=>{Qi(ps.join(e,s),t,l=>{if(!o){if(l)return n(o=l);--a==0&&t.rmdir(e,n)}})})})}function vs(e,t){let n;t=t||{},ms(t),H(e,"rimraf: missing path"),H.strictEqual(typeof e,"string","rimraf: path should be a string"),H(t,"rimraf: missing options"),H.strictEqual(typeof t,"object","rimraf: options should be object");try{n=t.lstatSync(e)}catch(r){if(r.code==="ENOENT")return;r.code==="EPERM"&&Fn&&Es(e,t,r)}try{n&&n.isDirectory()?Br(e,t,null):t.unlinkSync(e)}catch(r){if(r.code==="ENOENT")return;if(r.code==="EPERM")return Fn?Es(e,t,r):Br(e,t,r);if(r.code!=="EISDIR")throw r;Br(e,t,r)}}function Br(e,t,n){H(e),H(t);try{t.rmdirSync(e)}catch(r){if(r.code==="ENOTDIR")throw n;if(r.code==="ENOTEMPTY"||r.code==="EEXIST"||r.code==="EPERM")Uh(e,t);else if(r.code!=="ENOENT")throw r}}function Uh(e,t){if(H(e),H(t),t.readdirSync(e).forEach(n=>vs(ps.join(e,n),t)),Fn){const n=Date.now();do try{return t.rmdirSync(e,t)}catch{}while(Date.now()-n<500)}else return t.rmdirSync(e,t)}var kh=Qi;Qi.sync=vs;const qr=xe,Mh=Se.fromCallback,ws=kh;function Bh(e,t){if(qr.rm)return qr.rm(e,{recursive:!0,force:!0},t);ws(e,t)}function qh(e){if(qr.rmSync)return qr.rmSync(e,{recursive:!0,force:!0});ws.sync(e)}var Hr={remove:Mh(Bh),removeSync:qh};const Hh=Se.fromPromise,_s=It,Ts=re.default,As=Xe,Ss=Hr,$s=Hh(async function(t){let n;try{n=await _s.readdir(t)}catch{return As.mkdirs(t)}return Promise.all(n.map(r=>Ss.remove(Ts.join(t,r))))});function Cs(e){let t;try{t=_s.readdirSync(e)}catch{return As.mkdirsSync(e)}t.forEach(n=>{n=Ts.join(e,n),Ss.removeSync(n)})}var jh={emptyDirSync:Cs,emptydirSync:Cs,emptyDir:$s,emptydir:$s};const Gh=Se.fromCallback,bs=re.default,ft=xe,Os=Xe;function Vh(e,t){function n(){ft.writeFile(e,"",r=>{if(r)return t(r);t()})}ft.stat(e,(r,i)=>{if(!r&&i.isFile())return t();const a=bs.dirname(e);ft.stat(a,(o,s)=>{if(o)return o.code==="ENOENT"?Os.mkdirs(a,l=>{if(l)return t(l);n()}):t(o);s.isDirectory()?n():ft.readdir(a,l=>{if(l)return t(l)})})})}function Yh(e){let t;try{t=ft.statSync(e)}catch{}if(t&&t.isFile())return;const n=bs.dirname(e);try{ft.statSync(n).isDirectory()||ft.readdirSync(n)}catch(r){if(r&&r.code==="ENOENT")Os.mkdirsSync(n);else throw r}ft.writeFileSync(e,"")}var Wh={createFile:Gh(Vh),createFileSync:Yh};const Xh=Se.fromCallback,Is=re.default,dt=xe,Ns=Xe,zh=Rt.pathExists,{areIdentical:Rs}=Qt;function Kh(e,t,n){function r(i,a){dt.link(i,a,o=>{if(o)return n(o);n(null)})}dt.lstat(t,(i,a)=>{dt.lstat(e,(o,s)=>{if(o)return o.message=o.message.replace("lstat","ensureLink"),n(o);if(a&&Rs(s,a))return n(null);const l=Is.dirname(t);zh(l,(p,f)=>{if(p)return n(p);if(f)return r(e,t);Ns.mkdirs(l,c=>{if(c)return n(c);r(e,t)})})})})}function Jh(e,t){let n;try{n=dt.lstatSync(t)}catch{}try{const a=dt.lstatSync(e);if(n&&Rs(a,n))return}catch(a){throw a.message=a.message.replace("lstat","ensureLink"),a}const r=Is.dirname(t);return dt.existsSync(r)||Ns.mkdirsSync(r),dt.linkSync(e,t)}var Qh={createLink:Xh(Kh),createLinkSync:Jh};const ht=re.default,Ln=xe,Zh=Rt.pathExists;function ep(e,t,n){if(ht.isAbsolute(e))return Ln.lstat(e,r=>r?(r.message=r.message.replace("lstat","ensureSymlink"),n(r)):n(null,{toCwd:e,toDst:e}));{const r=ht.dirname(t),i=ht.join(r,e);return Zh(i,(a,o)=>a?n(a):o?n(null,{toCwd:i,toDst:e}):Ln.lstat(e,s=>s?(s.message=s.message.replace("lstat","ensureSymlink"),n(s)):n(null,{toCwd:e,toDst:ht.relative(r,e)})))}}function tp(e,t){let n;if(ht.isAbsolute(e)){if(n=Ln.existsSync(e),!n)throw new Error("absolute srcpath does not exist");return{toCwd:e,toDst:e}}else{const r=ht.dirname(t),i=ht.join(r,e);if(n=Ln.existsSync(i),n)return{toCwd:i,toDst:e};if(n=Ln.existsSync(e),!n)throw new Error("relative srcpath does not exist");return{toCwd:e,toDst:ht.relative(r,e)}}}var np={symlinkPaths:ep,symlinkPathsSync:tp};const Ds=xe;function rp(e,t,n){if(n=typeof t=="function"?t:n,t=typeof t=="function"?!1:t,t)return n(null,t);Ds.lstat(e,(r,i)=>{if(r)return n(null,"file");t=i&&i.isDirectory()?"dir":"file",n(null,t)})}function ip(e,t){let n;if(t)return t;try{n=Ds.lstatSync(e)}catch{return"file"}return n&&n.isDirectory()?"dir":"file"}var ap={symlinkType:rp,symlinkTypeSync:ip};const op=Se.fromCallback,Ps=re.default,qe=It,xs=Xe,sp=xs.mkdirs,lp=xs.mkdirsSync,Fs=np,up=Fs.symlinkPaths,cp=Fs.symlinkPathsSync,Ls=ap,fp=Ls.symlinkType,dp=Ls.symlinkTypeSync,hp=Rt.pathExists,{areIdentical:Us}=Qt;function pp(e,t,n,r){r=typeof n=="function"?n:r,n=typeof n=="function"?!1:n,qe.lstat(t,(i,a)=>{!i&&a.isSymbolicLink()?Promise.all([qe.stat(e),qe.stat(t)]).then(([o,s])=>{if(Us(o,s))return r(null);ks(e,t,n,r)}):ks(e,t,n,r)})}function ks(e,t,n,r){up(e,t,(i,a)=>{if(i)return r(i);e=a.toDst,fp(a.toCwd,n,(o,s)=>{if(o)return r(o);const l=Ps.dirname(t);hp(l,(p,f)=>{if(p)return r(p);if(f)return qe.symlink(e,t,s,r);sp(l,c=>{if(c)return r(c);qe.symlink(e,t,s,r)})})})})}function mp(e,t,n){let r;try{r=qe.lstatSync(t)}catch{}if(r&&r.isSymbolicLink()){const s=qe.statSync(e),l=qe.statSync(t);if(Us(s,l))return}const i=cp(e,t);e=i.toDst,n=dp(i.toCwd,n);const a=Ps.dirname(t);return qe.existsSync(a)||lp(a),qe.symlinkSync(e,t,n)}var gp={createSymlink:op(pp),createSymlinkSync:mp};const jr=Wh,Gr=Qh,Vr=gp;var yp={createFile:jr.createFile,createFileSync:jr.createFileSync,ensureFile:jr.createFile,ensureFileSync:jr.createFileSync,createLink:Gr.createLink,createLinkSync:Gr.createLinkSync,ensureLink:Gr.createLink,ensureLinkSync:Gr.createLinkSync,createSymlink:Vr.createSymlink,createSymlinkSync:Vr.createSymlinkSync,ensureSymlink:Vr.createSymlink,ensureSymlinkSync:Vr.createSymlinkSync};function Ep(e,{EOL:t=`
`,finalEOL:n=!0,replacer:r=null,spaces:i}={}){const a=n?t:"";return JSON.stringify(e,r,i).replace(/\n/g,t)+a}function vp(e){return Buffer.isBuffer(e)&&(e=e.toString("utf8")),e.replace(/^\uFEFF/,"")}var Zi={stringify:Ep,stripBom:vp};let Zt;try{Zt=require("graceful-fs")}catch{Zt=Ze.default}const Yr=Se,{stringify:Ms,stripBom:Bs}=Zi;async function wp(e,t={}){typeof t=="string"&&(t={encoding:t});const n=t.fs||Zt,r="throws"in t?t.throws:!0;let i=await Yr.fromCallback(n.readFile)(e,t);i=Bs(i);let a;try{a=JSON.parse(i,t?t.reviver:null)}catch(o){if(r)throw o.message=`${e}: ${o.message}`,o;return null}return a}const _p=Yr.fromPromise(wp);function Tp(e,t={}){typeof t=="string"&&(t={encoding:t});const n=t.fs||Zt,r="throws"in t?t.throws:!0;try{let i=n.readFileSync(e,t);return i=Bs(i),JSON.parse(i,t.reviver)}catch(i){if(r)throw i.message=`${e}: ${i.message}`,i;return null}}async function Ap(e,t,n={}){const r=n.fs||Zt,i=Ms(t,n);await Yr.fromCallback(r.writeFile)(e,i,n)}const Sp=Yr.fromPromise(Ap);function $p(e,t,n={}){const r=n.fs||Zt,i=Ms(t,n);return r.writeFileSync(e,i,n)}const Cp={readFile:_p,readFileSync:Tp,writeFile:Sp,writeFileSync:$p};var bp=Cp;const Wr=bp;var Op={readJson:Wr.readFile,readJsonSync:Wr.readFileSync,writeJson:Wr.writeFile,writeJsonSync:Wr.writeFileSync};const Ip=Se.fromCallback,Un=xe,qs=re.default,Hs=Xe,Np=Rt.pathExists;function Rp(e,t,n,r){typeof n=="function"&&(r=n,n="utf8");const i=qs.dirname(e);Np(i,(a,o)=>{if(a)return r(a);if(o)return Un.writeFile(e,t,n,r);Hs.mkdirs(i,s=>{if(s)return r(s);Un.writeFile(e,t,n,r)})})}function Dp(e,...t){const n=qs.dirname(e);if(Un.existsSync(n))return Un.writeFileSync(e,...t);Hs.mkdirsSync(n),Un.writeFileSync(e,...t)}var ea={outputFile:Ip(Rp),outputFileSync:Dp};const{stringify:Pp}=Zi,{outputFile:xp}=ea;async function Fp(e,t,n={}){const r=Pp(t,n);await xp(e,r,n)}var Lp=Fp;const{stringify:Up}=Zi,{outputFileSync:kp}=ea;function Mp(e,t,n){const r=Up(t,n);kp(e,r,n)}var Bp=Mp;const qp=Se.fromPromise,$e=Op;$e.outputJson=qp(Lp);$e.outputJsonSync=Bp;$e.outputJSON=$e.outputJson;$e.outputJSONSync=$e.outputJsonSync;$e.writeJSON=$e.writeJson;$e.writeJSONSync=$e.writeJsonSync;$e.readJSON=$e.readJson;$e.readJSONSync=$e.readJsonSync;var Hp=$e;const js=xe,ta=re.default,jp=is.copySync,Gs=Hr.removeSync,Gp=Xe.mkdirpSync,Vs=Qt;function Vp(e,t,n){n=n||{};const r=n.overwrite||n.clobber||!1,{srcStat:i,isChangingCase:a=!1}=Vs.checkPathsSync(e,t,"move",n);return Vs.checkParentPathsSync(e,i,t,"move"),Yp(t)||Gp(ta.dirname(t)),Wp(e,t,r,a)}function Yp(e){const t=ta.dirname(e);return ta.parse(t).root===t}function Wp(e,t,n,r){if(r)return na(e,t,n);if(n)return Gs(t),na(e,t,n);if(js.existsSync(t))throw new Error("dest already exists.");return na(e,t,n)}function na(e,t,n){try{js.renameSync(e,t)}catch(r){if(r.code!=="EXDEV")throw r;return Xp(e,t,n)}}function Xp(e,t,n){return jp(e,t,{overwrite:n,errorOnExist:!0}),Gs(e)}var zp=Vp,Kp={moveSync:zp};const Jp=xe,ra=re.default,Qp=ds.copy,Ys=Hr.remove,Zp=Xe.mkdirp,em=Rt.pathExists,Ws=Qt;function tm(e,t,n,r){typeof n=="function"&&(r=n,n={});const i=n.overwrite||n.clobber||!1;Ws.checkPaths(e,t,"move",n,(a,o)=>{if(a)return r(a);const{srcStat:s,isChangingCase:l=!1}=o;Ws.checkParentPaths(e,s,t,"move",p=>{if(p)return r(p);if(nm(t))return Xs(e,t,i,l,r);Zp(ra.dirname(t),f=>f?r(f):Xs(e,t,i,l,r))})})}function nm(e){const t=ra.dirname(e);return ra.parse(t).root===t}function Xs(e,t,n,r,i){if(r)return ia(e,t,n,i);if(n)return Ys(t,a=>a?i(a):ia(e,t,n,i));em(t,(a,o)=>a?i(a):o?i(new Error("dest already exists.")):ia(e,t,n,i))}function ia(e,t,n,r){Jp.rename(e,t,i=>i?i.code!=="EXDEV"?r(i):rm(e,t,n,r):r())}function rm(e,t,n,r){Qp(e,t,{overwrite:n,errorOnExist:!0},a=>a?r(a):Ys(e,r))}var im=tm;const am=Se.fromCallback;var om={move:am(im)},Dt=F(F(F(F(F(F(F(F(F(F(F(F({},It),is),ds),jh),yp),Hp),Xe),Kp),om),ea),Rt),Hr),ge={},aa={},He={};function zs(e){return typeof e=="undefined"||e===null}function sm(e){return typeof e=="object"&&e!==null}function lm(e){return Array.isArray(e)?e:zs(e)?[]:[e]}function um(e,t){var n,r,i,a;if(t)for(a=Object.keys(t),n=0,r=a.length;n<r;n+=1)i=a[n],e[i]=t[i];return e}function cm(e,t){var n="",r;for(r=0;r<t;r+=1)n+=e;return n}function fm(e){return e===0&&Number.NEGATIVE_INFINITY===1/e}He.isNothing=zs;He.isObject=sm;He.toArray=lm;He.repeat=cm;He.isNegativeZero=fm;He.extend=um;function Ks(e,t){var n="",r=e.reason||"(unknown reason)";return e.mark?(e.mark.name&&(n+='in "'+e.mark.name+'" '),n+="("+(e.mark.line+1)+":"+(e.mark.column+1)+")",!t&&e.mark.snippet&&(n+=`

`+e.mark.snippet),r+" "+n):r}function kn(e,t){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=t,this.message=Ks(this,!1),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack||""}kn.prototype=Object.create(Error.prototype);kn.prototype.constructor=kn;kn.prototype.toString=function(t){return this.name+": "+Ks(this,t)};var Mn=kn,Bn=He;function oa(e,t,n,r,i){var a="",o="",s=Math.floor(i/2)-1;return r-t>s&&(a=" ... ",t=r-s+a.length),n-r>s&&(o=" ...",n=r+s-o.length),{str:a+e.slice(t,n).replace(/\t/g,"\u2192")+o,pos:r-t+a.length}}function sa(e,t){return Bn.repeat(" ",t-e.length)+e}function dm(e,t){if(t=Object.create(t||null),!e.buffer)return null;t.maxLength||(t.maxLength=79),typeof t.indent!="number"&&(t.indent=1),typeof t.linesBefore!="number"&&(t.linesBefore=3),typeof t.linesAfter!="number"&&(t.linesAfter=2);for(var n=/\r?\n|\r|\0/g,r=[0],i=[],a,o=-1;a=n.exec(e.buffer);)i.push(a.index),r.push(a.index+a[0].length),e.position<=a.index&&o<0&&(o=r.length-2);o<0&&(o=r.length-1);var s="",l,p,f=Math.min(e.line+t.linesAfter,i.length).toString().length,c=t.maxLength-(t.indent+f+3);for(l=1;l<=t.linesBefore&&!(o-l<0);l++)p=oa(e.buffer,r[o-l],i[o-l],e.position-(r[o]-r[o-l]),c),s=Bn.repeat(" ",t.indent)+sa((e.line-l+1).toString(),f)+" | "+p.str+`
`+s;for(p=oa(e.buffer,r[o],i[o],e.position,c),s+=Bn.repeat(" ",t.indent)+sa((e.line+1).toString(),f)+" | "+p.str+`
`,s+=Bn.repeat("-",t.indent+f+3+p.pos)+`^
`,l=1;l<=t.linesAfter&&!(o+l>=i.length);l++)p=oa(e.buffer,r[o+l],i[o+l],e.position-(r[o]-r[o+l]),c),s+=Bn.repeat(" ",t.indent)+sa((e.line+l+1).toString(),f)+" | "+p.str+`
`;return s.replace(/\n$/,"")}var hm=dm,Js=Mn,pm=["kind","multi","resolve","construct","instanceOf","predicate","represent","representName","defaultStyle","styleAliases"],mm=["scalar","sequence","mapping"];function gm(e){var t={};return e!==null&&Object.keys(e).forEach(function(n){e[n].forEach(function(r){t[String(r)]=n})}),t}function ym(e,t){if(t=t||{},Object.keys(t).forEach(function(n){if(pm.indexOf(n)===-1)throw new Js('Unknown option "'+n+'" is met in definition of "'+e+'" YAML type.')}),this.options=t,this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(n){return n},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.representName=t.representName||null,this.defaultStyle=t.defaultStyle||null,this.multi=t.multi||!1,this.styleAliases=gm(t.styleAliases||null),mm.indexOf(this.kind)===-1)throw new Js('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')}var Ce=ym,qn=Mn,la=Ce;function Qs(e,t){var n=[];return e[t].forEach(function(r){var i=n.length;n.forEach(function(a,o){a.tag===r.tag&&a.kind===r.kind&&a.multi===r.multi&&(i=o)}),n[i]=r}),n}function Em(){var e={scalar:{},sequence:{},mapping:{},fallback:{},multi:{scalar:[],sequence:[],mapping:[],fallback:[]}},t,n;function r(i){i.multi?(e.multi[i.kind].push(i),e.multi.fallback.push(i)):e[i.kind][i.tag]=e.fallback[i.tag]=i}for(t=0,n=arguments.length;t<n;t+=1)arguments[t].forEach(r);return e}function ua(e){return this.extend(e)}ua.prototype.extend=function(t){var n=[],r=[];if(t instanceof la)r.push(t);else if(Array.isArray(t))r=r.concat(t);else if(t&&(Array.isArray(t.implicit)||Array.isArray(t.explicit)))t.implicit&&(n=n.concat(t.implicit)),t.explicit&&(r=r.concat(t.explicit));else throw new qn("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");n.forEach(function(a){if(!(a instanceof la))throw new qn("Specified list of YAML types (or a single Type object) contains a non-Type object.");if(a.loadKind&&a.loadKind!=="scalar")throw new qn("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");if(a.multi)throw new qn("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.")}),r.forEach(function(a){if(!(a instanceof la))throw new qn("Specified list of YAML types (or a single Type object) contains a non-Type object.")});var i=Object.create(ua.prototype);return i.implicit=(this.implicit||[]).concat(n),i.explicit=(this.explicit||[]).concat(r),i.compiledImplicit=Qs(i,"implicit"),i.compiledExplicit=Qs(i,"explicit"),i.compiledTypeMap=Em(i.compiledImplicit,i.compiledExplicit),i};var Zs=ua,vm=Ce,el=new vm("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return e!==null?e:""}}),wm=Ce,tl=new wm("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return e!==null?e:[]}}),_m=Ce,nl=new _m("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return e!==null?e:{}}}),Tm=Zs,rl=new Tm({explicit:[el,tl,nl]}),Am=Ce;function Sm(e){if(e===null)return!0;var t=e.length;return t===1&&e==="~"||t===4&&(e==="null"||e==="Null"||e==="NULL")}function $m(){return null}function Cm(e){return e===null}var il=new Am("tag:yaml.org,2002:null",{kind:"scalar",resolve:Sm,construct:$m,predicate:Cm,represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"},empty:function(){return""}},defaultStyle:"lowercase"}),bm=Ce;function Om(e){if(e===null)return!1;var t=e.length;return t===4&&(e==="true"||e==="True"||e==="TRUE")||t===5&&(e==="false"||e==="False"||e==="FALSE")}function Im(e){return e==="true"||e==="True"||e==="TRUE"}function Nm(e){return Object.prototype.toString.call(e)==="[object Boolean]"}var al=new bm("tag:yaml.org,2002:bool",{kind:"scalar",resolve:Om,construct:Im,predicate:Nm,represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"}),Rm=He,Dm=Ce;function Pm(e){return 48<=e&&e<=57||65<=e&&e<=70||97<=e&&e<=102}function xm(e){return 48<=e&&e<=55}function Fm(e){return 48<=e&&e<=57}function Lm(e){if(e===null)return!1;var t=e.length,n=0,r=!1,i;if(!t)return!1;if(i=e[n],(i==="-"||i==="+")&&(i=e[++n]),i==="0"){if(n+1===t)return!0;if(i=e[++n],i==="b"){for(n++;n<t;n++)if(i=e[n],i!=="_"){if(i!=="0"&&i!=="1")return!1;r=!0}return r&&i!=="_"}if(i==="x"){for(n++;n<t;n++)if(i=e[n],i!=="_"){if(!Pm(e.charCodeAt(n)))return!1;r=!0}return r&&i!=="_"}if(i==="o"){for(n++;n<t;n++)if(i=e[n],i!=="_"){if(!xm(e.charCodeAt(n)))return!1;r=!0}return r&&i!=="_"}}if(i==="_")return!1;for(;n<t;n++)if(i=e[n],i!=="_"){if(!Fm(e.charCodeAt(n)))return!1;r=!0}return!(!r||i==="_")}function Um(e){var t=e,n=1,r;if(t.indexOf("_")!==-1&&(t=t.replace(/_/g,"")),r=t[0],(r==="-"||r==="+")&&(r==="-"&&(n=-1),t=t.slice(1),r=t[0]),t==="0")return 0;if(r==="0"){if(t[1]==="b")return n*parseInt(t.slice(2),2);if(t[1]==="x")return n*parseInt(t.slice(2),16);if(t[1]==="o")return n*parseInt(t.slice(2),8)}return n*parseInt(t,10)}function km(e){return Object.prototype.toString.call(e)==="[object Number]"&&e%1==0&&!Rm.isNegativeZero(e)}var ol=new Dm("tag:yaml.org,2002:int",{kind:"scalar",resolve:Lm,construct:Um,predicate:km,represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0o"+e.toString(8):"-0o"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),sl=He,Mm=Ce,Bm=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");function qm(e){return!(e===null||!Bm.test(e)||e[e.length-1]==="_")}function Hm(e){var t,n;return t=e.replace(/_/g,"").toLowerCase(),n=t[0]==="-"?-1:1,"+-".indexOf(t[0])>=0&&(t=t.slice(1)),t===".inf"?n===1?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:t===".nan"?NaN:n*parseFloat(t,10)}var jm=/^[-+]?[0-9]+e/;function Gm(e,t){var n;if(isNaN(e))switch(t){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(sl.isNegativeZero(e))return"-0.0";return n=e.toString(10),jm.test(n)?n.replace("e",".e"):n}function Vm(e){return Object.prototype.toString.call(e)==="[object Number]"&&(e%1!=0||sl.isNegativeZero(e))}var ll=new Mm("tag:yaml.org,2002:float",{kind:"scalar",resolve:qm,construct:Hm,predicate:Vm,represent:Gm,defaultStyle:"lowercase"}),ul=rl.extend({implicit:[il,al,ol,ll]}),cl=ul,Ym=Ce,fl=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),dl=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");function Wm(e){return e===null?!1:fl.exec(e)!==null||dl.exec(e)!==null}function Xm(e){var t,n,r,i,a,o,s,l=0,p=null,f,c,m;if(t=fl.exec(e),t===null&&(t=dl.exec(e)),t===null)throw new Error("Date resolve error");if(n=+t[1],r=+t[2]-1,i=+t[3],!t[4])return new Date(Date.UTC(n,r,i));if(a=+t[4],o=+t[5],s=+t[6],t[7]){for(l=t[7].slice(0,3);l.length<3;)l+="0";l=+l}return t[9]&&(f=+t[10],c=+(t[11]||0),p=(f*60+c)*6e4,t[9]==="-"&&(p=-p)),m=new Date(Date.UTC(n,r,i,a,o,s,l)),p&&m.setTime(m.getTime()-p),m}function zm(e){return e.toISOString()}var hl=new Ym("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:Wm,construct:Xm,instanceOf:Date,represent:zm}),Km=Ce;function Jm(e){return e==="<<"||e===null}var pl=new Km("tag:yaml.org,2002:merge",{kind:"scalar",resolve:Jm}),Qm=Ce,ca=`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;function Zm(e){if(e===null)return!1;var t,n,r=0,i=e.length,a=ca;for(n=0;n<i;n++)if(t=a.indexOf(e.charAt(n)),!(t>64)){if(t<0)return!1;r+=6}return r%8==0}function eg(e){var t,n,r=e.replace(/[\r\n=]/g,""),i=r.length,a=ca,o=0,s=[];for(t=0;t<i;t++)t%4==0&&t&&(s.push(o>>16&255),s.push(o>>8&255),s.push(o&255)),o=o<<6|a.indexOf(r.charAt(t));return n=i%4*6,n===0?(s.push(o>>16&255),s.push(o>>8&255),s.push(o&255)):n===18?(s.push(o>>10&255),s.push(o>>2&255)):n===12&&s.push(o>>4&255),new Uint8Array(s)}function tg(e){var t="",n=0,r,i,a=e.length,o=ca;for(r=0;r<a;r++)r%3==0&&r&&(t+=o[n>>18&63],t+=o[n>>12&63],t+=o[n>>6&63],t+=o[n&63]),n=(n<<8)+e[r];return i=a%3,i===0?(t+=o[n>>18&63],t+=o[n>>12&63],t+=o[n>>6&63],t+=o[n&63]):i===2?(t+=o[n>>10&63],t+=o[n>>4&63],t+=o[n<<2&63],t+=o[64]):i===1&&(t+=o[n>>2&63],t+=o[n<<4&63],t+=o[64],t+=o[64]),t}function ng(e){return Object.prototype.toString.call(e)==="[object Uint8Array]"}var ml=new Qm("tag:yaml.org,2002:binary",{kind:"scalar",resolve:Zm,construct:eg,predicate:ng,represent:tg}),rg=Ce,ig=Object.prototype.hasOwnProperty,ag=Object.prototype.toString;function og(e){if(e===null)return!0;var t=[],n,r,i,a,o,s=e;for(n=0,r=s.length;n<r;n+=1){if(i=s[n],o=!1,ag.call(i)!=="[object Object]")return!1;for(a in i)if(ig.call(i,a))if(!o)o=!0;else return!1;if(!o)return!1;if(t.indexOf(a)===-1)t.push(a);else return!1}return!0}function sg(e){return e!==null?e:[]}var gl=new rg("tag:yaml.org,2002:omap",{kind:"sequence",resolve:og,construct:sg}),lg=Ce,ug=Object.prototype.toString;function cg(e){if(e===null)return!0;var t,n,r,i,a,o=e;for(a=new Array(o.length),t=0,n=o.length;t<n;t+=1){if(r=o[t],ug.call(r)!=="[object Object]"||(i=Object.keys(r),i.length!==1))return!1;a[t]=[i[0],r[i[0]]]}return!0}function fg(e){if(e===null)return[];var t,n,r,i,a,o=e;for(a=new Array(o.length),t=0,n=o.length;t<n;t+=1)r=o[t],i=Object.keys(r),a[t]=[i[0],r[i[0]]];return a}var yl=new lg("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:cg,construct:fg}),dg=Ce,hg=Object.prototype.hasOwnProperty;function pg(e){if(e===null)return!0;var t,n=e;for(t in n)if(hg.call(n,t)&&n[t]!==null)return!1;return!0}function mg(e){return e!==null?e:{}}var El=new dg("tag:yaml.org,2002:set",{kind:"mapping",resolve:pg,construct:mg}),fa=cl.extend({implicit:[hl,pl],explicit:[ml,gl,yl,El]}),Pt=He,vl=Mn,gg=hm,yg=fa,pt=Object.prototype.hasOwnProperty,Xr=1,wl=2,_l=3,zr=4,da=1,Eg=2,Tl=3,vg=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,wg=/[\x85\u2028\u2029]/,_g=/[,\[\]\{\}]/,Al=/^(?:!|!!|![a-z\-]+!)$/i,Sl=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function $l(e){return Object.prototype.toString.call(e)}function ze(e){return e===10||e===13}function xt(e){return e===9||e===32}function Re(e){return e===9||e===32||e===10||e===13}function en(e){return e===44||e===91||e===93||e===123||e===125}function Tg(e){var t;return 48<=e&&e<=57?e-48:(t=e|32,97<=t&&t<=102?t-97+10:-1)}function Ag(e){return e===120?2:e===117?4:e===85?8:0}function Sg(e){return 48<=e&&e<=57?e-48:-1}function Cl(e){return e===48?"\0":e===97?"\x07":e===98?"\b":e===116||e===9?"	":e===110?`
`:e===118?"\v":e===102?"\f":e===114?"\r":e===101?"":e===32?" ":e===34?'"':e===47?"/":e===92?"\\":e===78?"\x85":e===95?"\xA0":e===76?"\u2028":e===80?"\u2029":""}function $g(e){return e<=65535?String.fromCharCode(e):String.fromCharCode((e-65536>>10)+55296,(e-65536&1023)+56320)}var bl=new Array(256),Ol=new Array(256);for(var tn=0;tn<256;tn++)bl[tn]=Cl(tn)?1:0,Ol[tn]=Cl(tn);function Cg(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||yg,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.firstTabInLine=-1,this.documents=[]}function Il(e,t){var n={name:e.filename,buffer:e.input.slice(0,-1),position:e.position,line:e.line,column:e.position-e.lineStart};return n.snippet=gg(n),new vl(t,n)}function I(e,t){throw Il(e,t)}function Kr(e,t){e.onWarning&&e.onWarning.call(null,Il(e,t))}var Nl={YAML:function(t,n,r){var i,a,o;t.version!==null&&I(t,"duplication of %YAML directive"),r.length!==1&&I(t,"YAML directive accepts exactly one argument"),i=/^([0-9]+)\.([0-9]+)$/.exec(r[0]),i===null&&I(t,"ill-formed argument of the YAML directive"),a=parseInt(i[1],10),o=parseInt(i[2],10),a!==1&&I(t,"unacceptable YAML version of the document"),t.version=r[0],t.checkLineBreaks=o<2,o!==1&&o!==2&&Kr(t,"unsupported YAML version of the document")},TAG:function(t,n,r){var i,a;r.length!==2&&I(t,"TAG directive accepts exactly two arguments"),i=r[0],a=r[1],Al.test(i)||I(t,"ill-formed tag handle (first argument) of the TAG directive"),pt.call(t.tagMap,i)&&I(t,'there is a previously declared suffix for "'+i+'" tag handle'),Sl.test(a)||I(t,"ill-formed tag prefix (second argument) of the TAG directive");try{a=decodeURIComponent(a)}catch{I(t,"tag prefix is malformed: "+a)}t.tagMap[i]=a}};function mt(e,t,n,r){var i,a,o,s;if(t<n){if(s=e.input.slice(t,n),r)for(i=0,a=s.length;i<a;i+=1)o=s.charCodeAt(i),o===9||32<=o&&o<=1114111||I(e,"expected valid JSON character");else vg.test(s)&&I(e,"the stream contains non-printable characters");e.result+=s}}function Rl(e,t,n,r){var i,a,o,s;for(Pt.isObject(n)||I(e,"cannot merge mappings; the provided source object is unacceptable"),i=Object.keys(n),o=0,s=i.length;o<s;o+=1)a=i[o],pt.call(t,a)||(t[a]=n[a],r[a]=!0)}function nn(e,t,n,r,i,a,o,s,l){var p,f;if(Array.isArray(i))for(i=Array.prototype.slice.call(i),p=0,f=i.length;p<f;p+=1)Array.isArray(i[p])&&I(e,"nested arrays are not supported inside keys"),typeof i=="object"&&$l(i[p])==="[object Object]"&&(i[p]="[object Object]");if(typeof i=="object"&&$l(i)==="[object Object]"&&(i="[object Object]"),i=String(i),t===null&&(t={}),r==="tag:yaml.org,2002:merge")if(Array.isArray(a))for(p=0,f=a.length;p<f;p+=1)Rl(e,t,a[p],n);else Rl(e,t,a,n);else!e.json&&!pt.call(n,i)&&pt.call(t,i)&&(e.line=o||e.line,e.lineStart=s||e.lineStart,e.position=l||e.position,I(e,"duplicated mapping key")),i==="__proto__"?Object.defineProperty(t,i,{configurable:!0,enumerable:!0,writable:!0,value:a}):t[i]=a,delete n[i];return t}function ha(e){var t;t=e.input.charCodeAt(e.position),t===10?e.position++:t===13?(e.position++,e.input.charCodeAt(e.position)===10&&e.position++):I(e,"a line break is expected"),e.line+=1,e.lineStart=e.position,e.firstTabInLine=-1}function se(e,t,n){for(var r=0,i=e.input.charCodeAt(e.position);i!==0;){for(;xt(i);)i===9&&e.firstTabInLine===-1&&(e.firstTabInLine=e.position),i=e.input.charCodeAt(++e.position);if(t&&i===35)do i=e.input.charCodeAt(++e.position);while(i!==10&&i!==13&&i!==0);if(ze(i))for(ha(e),i=e.input.charCodeAt(e.position),r++,e.lineIndent=0;i===32;)e.lineIndent++,i=e.input.charCodeAt(++e.position);else break}return n!==-1&&r!==0&&e.lineIndent<n&&Kr(e,"deficient indentation"),r}function Jr(e){var t=e.position,n;return n=e.input.charCodeAt(t),!!((n===45||n===46)&&n===e.input.charCodeAt(t+1)&&n===e.input.charCodeAt(t+2)&&(t+=3,n=e.input.charCodeAt(t),n===0||Re(n)))}function pa(e,t){t===1?e.result+=" ":t>1&&(e.result+=Pt.repeat(`
`,t-1))}function bg(e,t,n){var r,i,a,o,s,l,p,f,c=e.kind,m=e.result,g;if(g=e.input.charCodeAt(e.position),Re(g)||en(g)||g===35||g===38||g===42||g===33||g===124||g===62||g===39||g===34||g===37||g===64||g===96||(g===63||g===45)&&(i=e.input.charCodeAt(e.position+1),Re(i)||n&&en(i)))return!1;for(e.kind="scalar",e.result="",a=o=e.position,s=!1;g!==0;){if(g===58){if(i=e.input.charCodeAt(e.position+1),Re(i)||n&&en(i))break}else if(g===35){if(r=e.input.charCodeAt(e.position-1),Re(r))break}else{if(e.position===e.lineStart&&Jr(e)||n&&en(g))break;if(ze(g))if(l=e.line,p=e.lineStart,f=e.lineIndent,se(e,!1,-1),e.lineIndent>=t){s=!0,g=e.input.charCodeAt(e.position);continue}else{e.position=o,e.line=l,e.lineStart=p,e.lineIndent=f;break}}s&&(mt(e,a,o,!1),pa(e,e.line-l),a=o=e.position,s=!1),xt(g)||(o=e.position+1),g=e.input.charCodeAt(++e.position)}return mt(e,a,o,!1),e.result?!0:(e.kind=c,e.result=m,!1)}function Og(e,t){var n,r,i;if(n=e.input.charCodeAt(e.position),n!==39)return!1;for(e.kind="scalar",e.result="",e.position++,r=i=e.position;(n=e.input.charCodeAt(e.position))!==0;)if(n===39)if(mt(e,r,e.position,!0),n=e.input.charCodeAt(++e.position),n===39)r=e.position,e.position++,i=e.position;else return!0;else ze(n)?(mt(e,r,i,!0),pa(e,se(e,!1,t)),r=i=e.position):e.position===e.lineStart&&Jr(e)?I(e,"unexpected end of the document within a single quoted scalar"):(e.position++,i=e.position);I(e,"unexpected end of the stream within a single quoted scalar")}function Ig(e,t){var n,r,i,a,o,s;if(s=e.input.charCodeAt(e.position),s!==34)return!1;for(e.kind="scalar",e.result="",e.position++,n=r=e.position;(s=e.input.charCodeAt(e.position))!==0;){if(s===34)return mt(e,n,e.position,!0),e.position++,!0;if(s===92){if(mt(e,n,e.position,!0),s=e.input.charCodeAt(++e.position),ze(s))se(e,!1,t);else if(s<256&&bl[s])e.result+=Ol[s],e.position++;else if((o=Ag(s))>0){for(i=o,a=0;i>0;i--)s=e.input.charCodeAt(++e.position),(o=Tg(s))>=0?a=(a<<4)+o:I(e,"expected hexadecimal character");e.result+=$g(a),e.position++}else I(e,"unknown escape sequence");n=r=e.position}else ze(s)?(mt(e,n,r,!0),pa(e,se(e,!1,t)),n=r=e.position):e.position===e.lineStart&&Jr(e)?I(e,"unexpected end of the document within a double quoted scalar"):(e.position++,r=e.position)}I(e,"unexpected end of the stream within a double quoted scalar")}function Ng(e,t){var n=!0,r,i,a,o=e.tag,s,l=e.anchor,p,f,c,m,g,w=Object.create(null),A,S,C,$;if($=e.input.charCodeAt(e.position),$===91)f=93,g=!1,s=[];else if($===123)f=125,g=!0,s={};else return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=s),$=e.input.charCodeAt(++e.position);$!==0;){if(se(e,!0,t),$=e.input.charCodeAt(e.position),$===f)return e.position++,e.tag=o,e.anchor=l,e.kind=g?"mapping":"sequence",e.result=s,!0;n?$===44&&I(e,"expected the node content, but found ','"):I(e,"missed comma between flow collection entries"),S=A=C=null,c=m=!1,$===63&&(p=e.input.charCodeAt(e.position+1),Re(p)&&(c=m=!0,e.position++,se(e,!0,t))),r=e.line,i=e.lineStart,a=e.position,rn(e,t,Xr,!1,!0),S=e.tag,A=e.result,se(e,!0,t),$=e.input.charCodeAt(e.position),(m||e.line===r)&&$===58&&(c=!0,$=e.input.charCodeAt(++e.position),se(e,!0,t),rn(e,t,Xr,!1,!0),C=e.result),g?nn(e,s,w,S,A,C,r,i,a):c?s.push(nn(e,null,w,S,A,C,r,i,a)):s.push(A),se(e,!0,t),$=e.input.charCodeAt(e.position),$===44?(n=!0,$=e.input.charCodeAt(++e.position)):n=!1}I(e,"unexpected end of the stream within a flow collection")}function Rg(e,t){var n,r,i=da,a=!1,o=!1,s=t,l=0,p=!1,f,c;if(c=e.input.charCodeAt(e.position),c===124)r=!1;else if(c===62)r=!0;else return!1;for(e.kind="scalar",e.result="";c!==0;)if(c=e.input.charCodeAt(++e.position),c===43||c===45)da===i?i=c===43?Tl:Eg:I(e,"repeat of a chomping mode identifier");else if((f=Sg(c))>=0)f===0?I(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):o?I(e,"repeat of an indentation width identifier"):(s=t+f-1,o=!0);else break;if(xt(c)){do c=e.input.charCodeAt(++e.position);while(xt(c));if(c===35)do c=e.input.charCodeAt(++e.position);while(!ze(c)&&c!==0)}for(;c!==0;){for(ha(e),e.lineIndent=0,c=e.input.charCodeAt(e.position);(!o||e.lineIndent<s)&&c===32;)e.lineIndent++,c=e.input.charCodeAt(++e.position);if(!o&&e.lineIndent>s&&(s=e.lineIndent),ze(c)){l++;continue}if(e.lineIndent<s){i===Tl?e.result+=Pt.repeat(`
`,a?1+l:l):i===da&&a&&(e.result+=`
`);break}for(r?xt(c)?(p=!0,e.result+=Pt.repeat(`
`,a?1+l:l)):p?(p=!1,e.result+=Pt.repeat(`
`,l+1)):l===0?a&&(e.result+=" "):e.result+=Pt.repeat(`
`,l):e.result+=Pt.repeat(`
`,a?1+l:l),a=!0,o=!0,l=0,n=e.position;!ze(c)&&c!==0;)c=e.input.charCodeAt(++e.position);mt(e,n,e.position,!1)}return!0}function Dl(e,t){var n,r=e.tag,i=e.anchor,a=[],o,s=!1,l;if(e.firstTabInLine!==-1)return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=a),l=e.input.charCodeAt(e.position);l!==0&&(e.firstTabInLine!==-1&&(e.position=e.firstTabInLine,I(e,"tab characters must not be used in indentation")),!(l!==45||(o=e.input.charCodeAt(e.position+1),!Re(o))));){if(s=!0,e.position++,se(e,!0,-1)&&e.lineIndent<=t){a.push(null),l=e.input.charCodeAt(e.position);continue}if(n=e.line,rn(e,t,_l,!1,!0),a.push(e.result),se(e,!0,-1),l=e.input.charCodeAt(e.position),(e.line===n||e.lineIndent>t)&&l!==0)I(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break}return s?(e.tag=r,e.anchor=i,e.kind="sequence",e.result=a,!0):!1}function Dg(e,t,n){var r,i,a,o,s,l,p=e.tag,f=e.anchor,c={},m=Object.create(null),g=null,w=null,A=null,S=!1,C=!1,$;if(e.firstTabInLine!==-1)return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=c),$=e.input.charCodeAt(e.position);$!==0;){if(!S&&e.firstTabInLine!==-1&&(e.position=e.firstTabInLine,I(e,"tab characters must not be used in indentation")),r=e.input.charCodeAt(e.position+1),a=e.line,($===63||$===58)&&Re(r))$===63?(S&&(nn(e,c,m,g,w,null,o,s,l),g=w=A=null),C=!0,S=!0,i=!0):S?(S=!1,i=!0):I(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,$=r;else{if(o=e.line,s=e.lineStart,l=e.position,!rn(e,n,wl,!1,!0))break;if(e.line===a){for($=e.input.charCodeAt(e.position);xt($);)$=e.input.charCodeAt(++e.position);if($===58)$=e.input.charCodeAt(++e.position),Re($)||I(e,"a whitespace character is expected after the key-value separator within a block mapping"),S&&(nn(e,c,m,g,w,null,o,s,l),g=w=A=null),C=!0,S=!1,i=!1,g=e.tag,w=e.result;else if(C)I(e,"can not read an implicit mapping pair; a colon is missed");else return e.tag=p,e.anchor=f,!0}else if(C)I(e,"can not read a block mapping entry; a multiline key may not be an implicit key");else return e.tag=p,e.anchor=f,!0}if((e.line===a||e.lineIndent>t)&&(S&&(o=e.line,s=e.lineStart,l=e.position),rn(e,t,zr,!0,i)&&(S?w=e.result:A=e.result),S||(nn(e,c,m,g,w,A,o,s,l),g=w=A=null),se(e,!0,-1),$=e.input.charCodeAt(e.position)),(e.line===a||e.lineIndent>t)&&$!==0)I(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return S&&nn(e,c,m,g,w,null,o,s,l),C&&(e.tag=p,e.anchor=f,e.kind="mapping",e.result=c),C}function Pg(e){var t,n=!1,r=!1,i,a,o;if(o=e.input.charCodeAt(e.position),o!==33)return!1;if(e.tag!==null&&I(e,"duplication of a tag property"),o=e.input.charCodeAt(++e.position),o===60?(n=!0,o=e.input.charCodeAt(++e.position)):o===33?(r=!0,i="!!",o=e.input.charCodeAt(++e.position)):i="!",t=e.position,n){do o=e.input.charCodeAt(++e.position);while(o!==0&&o!==62);e.position<e.length?(a=e.input.slice(t,e.position),o=e.input.charCodeAt(++e.position)):I(e,"unexpected end of the stream within a verbatim tag")}else{for(;o!==0&&!Re(o);)o===33&&(r?I(e,"tag suffix cannot contain exclamation marks"):(i=e.input.slice(t-1,e.position+1),Al.test(i)||I(e,"named tag handle cannot contain such characters"),r=!0,t=e.position+1)),o=e.input.charCodeAt(++e.position);a=e.input.slice(t,e.position),_g.test(a)&&I(e,"tag suffix cannot contain flow indicator characters")}a&&!Sl.test(a)&&I(e,"tag name cannot contain such characters: "+a);try{a=decodeURIComponent(a)}catch{I(e,"tag name is malformed: "+a)}return n?e.tag=a:pt.call(e.tagMap,i)?e.tag=e.tagMap[i]+a:i==="!"?e.tag="!"+a:i==="!!"?e.tag="tag:yaml.org,2002:"+a:I(e,'undeclared tag handle "'+i+'"'),!0}function xg(e){var t,n;if(n=e.input.charCodeAt(e.position),n!==38)return!1;for(e.anchor!==null&&I(e,"duplication of an anchor property"),n=e.input.charCodeAt(++e.position),t=e.position;n!==0&&!Re(n)&&!en(n);)n=e.input.charCodeAt(++e.position);return e.position===t&&I(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function Fg(e){var t,n,r;if(r=e.input.charCodeAt(e.position),r!==42)return!1;for(r=e.input.charCodeAt(++e.position),t=e.position;r!==0&&!Re(r)&&!en(r);)r=e.input.charCodeAt(++e.position);return e.position===t&&I(e,"name of an alias node must contain at least one character"),n=e.input.slice(t,e.position),pt.call(e.anchorMap,n)||I(e,'unidentified alias "'+n+'"'),e.result=e.anchorMap[n],se(e,!0,-1),!0}function rn(e,t,n,r,i){var a,o,s,l=1,p=!1,f=!1,c,m,g,w,A,S;if(e.listener!==null&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,a=o=s=zr===n||_l===n,r&&se(e,!0,-1)&&(p=!0,e.lineIndent>t?l=1:e.lineIndent===t?l=0:e.lineIndent<t&&(l=-1)),l===1)for(;Pg(e)||xg(e);)se(e,!0,-1)?(p=!0,s=a,e.lineIndent>t?l=1:e.lineIndent===t?l=0:e.lineIndent<t&&(l=-1)):s=!1;if(s&&(s=p||i),(l===1||zr===n)&&(Xr===n||wl===n?A=t:A=t+1,S=e.position-e.lineStart,l===1?s&&(Dl(e,S)||Dg(e,S,A))||Ng(e,A)?f=!0:(o&&Rg(e,A)||Og(e,A)||Ig(e,A)?f=!0:Fg(e)?(f=!0,(e.tag!==null||e.anchor!==null)&&I(e,"alias node should not have any properties")):bg(e,A,Xr===n)&&(f=!0,e.tag===null&&(e.tag="?")),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):l===0&&(f=s&&Dl(e,S))),e.tag===null)e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);else if(e.tag==="?"){for(e.result!==null&&e.kind!=="scalar"&&I(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),c=0,m=e.implicitTypes.length;c<m;c+=1)if(w=e.implicitTypes[c],w.resolve(e.result)){e.result=w.construct(e.result),e.tag=w.tag,e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);break}}else if(e.tag!=="!"){if(pt.call(e.typeMap[e.kind||"fallback"],e.tag))w=e.typeMap[e.kind||"fallback"][e.tag];else for(w=null,g=e.typeMap.multi[e.kind||"fallback"],c=0,m=g.length;c<m;c+=1)if(e.tag.slice(0,g[c].tag.length)===g[c].tag){w=g[c];break}w||I(e,"unknown tag !<"+e.tag+">"),e.result!==null&&w.kind!==e.kind&&I(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+w.kind+'", not "'+e.kind+'"'),w.resolve(e.result,e.tag)?(e.result=w.construct(e.result,e.tag),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):I(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")}return e.listener!==null&&e.listener("close",e),e.tag!==null||e.anchor!==null||f}function Lg(e){var t=e.position,n,r,i,a=!1,o;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap=Object.create(null),e.anchorMap=Object.create(null);(o=e.input.charCodeAt(e.position))!==0&&(se(e,!0,-1),o=e.input.charCodeAt(e.position),!(e.lineIndent>0||o!==37));){for(a=!0,o=e.input.charCodeAt(++e.position),n=e.position;o!==0&&!Re(o);)o=e.input.charCodeAt(++e.position);for(r=e.input.slice(n,e.position),i=[],r.length<1&&I(e,"directive name must not be less than one character in length");o!==0;){for(;xt(o);)o=e.input.charCodeAt(++e.position);if(o===35){do o=e.input.charCodeAt(++e.position);while(o!==0&&!ze(o));break}if(ze(o))break;for(n=e.position;o!==0&&!Re(o);)o=e.input.charCodeAt(++e.position);i.push(e.input.slice(n,e.position))}o!==0&&ha(e),pt.call(Nl,r)?Nl[r](e,r,i):Kr(e,'unknown document directive "'+r+'"')}if(se(e,!0,-1),e.lineIndent===0&&e.input.charCodeAt(e.position)===45&&e.input.charCodeAt(e.position+1)===45&&e.input.charCodeAt(e.position+2)===45?(e.position+=3,se(e,!0,-1)):a&&I(e,"directives end mark is expected"),rn(e,e.lineIndent-1,zr,!1,!0),se(e,!0,-1),e.checkLineBreaks&&wg.test(e.input.slice(t,e.position))&&Kr(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&Jr(e)){e.input.charCodeAt(e.position)===46&&(e.position+=3,se(e,!0,-1));return}if(e.position<e.length-1)I(e,"end of the stream or a document separator is expected");else return}function Pl(e,t){e=String(e),t=t||{},e.length!==0&&(e.charCodeAt(e.length-1)!==10&&e.charCodeAt(e.length-1)!==13&&(e+=`
`),e.charCodeAt(0)===65279&&(e=e.slice(1)));var n=new Cg(e,t),r=e.indexOf("\0");for(r!==-1&&(n.position=r,I(n,"null byte is not allowed in input")),n.input+="\0";n.input.charCodeAt(n.position)===32;)n.lineIndent+=1,n.position+=1;for(;n.position<n.length-1;)Lg(n);return n.documents}function Ug(e,t,n){t!==null&&typeof t=="object"&&typeof n=="undefined"&&(n=t,t=null);var r=Pl(e,n);if(typeof t!="function")return r;for(var i=0,a=r.length;i<a;i+=1)t(r[i])}function kg(e,t){var n=Pl(e,t);if(n.length!==0){if(n.length===1)return n[0];throw new vl("expected a single document in the stream, but found more")}}aa.loadAll=Ug;aa.load=kg;var xl={},Qr=He,Hn=Mn,Mg=fa,Fl=Object.prototype.toString,Ll=Object.prototype.hasOwnProperty,ma=65279,Bg=9,jn=10,qg=13,Hg=32,jg=33,Gg=34,ga=35,Vg=37,Yg=38,Wg=39,Xg=42,Ul=44,zg=45,Zr=58,Kg=61,Jg=62,Qg=63,Zg=64,kl=91,Ml=93,e0=96,Bl=123,t0=124,ql=125,Te={};Te[0]="\\0";Te[7]="\\a";Te[8]="\\b";Te[9]="\\t";Te[10]="\\n";Te[11]="\\v";Te[12]="\\f";Te[13]="\\r";Te[27]="\\e";Te[34]='\\"';Te[92]="\\\\";Te[133]="\\N";Te[160]="\\_";Te[8232]="\\L";Te[8233]="\\P";var n0=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"],r0=/^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;function i0(e,t){var n,r,i,a,o,s,l;if(t===null)return{};for(n={},r=Object.keys(t),i=0,a=r.length;i<a;i+=1)o=r[i],s=String(t[o]),o.slice(0,2)==="!!"&&(o="tag:yaml.org,2002:"+o.slice(2)),l=e.compiledTypeMap.fallback[o],l&&Ll.call(l.styleAliases,s)&&(s=l.styleAliases[s]),n[o]=s;return n}function a0(e){var t,n,r;if(t=e.toString(16).toUpperCase(),e<=255)n="x",r=2;else if(e<=65535)n="u",r=4;else if(e<=4294967295)n="U",r=8;else throw new Hn("code point within a string may not be greater than 0xFFFFFFFF");return"\\"+n+Qr.repeat("0",r-t.length)+t}var o0=1,Gn=2;function s0(e){this.schema=e.schema||Mg,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=Qr.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=i0(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.quotingType=e.quotingType==='"'?Gn:o0,this.forceQuotes=e.forceQuotes||!1,this.replacer=typeof e.replacer=="function"?e.replacer:null,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function Hl(e,t){for(var n=Qr.repeat(" ",t),r=0,i=-1,a="",o,s=e.length;r<s;)i=e.indexOf(`
`,r),i===-1?(o=e.slice(r),r=s):(o=e.slice(r,i+1),r=i+1),o.length&&o!==`
`&&(a+=n),a+=o;return a}function ya(e,t){return`
`+Qr.repeat(" ",e.indent*t)}function l0(e,t){var n,r,i;for(n=0,r=e.implicitTypes.length;n<r;n+=1)if(i=e.implicitTypes[n],i.resolve(t))return!0;return!1}function ei(e){return e===Hg||e===Bg}function Vn(e){return 32<=e&&e<=126||161<=e&&e<=55295&&e!==8232&&e!==8233||57344<=e&&e<=65533&&e!==ma||65536<=e&&e<=1114111}function jl(e){return Vn(e)&&e!==ma&&e!==qg&&e!==jn}function Gl(e,t,n){var r=jl(e),i=r&&!ei(e);return(n?r:r&&e!==Ul&&e!==kl&&e!==Ml&&e!==Bl&&e!==ql)&&e!==ga&&!(t===Zr&&!i)||jl(t)&&!ei(t)&&e===ga||t===Zr&&i}function u0(e){return Vn(e)&&e!==ma&&!ei(e)&&e!==zg&&e!==Qg&&e!==Zr&&e!==Ul&&e!==kl&&e!==Ml&&e!==Bl&&e!==ql&&e!==ga&&e!==Yg&&e!==Xg&&e!==jg&&e!==t0&&e!==Kg&&e!==Jg&&e!==Wg&&e!==Gg&&e!==Vg&&e!==Zg&&e!==e0}function c0(e){return!ei(e)&&e!==Zr}function Yn(e,t){var n=e.charCodeAt(t),r;return n>=55296&&n<=56319&&t+1<e.length&&(r=e.charCodeAt(t+1),r>=56320&&r<=57343)?(n-55296)*1024+r-56320+65536:n}function Vl(e){var t=/^\n* /;return t.test(e)}var Yl=1,Ea=2,Wl=3,Xl=4,an=5;function f0(e,t,n,r,i,a,o,s){var l,p=0,f=null,c=!1,m=!1,g=r!==-1,w=-1,A=u0(Yn(e,0))&&c0(Yn(e,e.length-1));if(t||o)for(l=0;l<e.length;p>=65536?l+=2:l++){if(p=Yn(e,l),!Vn(p))return an;A=A&&Gl(p,f,s),f=p}else{for(l=0;l<e.length;p>=65536?l+=2:l++){if(p=Yn(e,l),p===jn)c=!0,g&&(m=m||l-w-1>r&&e[w+1]!==" ",w=l);else if(!Vn(p))return an;A=A&&Gl(p,f,s),f=p}m=m||g&&l-w-1>r&&e[w+1]!==" "}return!c&&!m?A&&!o&&!i(e)?Yl:a===Gn?an:Ea:n>9&&Vl(e)?an:o?a===Gn?an:Ea:m?Xl:Wl}function d0(e,t,n,r,i){e.dump=function(){if(t.length===0)return e.quotingType===Gn?'""':"''";if(!e.noCompatMode&&(n0.indexOf(t)!==-1||r0.test(t)))return e.quotingType===Gn?'"'+t+'"':"'"+t+"'";var a=e.indent*Math.max(1,n),o=e.lineWidth===-1?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-a),s=r||e.flowLevel>-1&&n>=e.flowLevel;function l(p){return l0(e,p)}switch(f0(t,s,e.indent,o,l,e.quotingType,e.forceQuotes&&!r,i)){case Yl:return t;case Ea:return"'"+t.replace(/'/g,"''")+"'";case Wl:return"|"+zl(t,e.indent)+Kl(Hl(t,a));case Xl:return">"+zl(t,e.indent)+Kl(Hl(h0(t,o),a));case an:return'"'+p0(t)+'"';default:throw new Hn("impossible error: invalid scalar style")}}()}function zl(e,t){var n=Vl(e)?String(t):"",r=e[e.length-1]===`
`,i=r&&(e[e.length-2]===`
`||e===`
`),a=i?"+":r?"":"-";return n+a+`
`}function Kl(e){return e[e.length-1]===`
`?e.slice(0,-1):e}function h0(e,t){for(var n=/(\n+)([^\n]*)/g,r=function(){var p=e.indexOf(`
`);return p=p!==-1?p:e.length,n.lastIndex=p,Jl(e.slice(0,p),t)}(),i=e[0]===`
`||e[0]===" ",a,o;o=n.exec(e);){var s=o[1],l=o[2];a=l[0]===" ",r+=s+(!i&&!a&&l!==""?`
`:"")+Jl(l,t),i=a}return r}function Jl(e,t){if(e===""||e[0]===" ")return e;for(var n=/ [^ ]/g,r,i=0,a,o=0,s=0,l="";r=n.exec(e);)s=r.index,s-i>t&&(a=o>i?o:s,l+=`
`+e.slice(i,a),i=a+1),o=s;return l+=`
`,e.length-i>t&&o>i?l+=e.slice(i,o)+`
`+e.slice(o+1):l+=e.slice(i),l.slice(1)}function p0(e){for(var t="",n=0,r,i=0;i<e.length;n>=65536?i+=2:i++)n=Yn(e,i),r=Te[n],!r&&Vn(n)?(t+=e[i],n>=65536&&(t+=e[i+1])):t+=r||a0(n);return t}function m0(e,t,n){var r="",i=e.tag,a,o,s;for(a=0,o=n.length;a<o;a+=1)s=n[a],e.replacer&&(s=e.replacer.call(n,String(a),s)),(et(e,t,s,!1,!1)||typeof s=="undefined"&&et(e,t,null,!1,!1))&&(r!==""&&(r+=","+(e.condenseFlow?"":" ")),r+=e.dump);e.tag=i,e.dump="["+r+"]"}function Ql(e,t,n,r){var i="",a=e.tag,o,s,l;for(o=0,s=n.length;o<s;o+=1)l=n[o],e.replacer&&(l=e.replacer.call(n,String(o),l)),(et(e,t+1,l,!0,!0,!1,!0)||typeof l=="undefined"&&et(e,t+1,null,!0,!0,!1,!0))&&((!r||i!=="")&&(i+=ya(e,t)),e.dump&&jn===e.dump.charCodeAt(0)?i+="-":i+="- ",i+=e.dump);e.tag=a,e.dump=i||"[]"}function g0(e,t,n){var r="",i=e.tag,a=Object.keys(n),o,s,l,p,f;for(o=0,s=a.length;o<s;o+=1)f="",r!==""&&(f+=", "),e.condenseFlow&&(f+='"'),l=a[o],p=n[l],e.replacer&&(p=e.replacer.call(n,l,p)),!!et(e,t,l,!1,!1)&&(e.dump.length>1024&&(f+="? "),f+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),!!et(e,t,p,!1,!1)&&(f+=e.dump,r+=f));e.tag=i,e.dump="{"+r+"}"}function y0(e,t,n,r){var i="",a=e.tag,o=Object.keys(n),s,l,p,f,c,m;if(e.sortKeys===!0)o.sort();else if(typeof e.sortKeys=="function")o.sort(e.sortKeys);else if(e.sortKeys)throw new Hn("sortKeys must be a boolean or a function");for(s=0,l=o.length;s<l;s+=1)m="",(!r||i!=="")&&(m+=ya(e,t)),p=o[s],f=n[p],e.replacer&&(f=e.replacer.call(n,p,f)),!!et(e,t+1,p,!0,!0,!0)&&(c=e.tag!==null&&e.tag!=="?"||e.dump&&e.dump.length>1024,c&&(e.dump&&jn===e.dump.charCodeAt(0)?m+="?":m+="? "),m+=e.dump,c&&(m+=ya(e,t)),!!et(e,t+1,f,!0,c)&&(e.dump&&jn===e.dump.charCodeAt(0)?m+=":":m+=": ",m+=e.dump,i+=m));e.tag=a,e.dump=i||"{}"}function Zl(e,t,n){var r,i,a,o,s,l;for(i=n?e.explicitTypes:e.implicitTypes,a=0,o=i.length;a<o;a+=1)if(s=i[a],(s.instanceOf||s.predicate)&&(!s.instanceOf||typeof t=="object"&&t instanceof s.instanceOf)&&(!s.predicate||s.predicate(t))){if(n?s.multi&&s.representName?e.tag=s.representName(t):e.tag=s.tag:e.tag="?",s.represent){if(l=e.styleMap[s.tag]||s.defaultStyle,Fl.call(s.represent)==="[object Function]")r=s.represent(t,l);else if(Ll.call(s.represent,l))r=s.represent[l](t,l);else throw new Hn("!<"+s.tag+'> tag resolver accepts not "'+l+'" style');e.dump=r}return!0}return!1}function et(e,t,n,r,i,a,o){e.tag=null,e.dump=n,Zl(e,n,!1)||Zl(e,n,!0);var s=Fl.call(e.dump),l=r,p;r&&(r=e.flowLevel<0||e.flowLevel>t);var f=s==="[object Object]"||s==="[object Array]",c,m;if(f&&(c=e.duplicates.indexOf(n),m=c!==-1),(e.tag!==null&&e.tag!=="?"||m||e.indent!==2&&t>0)&&(i=!1),m&&e.usedDuplicates[c])e.dump="*ref_"+c;else{if(f&&m&&!e.usedDuplicates[c]&&(e.usedDuplicates[c]=!0),s==="[object Object]")r&&Object.keys(e.dump).length!==0?(y0(e,t,e.dump,i),m&&(e.dump="&ref_"+c+e.dump)):(g0(e,t,e.dump),m&&(e.dump="&ref_"+c+" "+e.dump));else if(s==="[object Array]")r&&e.dump.length!==0?(e.noArrayIndent&&!o&&t>0?Ql(e,t-1,e.dump,i):Ql(e,t,e.dump,i),m&&(e.dump="&ref_"+c+e.dump)):(m0(e,t,e.dump),m&&(e.dump="&ref_"+c+" "+e.dump));else if(s==="[object String]")e.tag!=="?"&&d0(e,e.dump,t,a,l);else{if(s==="[object Undefined]")return!1;if(e.skipInvalid)return!1;throw new Hn("unacceptable kind of an object to dump "+s)}e.tag!==null&&e.tag!=="?"&&(p=encodeURI(e.tag[0]==="!"?e.tag.slice(1):e.tag).replace(/!/g,"%21"),e.tag[0]==="!"?p="!"+p:p.slice(0,18)==="tag:yaml.org,2002:"?p="!!"+p.slice(18):p="!<"+p+">",e.dump=p+" "+e.dump)}return!0}function E0(e,t){var n=[],r=[],i,a;for(va(e,n,r),i=0,a=r.length;i<a;i+=1)t.duplicates.push(n[r[i]]);t.usedDuplicates=new Array(a)}function va(e,t,n){var r,i,a;if(e!==null&&typeof e=="object")if(i=t.indexOf(e),i!==-1)n.indexOf(i)===-1&&n.push(i);else if(t.push(e),Array.isArray(e))for(i=0,a=e.length;i<a;i+=1)va(e[i],t,n);else for(r=Object.keys(e),i=0,a=r.length;i<a;i+=1)va(e[r[i]],t,n)}function v0(e,t){t=t||{};var n=new s0(t);n.noRefs||E0(e,n);var r=e;return n.replacer&&(r=n.replacer.call({"":r},"",r)),et(n,0,r,!0,!0)?n.dump+`
`:""}xl.dump=v0;var eu=aa,w0=xl;function wa(e,t){return function(){throw new Error("Function yaml."+e+" is removed in js-yaml 4. Use yaml."+t+" instead, which is now safe by default.")}}ge.Type=Ce;ge.Schema=Zs;ge.FAILSAFE_SCHEMA=rl;ge.JSON_SCHEMA=ul;ge.CORE_SCHEMA=cl;ge.DEFAULT_SCHEMA=fa;ge.load=eu.load;ge.loadAll=eu.loadAll;ge.dump=w0.dump;ge.YAMLException=Mn;ge.types={binary:ml,float:ll,map:nl,null:il,pairs:yl,set:El,timestamp:hl,bool:al,int:ol,merge:pl,omap:gl,seq:tl,str:el};ge.safeLoad=wa("safeLoad","load");ge.safeLoadAll=wa("safeLoadAll","loadAll");ge.safeDump=wa("safeDump","dump");var ti={};Object.defineProperty(ti,"__esModule",{value:!0});ti.Lazy=void 0;class _0{constructor(t){this._value=null,this.creator=t}get hasValue(){return this.creator==null}get value(){if(this.creator==null)return this._value;const t=this.creator();return this.value=t,t}set value(t){this._value=t,this.creator=null}}ti.Lazy=_0;var gt={exports:{}};const T0="2.0.0",A0=256,S0=Number.MAX_SAFE_INTEGER||9007199254740991,$0=16;var ni={SEMVER_SPEC_VERSION:T0,MAX_LENGTH:A0,MAX_SAFE_INTEGER:S0,MAX_SAFE_COMPONENT_LENGTH:$0};const C0=typeof process=="object"&&process.env&&{}.NODE_DEBUG&&/\bsemver\b/i.test({}.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};var ri=C0;(function(e,t){const{MAX_SAFE_COMPONENT_LENGTH:n}=ni,r=ri;t=e.exports={};const i=t.re=[],a=t.src=[],o=t.t={};let s=0;const l=(p,f,c)=>{const m=s++;r(m,f),o[p]=m,a[m]=f,i[m]=new RegExp(f,c?"g":void 0)};l("NUMERICIDENTIFIER","0|[1-9]\\d*"),l("NUMERICIDENTIFIERLOOSE","[0-9]+"),l("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),l("MAINVERSION",`(${a[o.NUMERICIDENTIFIER]})\\.(${a[o.NUMERICIDENTIFIER]})\\.(${a[o.NUMERICIDENTIFIER]})`),l("MAINVERSIONLOOSE",`(${a[o.NUMERICIDENTIFIERLOOSE]})\\.(${a[o.NUMERICIDENTIFIERLOOSE]})\\.(${a[o.NUMERICIDENTIFIERLOOSE]})`),l("PRERELEASEIDENTIFIER",`(?:${a[o.NUMERICIDENTIFIER]}|${a[o.NONNUMERICIDENTIFIER]})`),l("PRERELEASEIDENTIFIERLOOSE",`(?:${a[o.NUMERICIDENTIFIERLOOSE]}|${a[o.NONNUMERICIDENTIFIER]})`),l("PRERELEASE",`(?:-(${a[o.PRERELEASEIDENTIFIER]}(?:\\.${a[o.PRERELEASEIDENTIFIER]})*))`),l("PRERELEASELOOSE",`(?:-?(${a[o.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${a[o.PRERELEASEIDENTIFIERLOOSE]})*))`),l("BUILDIDENTIFIER","[0-9A-Za-z-]+"),l("BUILD",`(?:\\+(${a[o.BUILDIDENTIFIER]}(?:\\.${a[o.BUILDIDENTIFIER]})*))`),l("FULLPLAIN",`v?${a[o.MAINVERSION]}${a[o.PRERELEASE]}?${a[o.BUILD]}?`),l("FULL",`^${a[o.FULLPLAIN]}$`),l("LOOSEPLAIN",`[v=\\s]*${a[o.MAINVERSIONLOOSE]}${a[o.PRERELEASELOOSE]}?${a[o.BUILD]}?`),l("LOOSE",`^${a[o.LOOSEPLAIN]}$`),l("GTLT","((?:<|>)?=?)"),l("XRANGEIDENTIFIERLOOSE",`${a[o.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),l("XRANGEIDENTIFIER",`${a[o.NUMERICIDENTIFIER]}|x|X|\\*`),l("XRANGEPLAIN",`[v=\\s]*(${a[o.XRANGEIDENTIFIER]})(?:\\.(${a[o.XRANGEIDENTIFIER]})(?:\\.(${a[o.XRANGEIDENTIFIER]})(?:${a[o.PRERELEASE]})?${a[o.BUILD]}?)?)?`),l("XRANGEPLAINLOOSE",`[v=\\s]*(${a[o.XRANGEIDENTIFIERLOOSE]})(?:\\.(${a[o.XRANGEIDENTIFIERLOOSE]})(?:\\.(${a[o.XRANGEIDENTIFIERLOOSE]})(?:${a[o.PRERELEASELOOSE]})?${a[o.BUILD]}?)?)?`),l("XRANGE",`^${a[o.GTLT]}\\s*${a[o.XRANGEPLAIN]}$`),l("XRANGELOOSE",`^${a[o.GTLT]}\\s*${a[o.XRANGEPLAINLOOSE]}$`),l("COERCE",`(^|[^\\d])(\\d{1,${n}})(?:\\.(\\d{1,${n}}))?(?:\\.(\\d{1,${n}}))?(?:$|[^\\d])`),l("COERCERTL",a[o.COERCE],!0),l("LONETILDE","(?:~>?)"),l("TILDETRIM",`(\\s*)${a[o.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",l("TILDE",`^${a[o.LONETILDE]}${a[o.XRANGEPLAIN]}$`),l("TILDELOOSE",`^${a[o.LONETILDE]}${a[o.XRANGEPLAINLOOSE]}$`),l("LONECARET","(?:\\^)"),l("CARETTRIM",`(\\s*)${a[o.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",l("CARET",`^${a[o.LONECARET]}${a[o.XRANGEPLAIN]}$`),l("CARETLOOSE",`^${a[o.LONECARET]}${a[o.XRANGEPLAINLOOSE]}$`),l("COMPARATORLOOSE",`^${a[o.GTLT]}\\s*(${a[o.LOOSEPLAIN]})$|^$`),l("COMPARATOR",`^${a[o.GTLT]}\\s*(${a[o.FULLPLAIN]})$|^$`),l("COMPARATORTRIM",`(\\s*)${a[o.GTLT]}\\s*(${a[o.LOOSEPLAIN]}|${a[o.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",l("HYPHENRANGE",`^\\s*(${a[o.XRANGEPLAIN]})\\s+-\\s+(${a[o.XRANGEPLAIN]})\\s*$`),l("HYPHENRANGELOOSE",`^\\s*(${a[o.XRANGEPLAINLOOSE]})\\s+-\\s+(${a[o.XRANGEPLAINLOOSE]})\\s*$`),l("STAR","(<|>)?=?\\s*\\*"),l("GTE0","^\\s*>=\\s*0.0.0\\s*$"),l("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$")})(gt,gt.exports);const b0=["includePrerelease","loose","rtl"],O0=e=>e?typeof e!="object"?{loose:!0}:b0.filter(t=>e[t]).reduce((t,n)=>(t[n]=!0,t),{}):{};var ii=O0;const tu=/^[0-9]+$/,nu=(e,t)=>{const n=tu.test(e),r=tu.test(t);return n&&r&&(e=+e,t=+t),e===t?0:n&&!r?-1:r&&!n?1:e<t?-1:1},I0=(e,t)=>nu(t,e);var _a={compareIdentifiers:nu,rcompareIdentifiers:I0};const ai=ri,{MAX_LENGTH:ru,MAX_SAFE_INTEGER:oi}=ni,{re:iu,t:au}=gt.exports,N0=ii,{compareIdentifiers:Wn}=_a;class je{constructor(t,n){if(n=N0(n),t instanceof je){if(t.loose===!!n.loose&&t.includePrerelease===!!n.includePrerelease)return t;t=t.version}else if(typeof t!="string")throw new TypeError(`Invalid Version: ${t}`);if(t.length>ru)throw new TypeError(`version is longer than ${ru} characters`);ai("SemVer",t,n),this.options=n,this.loose=!!n.loose,this.includePrerelease=!!n.includePrerelease;const r=t.trim().match(n.loose?iu[au.LOOSE]:iu[au.FULL]);if(!r)throw new TypeError(`Invalid Version: ${t}`);if(this.raw=t,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>oi||this.major<0)throw new TypeError("Invalid major version");if(this.minor>oi||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>oi||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map(i=>{if(/^[0-9]+$/.test(i)){const a=+i;if(a>=0&&a<oi)return a}return i}):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(t){if(ai("SemVer.compare",this.version,this.options,t),!(t instanceof je)){if(typeof t=="string"&&t===this.version)return 0;t=new je(t,this.options)}return t.version===this.version?0:this.compareMain(t)||this.comparePre(t)}compareMain(t){return t instanceof je||(t=new je(t,this.options)),Wn(this.major,t.major)||Wn(this.minor,t.minor)||Wn(this.patch,t.patch)}comparePre(t){if(t instanceof je||(t=new je(t,this.options)),this.prerelease.length&&!t.prerelease.length)return-1;if(!this.prerelease.length&&t.prerelease.length)return 1;if(!this.prerelease.length&&!t.prerelease.length)return 0;let n=0;do{const r=this.prerelease[n],i=t.prerelease[n];if(ai("prerelease compare",n,r,i),r===void 0&&i===void 0)return 0;if(i===void 0)return 1;if(r===void 0)return-1;if(r===i)continue;return Wn(r,i)}while(++n)}compareBuild(t){t instanceof je||(t=new je(t,this.options));let n=0;do{const r=this.build[n],i=t.build[n];if(ai("prerelease compare",n,r,i),r===void 0&&i===void 0)return 0;if(i===void 0)return 1;if(r===void 0)return-1;if(r===i)continue;return Wn(r,i)}while(++n)}inc(t,n){switch(t){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",n);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",n);break;case"prepatch":this.prerelease.length=0,this.inc("patch",n),this.inc("pre",n);break;case"prerelease":this.prerelease.length===0&&this.inc("patch",n),this.inc("pre",n);break;case"major":(this.minor!==0||this.patch!==0||this.prerelease.length===0)&&this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":(this.patch!==0||this.prerelease.length===0)&&this.minor++,this.patch=0,this.prerelease=[];break;case"patch":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case"pre":if(this.prerelease.length===0)this.prerelease=[0];else{let r=this.prerelease.length;for(;--r>=0;)typeof this.prerelease[r]=="number"&&(this.prerelease[r]++,r=-2);r===-1&&this.prerelease.push(0)}n&&(this.prerelease[0]===n?isNaN(this.prerelease[1])&&(this.prerelease=[n,0]):this.prerelease=[n,0]);break;default:throw new Error(`invalid increment argument: ${t}`)}return this.format(),this.raw=this.version,this}}var be=je;const{MAX_LENGTH:R0}=ni,{re:ou,t:su}=gt.exports,lu=be,D0=ii,P0=(e,t)=>{if(t=D0(t),e instanceof lu)return e;if(typeof e!="string"||e.length>R0||!(t.loose?ou[su.LOOSE]:ou[su.FULL]).test(e))return null;try{return new lu(e,t)}catch{return null}};var on=P0;const x0=on,F0=(e,t)=>{const n=x0(e,t);return n?n.version:null};var L0=F0;const U0=on,k0=(e,t)=>{const n=U0(e.trim().replace(/^[=v]+/,""),t);return n?n.version:null};var M0=k0;const B0=be,q0=(e,t,n,r)=>{typeof n=="string"&&(r=n,n=void 0);try{return new B0(e,n).inc(t,r).version}catch{return null}};var H0=q0;const uu=be,j0=(e,t,n)=>new uu(e,n).compare(new uu(t,n));var Ge=j0;const G0=Ge,V0=(e,t,n)=>G0(e,t,n)===0;var Ta=V0;const cu=on,Y0=Ta,W0=(e,t)=>{if(Y0(e,t))return null;{const n=cu(e),r=cu(t),i=n.prerelease.length||r.prerelease.length,a=i?"pre":"",o=i?"prerelease":"";for(const s in n)if((s==="major"||s==="minor"||s==="patch")&&n[s]!==r[s])return a+s;return o}};var X0=W0;const z0=be,K0=(e,t)=>new z0(e,t).major;var J0=K0;const Q0=be,Z0=(e,t)=>new Q0(e,t).minor;var ey=Z0;const ty=be,ny=(e,t)=>new ty(e,t).patch;var ry=ny;const iy=on,ay=(e,t)=>{const n=iy(e,t);return n&&n.prerelease.length?n.prerelease:null};var oy=ay;const sy=Ge,ly=(e,t,n)=>sy(t,e,n);var uy=ly;const cy=Ge,fy=(e,t)=>cy(e,t,!0);var dy=fy;const fu=be,hy=(e,t,n)=>{const r=new fu(e,n),i=new fu(t,n);return r.compare(i)||r.compareBuild(i)};var Aa=hy;const py=Aa,my=(e,t)=>e.sort((n,r)=>py(n,r,t));var gy=my;const yy=Aa,Ey=(e,t)=>e.sort((n,r)=>yy(r,n,t));var vy=Ey;const wy=Ge,_y=(e,t,n)=>wy(e,t,n)>0;var si=_y;const Ty=Ge,Ay=(e,t,n)=>Ty(e,t,n)<0;var Sa=Ay;const Sy=Ge,$y=(e,t,n)=>Sy(e,t,n)!==0;var du=$y;const Cy=Ge,by=(e,t,n)=>Cy(e,t,n)>=0;var $a=by;const Oy=Ge,Iy=(e,t,n)=>Oy(e,t,n)<=0;var Ca=Iy;const Ny=Ta,Ry=du,Dy=si,Py=$a,xy=Sa,Fy=Ca,Ly=(e,t,n,r)=>{switch(t){case"===":return typeof e=="object"&&(e=e.version),typeof n=="object"&&(n=n.version),e===n;case"!==":return typeof e=="object"&&(e=e.version),typeof n=="object"&&(n=n.version),e!==n;case"":case"=":case"==":return Ny(e,n,r);case"!=":return Ry(e,n,r);case">":return Dy(e,n,r);case">=":return Py(e,n,r);case"<":return xy(e,n,r);case"<=":return Fy(e,n,r);default:throw new TypeError(`Invalid operator: ${t}`)}};var hu=Ly;const Uy=be,ky=on,{re:li,t:ui}=gt.exports,My=(e,t)=>{if(e instanceof Uy)return e;if(typeof e=="number"&&(e=String(e)),typeof e!="string")return null;t=t||{};let n=null;if(!t.rtl)n=e.match(li[ui.COERCE]);else{let r;for(;(r=li[ui.COERCERTL].exec(e))&&(!n||n.index+n[0].length!==e.length);)(!n||r.index+r[0].length!==n.index+n[0].length)&&(n=r),li[ui.COERCERTL].lastIndex=r.index+r[1].length+r[2].length;li[ui.COERCERTL].lastIndex=-1}return n===null?null:ky(`${n[2]}.${n[3]||"0"}.${n[4]||"0"}`,t)};var By=My,qy=k;k.Node=Ft;k.create=k;function k(e){var t=this;if(t instanceof k||(t=new k),t.tail=null,t.head=null,t.length=0,e&&typeof e.forEach=="function")e.forEach(function(i){t.push(i)});else if(arguments.length>0)for(var n=0,r=arguments.length;n<r;n++)t.push(arguments[n]);return t}k.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var t=e.next,n=e.prev;return t&&(t.prev=n),n&&(n.next=t),e===this.head&&(this.head=t),e===this.tail&&(this.tail=n),e.list.length--,e.next=null,e.prev=null,e.list=null,t};k.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var t=this.head;e.list=this,e.next=t,t&&(t.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}};k.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var t=this.tail;e.list=this,e.prev=t,t&&(t.next=e),this.tail=e,this.head||(this.head=e),this.length++}};k.prototype.push=function(){for(var e=0,t=arguments.length;e<t;e++)jy(this,arguments[e]);return this.length};k.prototype.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)Gy(this,arguments[e]);return this.length};k.prototype.pop=function(){if(!!this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}};k.prototype.shift=function(){if(!!this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}};k.prototype.forEach=function(e,t){t=t||this;for(var n=this.head,r=0;n!==null;r++)e.call(t,n.value,r,this),n=n.next};k.prototype.forEachReverse=function(e,t){t=t||this;for(var n=this.tail,r=this.length-1;n!==null;r--)e.call(t,n.value,r,this),n=n.prev};k.prototype.get=function(e){for(var t=0,n=this.head;n!==null&&t<e;t++)n=n.next;if(t===e&&n!==null)return n.value};k.prototype.getReverse=function(e){for(var t=0,n=this.tail;n!==null&&t<e;t++)n=n.prev;if(t===e&&n!==null)return n.value};k.prototype.map=function(e,t){t=t||this;for(var n=new k,r=this.head;r!==null;)n.push(e.call(t,r.value,this)),r=r.next;return n};k.prototype.mapReverse=function(e,t){t=t||this;for(var n=new k,r=this.tail;r!==null;)n.push(e.call(t,r.value,this)),r=r.prev;return n};k.prototype.reduce=function(e,t){var n,r=this.head;if(arguments.length>1)n=t;else if(this.head)r=this.head.next,n=this.head.value;else throw new TypeError("Reduce of empty list with no initial value");for(var i=0;r!==null;i++)n=e(n,r.value,i),r=r.next;return n};k.prototype.reduceReverse=function(e,t){var n,r=this.tail;if(arguments.length>1)n=t;else if(this.tail)r=this.tail.prev,n=this.tail.value;else throw new TypeError("Reduce of empty list with no initial value");for(var i=this.length-1;r!==null;i--)n=e(n,r.value,i),r=r.prev;return n};k.prototype.toArray=function(){for(var e=new Array(this.length),t=0,n=this.head;n!==null;t++)e[t]=n.value,n=n.next;return e};k.prototype.toArrayReverse=function(){for(var e=new Array(this.length),t=0,n=this.tail;n!==null;t++)e[t]=n.value,n=n.prev;return e};k.prototype.slice=function(e,t){t=t||this.length,t<0&&(t+=this.length),e=e||0,e<0&&(e+=this.length);var n=new k;if(t<e||t<0)return n;e<0&&(e=0),t>this.length&&(t=this.length);for(var r=0,i=this.head;i!==null&&r<e;r++)i=i.next;for(;i!==null&&r<t;r++,i=i.next)n.push(i.value);return n};k.prototype.sliceReverse=function(e,t){t=t||this.length,t<0&&(t+=this.length),e=e||0,e<0&&(e+=this.length);var n=new k;if(t<e||t<0)return n;e<0&&(e=0),t>this.length&&(t=this.length);for(var r=this.length,i=this.tail;i!==null&&r>t;r--)i=i.prev;for(;i!==null&&r>e;r--,i=i.prev)n.push(i.value);return n};k.prototype.splice=function(e,t,...n){e>this.length&&(e=this.length-1),e<0&&(e=this.length+e);for(var r=0,i=this.head;i!==null&&r<e;r++)i=i.next;for(var a=[],r=0;i&&r<t;r++)a.push(i.value),i=this.removeNode(i);i===null&&(i=this.tail),i!==this.head&&i!==this.tail&&(i=i.prev);for(var r=0;r<n.length;r++)i=Hy(this,i,n[r]);return a};k.prototype.reverse=function(){for(var e=this.head,t=this.tail,n=e;n!==null;n=n.prev){var r=n.prev;n.prev=n.next,n.next=r}return this.head=t,this.tail=e,this};function Hy(e,t,n){var r=t===e.head?new Ft(n,null,t,e):new Ft(n,t,t.next,e);return r.next===null&&(e.tail=r),r.prev===null&&(e.head=r),e.length++,r}function jy(e,t){e.tail=new Ft(t,e.tail,null,e),e.head||(e.head=e.tail),e.length++}function Gy(e,t){e.head=new Ft(t,null,e.head,e),e.tail||(e.tail=e.head),e.length++}function Ft(e,t,n,r){if(!(this instanceof Ft))return new Ft(e,t,n,r);this.list=r,this.value=e,t?(t.next=this,this.prev=t):this.prev=null,n?(n.prev=this,this.next=n):this.next=null}try{require("./iterator.js")(k)}catch{}const Vy=qy,Lt=Symbol("max"),tt=Symbol("length"),sn=Symbol("lengthCalculator"),Xn=Symbol("allowStale"),Ut=Symbol("maxAge"),nt=Symbol("dispose"),pu=Symbol("noDisposeOnSet"),de=Symbol("lruList"),Ve=Symbol("cache"),mu=Symbol("updateAgeOnGet"),ba=()=>1;class Yy{constructor(t){if(typeof t=="number"&&(t={max:t}),t||(t={}),t.max&&(typeof t.max!="number"||t.max<0))throw new TypeError("max must be a non-negative number");this[Lt]=t.max||1/0;const n=t.length||ba;if(this[sn]=typeof n!="function"?ba:n,this[Xn]=t.stale||!1,t.maxAge&&typeof t.maxAge!="number")throw new TypeError("maxAge must be a number");this[Ut]=t.maxAge||0,this[nt]=t.dispose,this[pu]=t.noDisposeOnSet||!1,this[mu]=t.updateAgeOnGet||!1,this.reset()}set max(t){if(typeof t!="number"||t<0)throw new TypeError("max must be a non-negative number");this[Lt]=t||1/0,zn(this)}get max(){return this[Lt]}set allowStale(t){this[Xn]=!!t}get allowStale(){return this[Xn]}set maxAge(t){if(typeof t!="number")throw new TypeError("maxAge must be a non-negative number");this[Ut]=t,zn(this)}get maxAge(){return this[Ut]}set lengthCalculator(t){typeof t!="function"&&(t=ba),t!==this[sn]&&(this[sn]=t,this[tt]=0,this[de].forEach(n=>{n.length=this[sn](n.value,n.key),this[tt]+=n.length})),zn(this)}get lengthCalculator(){return this[sn]}get length(){return this[tt]}get itemCount(){return this[de].length}rforEach(t,n){n=n||this;for(let r=this[de].tail;r!==null;){const i=r.prev;gu(this,t,r,n),r=i}}forEach(t,n){n=n||this;for(let r=this[de].head;r!==null;){const i=r.next;gu(this,t,r,n),r=i}}keys(){return this[de].toArray().map(t=>t.key)}values(){return this[de].toArray().map(t=>t.value)}reset(){this[nt]&&this[de]&&this[de].length&&this[de].forEach(t=>this[nt](t.key,t.value)),this[Ve]=new Map,this[de]=new Vy,this[tt]=0}dump(){return this[de].map(t=>ci(this,t)?!1:{k:t.key,v:t.value,e:t.now+(t.maxAge||0)}).toArray().filter(t=>t)}dumpLru(){return this[de]}set(t,n,r){if(r=r||this[Ut],r&&typeof r!="number")throw new TypeError("maxAge must be a number");const i=r?Date.now():0,a=this[sn](n,t);if(this[Ve].has(t)){if(a>this[Lt])return ln(this,this[Ve].get(t)),!1;const l=this[Ve].get(t).value;return this[nt]&&(this[pu]||this[nt](t,l.value)),l.now=i,l.maxAge=r,l.value=n,this[tt]+=a-l.length,l.length=a,this.get(t),zn(this),!0}const o=new Wy(t,n,a,i,r);return o.length>this[Lt]?(this[nt]&&this[nt](t,n),!1):(this[tt]+=o.length,this[de].unshift(o),this[Ve].set(t,this[de].head),zn(this),!0)}has(t){if(!this[Ve].has(t))return!1;const n=this[Ve].get(t).value;return!ci(this,n)}get(t){return Oa(this,t,!0)}peek(t){return Oa(this,t,!1)}pop(){const t=this[de].tail;return t?(ln(this,t),t.value):null}del(t){ln(this,this[Ve].get(t))}load(t){this.reset();const n=Date.now();for(let r=t.length-1;r>=0;r--){const i=t[r],a=i.e||0;if(a===0)this.set(i.k,i.v);else{const o=a-n;o>0&&this.set(i.k,i.v,o)}}}prune(){this[Ve].forEach((t,n)=>Oa(this,n,!1))}}const Oa=(e,t,n)=>{const r=e[Ve].get(t);if(r){const i=r.value;if(ci(e,i)){if(ln(e,r),!e[Xn])return}else n&&(e[mu]&&(r.value.now=Date.now()),e[de].unshiftNode(r));return i.value}},ci=(e,t)=>{if(!t||!t.maxAge&&!e[Ut])return!1;const n=Date.now()-t.now;return t.maxAge?n>t.maxAge:e[Ut]&&n>e[Ut]},zn=e=>{if(e[tt]>e[Lt])for(let t=e[de].tail;e[tt]>e[Lt]&&t!==null;){const n=t.prev;ln(e,t),t=n}},ln=(e,t)=>{if(t){const n=t.value;e[nt]&&e[nt](n.key,n.value),e[tt]-=n.length,e[Ve].delete(n.key),e[de].removeNode(t)}};class Wy{constructor(t,n,r,i,a){this.key=t,this.value=n,this.length=r,this.now=i,this.maxAge=a||0}}const gu=(e,t,n,r)=>{let i=n.value;ci(e,i)&&(ln(e,n),e[Xn]||(i=void 0)),i&&t.call(r,i.value,i.key,e)};var Xy=Yy;class Kn{constructor(t,n){if(n=Ky(n),t instanceof Kn)return t.loose===!!n.loose&&t.includePrerelease===!!n.includePrerelease?t:new Kn(t.raw,n);if(t instanceof Ia)return this.raw=t.value,this.set=[[t]],this.format(),this;if(this.options=n,this.loose=!!n.loose,this.includePrerelease=!!n.includePrerelease,this.raw=t,this.set=t.split(/\s*\|\|\s*/).map(r=>this.parseRange(r.trim())).filter(r=>r.length),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${t}`);if(this.set.length>1){const r=this.set[0];if(this.set=this.set.filter(i=>!Eu(i[0])),this.set.length===0)this.set=[r];else if(this.set.length>1){for(const i of this.set)if(i.length===1&&tE(i[0])){this.set=[i];break}}}this.format()}format(){return this.range=this.set.map(t=>t.join(" ").trim()).join("||").trim(),this.range}toString(){return this.range}parseRange(t){t=t.trim();const r=`parseRange:${Object.keys(this.options).join(",")}:${t}`,i=yu.get(r);if(i)return i;const a=this.options.loose,o=a?Ae[ye.HYPHENRANGELOOSE]:Ae[ye.HYPHENRANGE];t=t.replace(o,fE(this.options.includePrerelease)),ie("hyphen replace",t),t=t.replace(Ae[ye.COMPARATORTRIM],Qy),ie("comparator trim",t,Ae[ye.COMPARATORTRIM]),t=t.replace(Ae[ye.TILDETRIM],Zy),t=t.replace(Ae[ye.CARETTRIM],eE),t=t.split(/\s+/).join(" ");const s=a?Ae[ye.COMPARATORLOOSE]:Ae[ye.COMPARATOR],l=t.split(" ").map(c=>nE(c,this.options)).join(" ").split(/\s+/).map(c=>cE(c,this.options)).filter(this.options.loose?c=>!!c.match(s):()=>!0).map(c=>new Ia(c,this.options));l.length;const p=new Map;for(const c of l){if(Eu(c))return[c];p.set(c.value,c)}p.size>1&&p.has("")&&p.delete("");const f=[...p.values()];return yu.set(r,f),f}intersects(t,n){if(!(t instanceof Kn))throw new TypeError("a Range is required");return this.set.some(r=>vu(r,n)&&t.set.some(i=>vu(i,n)&&r.every(a=>i.every(o=>a.intersects(o,n)))))}test(t){if(!t)return!1;if(typeof t=="string")try{t=new Jy(t,this.options)}catch{return!1}for(let n=0;n<this.set.length;n++)if(dE(this.set[n],t,this.options))return!0;return!1}}var Ye=Kn;const zy=Xy,yu=new zy({max:1e3}),Ky=ii,Ia=di,ie=ri,Jy=be,{re:Ae,t:ye,comparatorTrimReplace:Qy,tildeTrimReplace:Zy,caretTrimReplace:eE}=gt.exports,Eu=e=>e.value==="<0.0.0-0",tE=e=>e.value==="",vu=(e,t)=>{let n=!0;const r=e.slice();let i=r.pop();for(;n&&r.length;)n=r.every(a=>i.intersects(a,t)),i=r.pop();return n},nE=(e,t)=>(ie("comp",e,t),e=aE(e,t),ie("caret",e),e=rE(e,t),ie("tildes",e),e=sE(e,t),ie("xrange",e),e=uE(e,t),ie("stars",e),e),Oe=e=>!e||e.toLowerCase()==="x"||e==="*",rE=(e,t)=>e.trim().split(/\s+/).map(n=>iE(n,t)).join(" "),iE=(e,t)=>{const n=t.loose?Ae[ye.TILDELOOSE]:Ae[ye.TILDE];return e.replace(n,(r,i,a,o,s)=>{ie("tilde",e,r,i,a,o,s);let l;return Oe(i)?l="":Oe(a)?l=`>=${i}.0.0 <${+i+1}.0.0-0`:Oe(o)?l=`>=${i}.${a}.0 <${i}.${+a+1}.0-0`:s?(ie("replaceTilde pr",s),l=`>=${i}.${a}.${o}-${s} <${i}.${+a+1}.0-0`):l=`>=${i}.${a}.${o} <${i}.${+a+1}.0-0`,ie("tilde return",l),l})},aE=(e,t)=>e.trim().split(/\s+/).map(n=>oE(n,t)).join(" "),oE=(e,t)=>{ie("caret",e,t);const n=t.loose?Ae[ye.CARETLOOSE]:Ae[ye.CARET],r=t.includePrerelease?"-0":"";return e.replace(n,(i,a,o,s,l)=>{ie("caret",e,i,a,o,s,l);let p;return Oe(a)?p="":Oe(o)?p=`>=${a}.0.0${r} <${+a+1}.0.0-0`:Oe(s)?a==="0"?p=`>=${a}.${o}.0${r} <${a}.${+o+1}.0-0`:p=`>=${a}.${o}.0${r} <${+a+1}.0.0-0`:l?(ie("replaceCaret pr",l),a==="0"?o==="0"?p=`>=${a}.${o}.${s}-${l} <${a}.${o}.${+s+1}-0`:p=`>=${a}.${o}.${s}-${l} <${a}.${+o+1}.0-0`:p=`>=${a}.${o}.${s}-${l} <${+a+1}.0.0-0`):(ie("no pr"),a==="0"?o==="0"?p=`>=${a}.${o}.${s}${r} <${a}.${o}.${+s+1}-0`:p=`>=${a}.${o}.${s}${r} <${a}.${+o+1}.0-0`:p=`>=${a}.${o}.${s} <${+a+1}.0.0-0`),ie("caret return",p),p})},sE=(e,t)=>(ie("replaceXRanges",e,t),e.split(/\s+/).map(n=>lE(n,t)).join(" ")),lE=(e,t)=>{e=e.trim();const n=t.loose?Ae[ye.XRANGELOOSE]:Ae[ye.XRANGE];return e.replace(n,(r,i,a,o,s,l)=>{ie("xRange",e,r,i,a,o,s,l);const p=Oe(a),f=p||Oe(o),c=f||Oe(s),m=c;return i==="="&&m&&(i=""),l=t.includePrerelease?"-0":"",p?i===">"||i==="<"?r="<0.0.0-0":r="*":i&&m?(f&&(o=0),s=0,i===">"?(i=">=",f?(a=+a+1,o=0,s=0):(o=+o+1,s=0)):i==="<="&&(i="<",f?a=+a+1:o=+o+1),i==="<"&&(l="-0"),r=`${i+a}.${o}.${s}${l}`):f?r=`>=${a}.0.0${l} <${+a+1}.0.0-0`:c&&(r=`>=${a}.${o}.0${l} <${a}.${+o+1}.0-0`),ie("xRange return",r),r})},uE=(e,t)=>(ie("replaceStars",e,t),e.trim().replace(Ae[ye.STAR],"")),cE=(e,t)=>(ie("replaceGTE0",e,t),e.trim().replace(Ae[t.includePrerelease?ye.GTE0PRE:ye.GTE0],"")),fE=e=>(t,n,r,i,a,o,s,l,p,f,c,m,g)=>(Oe(r)?n="":Oe(i)?n=`>=${r}.0.0${e?"-0":""}`:Oe(a)?n=`>=${r}.${i}.0${e?"-0":""}`:o?n=`>=${n}`:n=`>=${n}${e?"-0":""}`,Oe(p)?l="":Oe(f)?l=`<${+p+1}.0.0-0`:Oe(c)?l=`<${p}.${+f+1}.0-0`:m?l=`<=${p}.${f}.${c}-${m}`:e?l=`<${p}.${f}.${+c+1}-0`:l=`<=${l}`,`${n} ${l}`.trim()),dE=(e,t,n)=>{for(let r=0;r<e.length;r++)if(!e[r].test(t))return!1;if(t.prerelease.length&&!n.includePrerelease){for(let r=0;r<e.length;r++)if(ie(e[r].semver),e[r].semver!==Ia.ANY&&e[r].semver.prerelease.length>0){const i=e[r].semver;if(i.major===t.major&&i.minor===t.minor&&i.patch===t.patch)return!0}return!1}return!0},Jn=Symbol("SemVer ANY");class fi{static get ANY(){return Jn}constructor(t,n){if(n=hE(n),t instanceof fi){if(t.loose===!!n.loose)return t;t=t.value}Ra("comparator",t,n),this.options=n,this.loose=!!n.loose,this.parse(t),this.semver===Jn?this.value="":this.value=this.operator+this.semver.version,Ra("comp",this)}parse(t){const n=this.options.loose?wu[_u.COMPARATORLOOSE]:wu[_u.COMPARATOR],r=t.match(n);if(!r)throw new TypeError(`Invalid comparator: ${t}`);this.operator=r[1]!==void 0?r[1]:"",this.operator==="="&&(this.operator=""),r[2]?this.semver=new Tu(r[2],this.options.loose):this.semver=Jn}toString(){return this.value}test(t){if(Ra("Comparator.test",t,this.options.loose),this.semver===Jn||t===Jn)return!0;if(typeof t=="string")try{t=new Tu(t,this.options)}catch{return!1}return Na(t,this.operator,this.semver,this.options)}intersects(t,n){if(!(t instanceof fi))throw new TypeError("a Comparator is required");if((!n||typeof n!="object")&&(n={loose:!!n,includePrerelease:!1}),this.operator==="")return this.value===""?!0:new Au(t.value,n).test(this.value);if(t.operator==="")return t.value===""?!0:new Au(this.value,n).test(t.semver);const r=(this.operator===">="||this.operator===">")&&(t.operator===">="||t.operator===">"),i=(this.operator==="<="||this.operator==="<")&&(t.operator==="<="||t.operator==="<"),a=this.semver.version===t.semver.version,o=(this.operator===">="||this.operator==="<=")&&(t.operator===">="||t.operator==="<="),s=Na(this.semver,"<",t.semver,n)&&(this.operator===">="||this.operator===">")&&(t.operator==="<="||t.operator==="<"),l=Na(this.semver,">",t.semver,n)&&(this.operator==="<="||this.operator==="<")&&(t.operator===">="||t.operator===">");return r||i||a&&o||s||l}}var di=fi;const hE=ii,{re:wu,t:_u}=gt.exports,Na=hu,Ra=ri,Tu=be,Au=Ye,pE=Ye,mE=(e,t,n)=>{try{t=new pE(t,n)}catch{return!1}return t.test(e)};var hi=mE;const gE=Ye,yE=(e,t)=>new gE(e,t).set.map(n=>n.map(r=>r.value).join(" ").trim().split(" "));var EE=yE;const vE=be,wE=Ye,_E=(e,t,n)=>{let r=null,i=null,a=null;try{a=new wE(t,n)}catch{return null}return e.forEach(o=>{a.test(o)&&(!r||i.compare(o)===-1)&&(r=o,i=new vE(r,n))}),r};var TE=_E;const AE=be,SE=Ye,$E=(e,t,n)=>{let r=null,i=null,a=null;try{a=new SE(t,n)}catch{return null}return e.forEach(o=>{a.test(o)&&(!r||i.compare(o)===1)&&(r=o,i=new AE(r,n))}),r};var CE=$E;const Da=be,bE=Ye,Su=si,OE=(e,t)=>{e=new bE(e,t);let n=new Da("0.0.0");if(e.test(n)||(n=new Da("0.0.0-0"),e.test(n)))return n;n=null;for(let r=0;r<e.set.length;++r){const i=e.set[r];let a=null;i.forEach(o=>{const s=new Da(o.semver.version);switch(o.operator){case">":s.prerelease.length===0?s.patch++:s.prerelease.push(0),s.raw=s.format();case"":case">=":(!a||Su(s,a))&&(a=s);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${o.operator}`)}}),a&&(!n||Su(n,a))&&(n=a)}return n&&e.test(n)?n:null};var IE=OE;const NE=Ye,RE=(e,t)=>{try{return new NE(e,t).range||"*"}catch{return null}};var DE=RE;const PE=be,$u=di,{ANY:xE}=$u,FE=Ye,LE=hi,Cu=si,bu=Sa,UE=Ca,kE=$a,ME=(e,t,n,r)=>{e=new PE(e,r),t=new FE(t,r);let i,a,o,s,l;switch(n){case">":i=Cu,a=UE,o=bu,s=">",l=">=";break;case"<":i=bu,a=kE,o=Cu,s="<",l="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(LE(e,t,r))return!1;for(let p=0;p<t.set.length;++p){const f=t.set[p];let c=null,m=null;if(f.forEach(g=>{g.semver===xE&&(g=new $u(">=0.0.0")),c=c||g,m=m||g,i(g.semver,c.semver,r)?c=g:o(g.semver,m.semver,r)&&(m=g)}),c.operator===s||c.operator===l||(!m.operator||m.operator===s)&&a(e,m.semver))return!1;if(m.operator===l&&o(e,m.semver))return!1}return!0};var Pa=ME;const BE=Pa,qE=(e,t,n)=>BE(e,t,">",n);var HE=qE;const jE=Pa,GE=(e,t,n)=>jE(e,t,"<",n);var VE=GE;const Ou=Ye,YE=(e,t,n)=>(e=new Ou(e,n),t=new Ou(t,n),e.intersects(t));var WE=YE;const XE=hi,zE=Ge;var KE=(e,t,n)=>{const r=[];let i=null,a=null;const o=e.sort((f,c)=>zE(f,c,n));for(const f of o)XE(f,t,n)?(a=f,i||(i=f)):(a&&r.push([i,a]),a=null,i=null);i&&r.push([i,null]);const s=[];for(const[f,c]of r)f===c?s.push(f):!c&&f===o[0]?s.push("*"):c?f===o[0]?s.push(`<=${c}`):s.push(`${f} - ${c}`):s.push(`>=${f}`);const l=s.join(" || "),p=typeof t.raw=="string"?t.raw:String(t);return l.length<p.length?l:t};const Iu=Ye,pi=di,{ANY:xa}=pi,Qn=hi,Fa=Ge,JE=(e,t,n={})=>{if(e===t)return!0;e=new Iu(e,n),t=new Iu(t,n);let r=!1;e:for(const i of e.set){for(const a of t.set){const o=QE(i,a,n);if(r=r||o!==null,o)continue e}if(r)return!1}return!0},QE=(e,t,n)=>{if(e===t)return!0;if(e.length===1&&e[0].semver===xa){if(t.length===1&&t[0].semver===xa)return!0;n.includePrerelease?e=[new pi(">=0.0.0-0")]:e=[new pi(">=0.0.0")]}if(t.length===1&&t[0].semver===xa){if(n.includePrerelease)return!0;t=[new pi(">=0.0.0")]}const r=new Set;let i,a;for(const g of e)g.operator===">"||g.operator===">="?i=Nu(i,g,n):g.operator==="<"||g.operator==="<="?a=Ru(a,g,n):r.add(g.semver);if(r.size>1)return null;let o;if(i&&a){if(o=Fa(i.semver,a.semver,n),o>0)return null;if(o===0&&(i.operator!==">="||a.operator!=="<="))return null}for(const g of r){if(i&&!Qn(g,String(i),n)||a&&!Qn(g,String(a),n))return null;for(const w of t)if(!Qn(g,String(w),n))return!1;return!0}let s,l,p,f,c=a&&!n.includePrerelease&&a.semver.prerelease.length?a.semver:!1,m=i&&!n.includePrerelease&&i.semver.prerelease.length?i.semver:!1;c&&c.prerelease.length===1&&a.operator==="<"&&c.prerelease[0]===0&&(c=!1);for(const g of t){if(f=f||g.operator===">"||g.operator===">=",p=p||g.operator==="<"||g.operator==="<=",i){if(m&&g.semver.prerelease&&g.semver.prerelease.length&&g.semver.major===m.major&&g.semver.minor===m.minor&&g.semver.patch===m.patch&&(m=!1),g.operator===">"||g.operator===">="){if(s=Nu(i,g,n),s===g&&s!==i)return!1}else if(i.operator===">="&&!Qn(i.semver,String(g),n))return!1}if(a){if(c&&g.semver.prerelease&&g.semver.prerelease.length&&g.semver.major===c.major&&g.semver.minor===c.minor&&g.semver.patch===c.patch&&(c=!1),g.operator==="<"||g.operator==="<="){if(l=Ru(a,g,n),l===g&&l!==a)return!1}else if(a.operator==="<="&&!Qn(a.semver,String(g),n))return!1}if(!g.operator&&(a||i)&&o!==0)return!1}return!(i&&p&&!a&&o!==0||a&&f&&!i&&o!==0||m||c)},Nu=(e,t,n)=>{if(!e)return t;const r=Fa(e.semver,t.semver,n);return r>0?e:r<0||t.operator===">"&&e.operator===">="?t:e},Ru=(e,t,n)=>{if(!e)return t;const r=Fa(e.semver,t.semver,n);return r<0?e:r>0||t.operator==="<"&&e.operator==="<="?t:e};var ZE=JE;const La=gt.exports;var Du={re:La.re,src:La.src,tokens:La.t,SEMVER_SPEC_VERSION:ni.SEMVER_SPEC_VERSION,SemVer:be,compareIdentifiers:_a.compareIdentifiers,rcompareIdentifiers:_a.rcompareIdentifiers,parse:on,valid:L0,clean:M0,inc:H0,diff:X0,major:J0,minor:ey,patch:ry,prerelease:oy,compare:Ge,rcompare:uy,compareLoose:dy,compareBuild:Aa,sort:gy,rsort:vy,gt:si,lt:Sa,eq:Ta,neq:du,gte:$a,lte:Ca,cmp:hu,coerce:By,Comparator:di,Range:Ye,satisfies:hi,toComparators:EE,maxSatisfying:TE,minSatisfying:CE,minVersion:IE,validRange:DE,outside:Pa,gtr:HE,ltr:VE,intersects:WE,simplifyRange:KE,subset:ZE},un={},Ua={exports:{}};(function(e,t){var n=200,r="__lodash_hash_undefined__",i=1,a=2,o=9007199254740991,s="[object Arguments]",l="[object Array]",p="[object AsyncFunction]",f="[object Boolean]",c="[object Date]",m="[object Error]",g="[object Function]",w="[object GeneratorFunction]",A="[object Map]",S="[object Number]",C="[object Null]",$="[object Object]",Q="[object Promise]",D="[object Proxy]",le="[object RegExp]",j="[object Set]",M="[object String]",O="[object Symbol]",y="[object Undefined]",x="[object WeakMap]",G="[object ArrayBuffer]",N="[object DataView]",V="[object Float32Array]",W="[object Float64Array]",Z="[object Int8Array]",B="[object Int16Array]",R="[object Int32Array]",X="[object Uint8Array]",Bt="[object Uint8ClampedArray]",En="[object Uint16Array]",Ke="[object Uint32Array]",vn=/[\\^$.*+?()[\]{}|]/g,Ri=/^\[object .+?Constructor\]$/,cr=/^(?:0|[1-9]\d*)$/,q={};q[V]=q[W]=q[Z]=q[B]=q[R]=q[X]=q[Bt]=q[En]=q[Ke]=!0,q[s]=q[l]=q[G]=q[f]=q[N]=q[c]=q[m]=q[g]=q[A]=q[S]=q[$]=q[le]=q[j]=q[M]=q[x]=!1;var fr=typeof Be=="object"&&Be&&Be.Object===Object&&Be,d=typeof self=="object"&&self&&self.Object===Object&&self,u=fr||d||Function("return this")(),_=t&&!t.nodeType&&t,v=_&&!0&&e&&!e.nodeType&&e,U=v&&v.exports===_,z=U&&fr.process,ne=function(){try{return z&&z.binding&&z.binding("util")}catch{}}(),he=ne&&ne.isTypedArray;function Fe(h,E){for(var T=-1,b=h==null?0:h.length,Y=0,P=[];++T<b;){var ee=h[T];E(ee,T,h)&&(P[Y++]=ee)}return P}function at(h,E){for(var T=-1,b=E.length,Y=h.length;++T<b;)h[Y+T]=E[T];return h}function ue(h,E){for(var T=-1,b=h==null?0:h.length;++T<b;)if(E(h[T],T,h))return!0;return!1}function ke(h,E){for(var T=-1,b=Array(h);++T<h;)b[T]=E(T);return b}function Di(h){return function(E){return h(E)}}function dr(h,E){return h.has(E)}function wn(h,E){return h==null?void 0:h[E]}function hr(h){var E=-1,T=Array(h.size);return h.forEach(function(b,Y){T[++E]=[Y,b]}),T}function _c(h,E){return function(T){return h(E(T))}}function Tc(h){var E=-1,T=Array(h.size);return h.forEach(function(b){T[++E]=b}),T}var Ac=Array.prototype,Sc=Function.prototype,pr=Object.prototype,Pi=u["__core-js_shared__"],io=Sc.toString,We=pr.hasOwnProperty,ao=function(){var h=/[^.]+$/.exec(Pi&&Pi.keys&&Pi.keys.IE_PROTO||"");return h?"Symbol(src)_1."+h:""}(),oo=pr.toString,$c=RegExp("^"+io.call(We).replace(vn,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),so=U?u.Buffer:void 0,mr=u.Symbol,lo=u.Uint8Array,uo=pr.propertyIsEnumerable,Cc=Ac.splice,vt=mr?mr.toStringTag:void 0,co=Object.getOwnPropertySymbols,bc=so?so.isBuffer:void 0,Oc=_c(Object.keys,Object),xi=qt(u,"DataView"),_n=qt(u,"Map"),Fi=qt(u,"Promise"),Li=qt(u,"Set"),Ui=qt(u,"WeakMap"),Tn=qt(Object,"create"),Ic=Tt(xi),Nc=Tt(_n),Rc=Tt(Fi),Dc=Tt(Li),Pc=Tt(Ui),fo=mr?mr.prototype:void 0,ki=fo?fo.valueOf:void 0;function wt(h){var E=-1,T=h==null?0:h.length;for(this.clear();++E<T;){var b=h[E];this.set(b[0],b[1])}}function xc(){this.__data__=Tn?Tn(null):{},this.size=0}function Fc(h){var E=this.has(h)&&delete this.__data__[h];return this.size-=E?1:0,E}function Lc(h){var E=this.__data__;if(Tn){var T=E[h];return T===r?void 0:T}return We.call(E,h)?E[h]:void 0}function Uc(h){var E=this.__data__;return Tn?E[h]!==void 0:We.call(E,h)}function kc(h,E){var T=this.__data__;return this.size+=this.has(h)?0:1,T[h]=Tn&&E===void 0?r:E,this}wt.prototype.clear=xc,wt.prototype.delete=Fc,wt.prototype.get=Lc,wt.prototype.has=Uc,wt.prototype.set=kc;function Je(h){var E=-1,T=h==null?0:h.length;for(this.clear();++E<T;){var b=h[E];this.set(b[0],b[1])}}function Mc(){this.__data__=[],this.size=0}function Bc(h){var E=this.__data__,T=yr(E,h);if(T<0)return!1;var b=E.length-1;return T==b?E.pop():Cc.call(E,T,1),--this.size,!0}function qc(h){var E=this.__data__,T=yr(E,h);return T<0?void 0:E[T][1]}function Hc(h){return yr(this.__data__,h)>-1}function jc(h,E){var T=this.__data__,b=yr(T,h);return b<0?(++this.size,T.push([h,E])):T[b][1]=E,this}Je.prototype.clear=Mc,Je.prototype.delete=Bc,Je.prototype.get=qc,Je.prototype.has=Hc,Je.prototype.set=jc;function _t(h){var E=-1,T=h==null?0:h.length;for(this.clear();++E<T;){var b=h[E];this.set(b[0],b[1])}}function Gc(){this.size=0,this.__data__={hash:new wt,map:new(_n||Je),string:new wt}}function Vc(h){var E=Er(this,h).delete(h);return this.size-=E?1:0,E}function Yc(h){return Er(this,h).get(h)}function Wc(h){return Er(this,h).has(h)}function Xc(h,E){var T=Er(this,h),b=T.size;return T.set(h,E),this.size+=T.size==b?0:1,this}_t.prototype.clear=Gc,_t.prototype.delete=Vc,_t.prototype.get=Yc,_t.prototype.has=Wc,_t.prototype.set=Xc;function gr(h){var E=-1,T=h==null?0:h.length;for(this.__data__=new _t;++E<T;)this.add(h[E])}function zc(h){return this.__data__.set(h,r),this}function Kc(h){return this.__data__.has(h)}gr.prototype.add=gr.prototype.push=zc,gr.prototype.has=Kc;function ot(h){var E=this.__data__=new Je(h);this.size=E.size}function Jc(){this.__data__=new Je,this.size=0}function Qc(h){var E=this.__data__,T=E.delete(h);return this.size=E.size,T}function Zc(h){return this.__data__.get(h)}function ef(h){return this.__data__.has(h)}function tf(h,E){var T=this.__data__;if(T instanceof Je){var b=T.__data__;if(!_n||b.length<n-1)return b.push([h,E]),this.size=++T.size,this;T=this.__data__=new _t(b)}return T.set(h,E),this.size=T.size,this}ot.prototype.clear=Jc,ot.prototype.delete=Qc,ot.prototype.get=Zc,ot.prototype.has=ef,ot.prototype.set=tf;function nf(h,E){var T=vr(h),b=!T&&Ef(h),Y=!T&&!b&&Mi(h),P=!T&&!b&&!Y&&_o(h),ee=T||b||Y||P,ce=ee?ke(h.length,String):[],pe=ce.length;for(var K in h)(E||We.call(h,K))&&!(ee&&(K=="length"||Y&&(K=="offset"||K=="parent")||P&&(K=="buffer"||K=="byteLength"||K=="byteOffset")||hf(K,pe)))&&ce.push(K);return ce}function yr(h,E){for(var T=h.length;T--;)if(yo(h[T][0],E))return T;return-1}function rf(h,E,T){var b=E(h);return vr(h)?b:at(b,T(h))}function An(h){return h==null?h===void 0?y:C:vt&&vt in Object(h)?ff(h):yf(h)}function ho(h){return Sn(h)&&An(h)==s}function po(h,E,T,b,Y){return h===E?!0:h==null||E==null||!Sn(h)&&!Sn(E)?h!==h&&E!==E:af(h,E,T,b,po,Y)}function af(h,E,T,b,Y,P){var ee=vr(h),ce=vr(E),pe=ee?l:st(h),K=ce?l:st(E);pe=pe==s?$:pe,K=K==s?$:K;var Pe=pe==$,Me=K==$,ve=pe==K;if(ve&&Mi(h)){if(!Mi(E))return!1;ee=!0,Pe=!1}if(ve&&!Pe)return P||(P=new ot),ee||_o(h)?mo(h,E,T,b,Y,P):uf(h,E,pe,T,b,Y,P);if(!(T&i)){var Le=Pe&&We.call(h,"__wrapped__"),Ue=Me&&We.call(E,"__wrapped__");if(Le||Ue){var lt=Le?h.value():h,Qe=Ue?E.value():E;return P||(P=new ot),Y(lt,Qe,T,b,P)}}return ve?(P||(P=new ot),cf(h,E,T,b,Y,P)):!1}function of(h){if(!wo(h)||mf(h))return!1;var E=Eo(h)?$c:Ri;return E.test(Tt(h))}function sf(h){return Sn(h)&&vo(h.length)&&!!q[An(h)]}function lf(h){if(!gf(h))return Oc(h);var E=[];for(var T in Object(h))We.call(h,T)&&T!="constructor"&&E.push(T);return E}function mo(h,E,T,b,Y,P){var ee=T&i,ce=h.length,pe=E.length;if(ce!=pe&&!(ee&&pe>ce))return!1;var K=P.get(h);if(K&&P.get(E))return K==E;var Pe=-1,Me=!0,ve=T&a?new gr:void 0;for(P.set(h,E),P.set(E,h);++Pe<ce;){var Le=h[Pe],Ue=E[Pe];if(b)var lt=ee?b(Ue,Le,Pe,E,h,P):b(Le,Ue,Pe,h,E,P);if(lt!==void 0){if(lt)continue;Me=!1;break}if(ve){if(!ue(E,function(Qe,At){if(!dr(ve,At)&&(Le===Qe||Y(Le,Qe,T,b,P)))return ve.push(At)})){Me=!1;break}}else if(!(Le===Ue||Y(Le,Ue,T,b,P))){Me=!1;break}}return P.delete(h),P.delete(E),Me}function uf(h,E,T,b,Y,P,ee){switch(T){case N:if(h.byteLength!=E.byteLength||h.byteOffset!=E.byteOffset)return!1;h=h.buffer,E=E.buffer;case G:return!(h.byteLength!=E.byteLength||!P(new lo(h),new lo(E)));case f:case c:case S:return yo(+h,+E);case m:return h.name==E.name&&h.message==E.message;case le:case M:return h==E+"";case A:var ce=hr;case j:var pe=b&i;if(ce||(ce=Tc),h.size!=E.size&&!pe)return!1;var K=ee.get(h);if(K)return K==E;b|=a,ee.set(h,E);var Pe=mo(ce(h),ce(E),b,Y,P,ee);return ee.delete(h),Pe;case O:if(ki)return ki.call(h)==ki.call(E)}return!1}function cf(h,E,T,b,Y,P){var ee=T&i,ce=go(h),pe=ce.length,K=go(E),Pe=K.length;if(pe!=Pe&&!ee)return!1;for(var Me=pe;Me--;){var ve=ce[Me];if(!(ee?ve in E:We.call(E,ve)))return!1}var Le=P.get(h);if(Le&&P.get(E))return Le==E;var Ue=!0;P.set(h,E),P.set(E,h);for(var lt=ee;++Me<pe;){ve=ce[Me];var Qe=h[ve],At=E[ve];if(b)var To=ee?b(At,Qe,ve,E,h,P):b(Qe,At,ve,h,E,P);if(!(To===void 0?Qe===At||Y(Qe,At,T,b,P):To)){Ue=!1;break}lt||(lt=ve=="constructor")}if(Ue&&!lt){var wr=h.constructor,_r=E.constructor;wr!=_r&&"constructor"in h&&"constructor"in E&&!(typeof wr=="function"&&wr instanceof wr&&typeof _r=="function"&&_r instanceof _r)&&(Ue=!1)}return P.delete(h),P.delete(E),Ue}function go(h){return rf(h,_f,df)}function Er(h,E){var T=h.__data__;return pf(E)?T[typeof E=="string"?"string":"hash"]:T.map}function qt(h,E){var T=wn(h,E);return of(T)?T:void 0}function ff(h){var E=We.call(h,vt),T=h[vt];try{h[vt]=void 0;var b=!0}catch{}var Y=oo.call(h);return b&&(E?h[vt]=T:delete h[vt]),Y}var df=co?function(h){return h==null?[]:(h=Object(h),Fe(co(h),function(E){return uo.call(h,E)}))}:Tf,st=An;(xi&&st(new xi(new ArrayBuffer(1)))!=N||_n&&st(new _n)!=A||Fi&&st(Fi.resolve())!=Q||Li&&st(new Li)!=j||Ui&&st(new Ui)!=x)&&(st=function(h){var E=An(h),T=E==$?h.constructor:void 0,b=T?Tt(T):"";if(b)switch(b){case Ic:return N;case Nc:return A;case Rc:return Q;case Dc:return j;case Pc:return x}return E});function hf(h,E){return E=E??o,!!E&&(typeof h=="number"||cr.test(h))&&h>-1&&h%1==0&&h<E}function pf(h){var E=typeof h;return E=="string"||E=="number"||E=="symbol"||E=="boolean"?h!=="__proto__":h===null}function mf(h){return!!ao&&ao in h}function gf(h){var E=h&&h.constructor,T=typeof E=="function"&&E.prototype||pr;return h===T}function yf(h){return oo.call(h)}function Tt(h){if(h!=null){try{return io.call(h)}catch{}try{return h+""}catch{}}return""}function yo(h,E){return h===E||h!==h&&E!==E}var Ef=ho(function(){return arguments}())?ho:function(h){return Sn(h)&&We.call(h,"callee")&&!uo.call(h,"callee")},vr=Array.isArray;function vf(h){return h!=null&&vo(h.length)&&!Eo(h)}var Mi=bc||Af;function wf(h,E){return po(h,E)}function Eo(h){if(!wo(h))return!1;var E=An(h);return E==g||E==w||E==p||E==D}function vo(h){return typeof h=="number"&&h>-1&&h%1==0&&h<=o}function wo(h){var E=typeof h;return h!=null&&(E=="object"||E=="function")}function Sn(h){return h!=null&&typeof h=="object"}var _o=he?Di(he):sf;function _f(h){return vf(h)?nf(h):lf(h)}function Tf(){return[]}function Af(){return!1}e.exports=wf})(Ua,Ua.exports);Object.defineProperty(un,"__esModule",{value:!0});un.createTempUpdateFile=un.DownloadedUpdateHelper=void 0;const ev=Ar.default,tv=Ze.default,Pu=Ua.exports,kt=Dt,Zn=re.default;class nv{constructor(t){this.cacheDir=t,this._file=null,this._packageFile=null,this.versionInfo=null,this.fileInfo=null,this._downloadedFileInfo=null}get downloadedFileInfo(){return this._downloadedFileInfo}get file(){return this._file}get packageFile(){return this._packageFile}get cacheDirForPendingUpdate(){return Zn.join(this.cacheDir,"pending")}async validateDownloadedPath(t,n,r,i){if(this.versionInfo!=null&&this.file===t&&this.fileInfo!=null)return Pu(this.versionInfo,n)&&Pu(this.fileInfo.info,r.info)&&await kt.pathExists(t)?t:null;const a=await this.getValidCachedUpdateFile(r,i);return a===null?null:(i.info(`Update has already been downloaded to ${t}).`),this._file=a,a)}async setDownloadedFile(t,n,r,i,a,o){this._file=t,this._packageFile=n,this.versionInfo=r,this.fileInfo=i,this._downloadedFileInfo={fileName:a,sha512:i.info.sha512,isAdminRightsRequired:i.info.isAdminRightsRequired===!0},o&&await kt.outputJson(this.getUpdateInfoFile(),this._downloadedFileInfo)}async clear(){this._file=null,this._packageFile=null,this.versionInfo=null,this.fileInfo=null,await this.cleanCacheDirForPendingUpdate()}async cleanCacheDirForPendingUpdate(){try{await kt.emptyDir(this.cacheDirForPendingUpdate)}catch{}}async getValidCachedUpdateFile(t,n){var r;const i=this.getUpdateInfoFile();if(!await kt.pathExists(i))return null;let o;try{o=await kt.readJson(i)}catch(f){let c="No cached update info available";return f.code!=="ENOENT"&&(await this.cleanCacheDirForPendingUpdate(),c+=` (error on read: ${f.message})`),n.info(c),null}if(!((r=(o==null?void 0:o.fileName)!==null)!==null&&r!==void 0?r:!1))return n.warn("Cached update info is corrupted: no fileName, directory for cached update will be cleaned"),await this.cleanCacheDirForPendingUpdate(),null;if(t.info.sha512!==o.sha512)return n.info(`Cached update sha512 checksum doesn't match the latest available update. New update must be downloaded. Cached: ${o.sha512}, expected: ${t.info.sha512}. Directory for cached update will be cleaned`),await this.cleanCacheDirForPendingUpdate(),null;const l=Zn.join(this.cacheDirForPendingUpdate,o.fileName);if(!await kt.pathExists(l))return n.info("Cached update file doesn't exist"),null;const p=await rv(l);return t.info.sha512!==p?(n.warn(`Sha512 checksum doesn't match the latest available update. New update must be downloaded. Cached: ${p}, expected: ${t.info.sha512}`),await this.cleanCacheDirForPendingUpdate(),null):(this._downloadedFileInfo=o,l)}getUpdateInfoFile(){return Zn.join(this.cacheDirForPendingUpdate,"update-info.json")}}un.DownloadedUpdateHelper=nv;function rv(e,t="sha512",n="base64",r){return new Promise((i,a)=>{const o=ev.createHash(t);o.on("error",a).setEncoding(n),tv.createReadStream(e,Ie(F({},r),{highWaterMark:1024*1024})).on("error",a).on("end",()=>{o.end(),i(o.read())}).pipe(o,{end:!1})})}async function iv(e,t,n){let r=0,i=Zn.join(t,e);for(let a=0;a<3;a++)try{return await kt.unlink(i),i}catch(o){if(o.code==="ENOENT")return i;n.warn(`Error on remove temp update file: ${o}`),i=Zn.join(t,`${r++}-${e}`)}return i}un.createTempUpdateFile=iv;var mi={},gi={};Object.defineProperty(gi,"__esModule",{value:!0});gi.getAppCacheDir=void 0;const ka=re.default,av=No.default;function ov(){const e=av.homedir();let t;return process.platform==="win32"?t=process.env.LOCALAPPDATA||ka.join(e,"AppData","Local"):process.platform==="darwin"?t=ka.join(e,"Library","Application Support","Caches"):t=process.env.XDG_CACHE_HOME||ka.join(e,".cache"),t}gi.getAppCacheDir=ov;Object.defineProperty(mi,"__esModule",{value:!0});mi.ElectronAppAdapter=void 0;const xu=re.default,sv=gi;class lv{constructor(t=Cn.default.app){this.app=t}whenReady(){return this.app.whenReady()}get version(){return this.app.getVersion()}get name(){return this.app.getName()}get isPackaged(){return this.app.isPackaged===!0}get appUpdateConfigPath(){return this.isPackaged?xu.join(process.resourcesPath,"app-update.yml"):xu.join(this.app.getAppPath(),"dev-app-update.yml")}get userDataPath(){return this.app.getPath("userData")}get baseCachePath(){return sv.getAppCacheDir()}quit(){this.app.quit()}onQuit(t){this.app.once("quit",(n,r)=>t(r))}}mi.ElectronAppAdapter=lv;var Fu={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.ElectronHttpExecutor=e.getNetSession=e.NET_SESSION_NAME=void 0;const t=te;e.NET_SESSION_NAME="electron-updater";function n(){return Cn.default.session.fromPartition(e.NET_SESSION_NAME,{cache:!1})}e.getNetSession=n;class r extends t.HttpExecutor{constructor(a){super();this.proxyLoginCallback=a,this.cachedSession=null}async download(a,o,s){return await s.cancellationToken.createPromise((l,p,f)=>{const c={headers:s.headers||void 0,redirect:"manual"};t.configureRequestUrl(a,c),t.configureRequestOptions(c),this.doDownload(c,{destination:o,options:s,onCancel:f,callback:m=>{m==null?l(o):p(m)},responseHandler:null},0)})}createRequest(a,o){a.headers&&a.headers.Host&&(a.host=a.headers.Host,delete a.headers.Host),this.cachedSession==null&&(this.cachedSession=n());const s=Cn.default.net.request(Ie(F({},a),{session:this.cachedSession}));return s.on("response",o),this.proxyLoginCallback!=null&&s.on("login",this.proxyLoginCallback),s}addRedirectHandlers(a,o,s,l,p){a.on("redirect",(f,c,m)=>{a.abort(),l>this.maxRedirects?s(this.createMaxRedirectError()):p(t.HttpExecutor.prepareRedirectUrlOptions(m,o))})}}e.ElectronHttpExecutor=r})(Fu);var er={},Ee={},uv=1/0,cv="[object Symbol]",Lu=/[\\^$.*+?()[\]{}|]/g,fv=RegExp(Lu.source),dv=typeof Be=="object"&&Be&&Be.Object===Object&&Be,hv=typeof self=="object"&&self&&self.Object===Object&&self,pv=dv||hv||Function("return this")(),mv=Object.prototype,gv=mv.toString,Uu=pv.Symbol,ku=Uu?Uu.prototype:void 0,Mu=ku?ku.toString:void 0;function yv(e){if(typeof e=="string")return e;if(vv(e))return Mu?Mu.call(e):"";var t=e+"";return t=="0"&&1/e==-uv?"-0":t}function Ev(e){return!!e&&typeof e=="object"}function vv(e){return typeof e=="symbol"||Ev(e)&&gv.call(e)==cv}function wv(e){return e==null?"":yv(e)}function _v(e){return e=wv(e),e&&fv.test(e)?e.replace(Lu,"\\$&"):e}var Tv=_v;Object.defineProperty(Ee,"__esModule",{value:!0});Ee.blockmapFiles=Ee.getChannelFilename=Ee.newUrlFromBase=Ee.newBaseUrl=void 0;const Bu=St.default,Av=Tv;function Sv(e){const t=new Bu.URL(e);return t.pathname.endsWith("/")||(t.pathname+="/"),t}Ee.newBaseUrl=Sv;function Ma(e,t,n=!1){const r=new Bu.URL(e,t),i=t.search;return i!=null&&i.length!==0?r.search=i:n&&(r.search=`noCache=${Date.now().toString(32)}`),r}Ee.newUrlFromBase=Ma;function $v(e){return`${e}.yml`}Ee.getChannelFilename=$v;function Cv(e,t,n){const r=Ma(`${e.pathname}.blockmap`,e);return[Ma(`${e.pathname.replace(new RegExp(Av(n),"g"),t)}.blockmap`,e),r]}Ee.blockmapFiles=Cv;var ae={};Object.defineProperty(ae,"__esModule",{value:!0});ae.resolveFiles=ae.getFileList=ae.parseUpdateInfo=ae.findFile=ae.Provider=void 0;const yt=te,bv=ge,qu=Ee;class Ov{constructor(t){this.runtimeOptions=t,this.requestHeaders=null,this.executor=t.executor}get isUseMultipleRangeRequest(){return this.runtimeOptions.isUseMultipleRangeRequest!==!1}getChannelFilePrefix(){if(this.runtimeOptions.platform==="linux"){const t=process.env.TEST_UPDATER_ARCH||process.arch,n=t==="x64"?"":`-${t}`;return"-linux"+n}else return this.runtimeOptions.platform==="darwin"?"-mac":""}getDefaultChannelName(){return this.getCustomChannelName("latest")}getCustomChannelName(t){return`${t}${this.getChannelFilePrefix()}`}get fileExtraDownloadHeaders(){return null}setRequestHeaders(t){this.requestHeaders=t}httpRequest(t,n,r){return this.executor.request(this.createRequestOptions(t,n),r)}createRequestOptions(t,n){const r={};return this.requestHeaders==null?n!=null&&(r.headers=n):r.headers=n==null?this.requestHeaders:F(F({},this.requestHeaders),n),yt.configureRequestUrl(t,r),r}}ae.Provider=Ov;function Iv(e,t,n){if(e.length===0)throw yt.newError("No files provided","ERR_UPDATER_NO_FILES_PROVIDED");const r=e.find(i=>i.url.pathname.toLowerCase().endsWith(`.${t}`));return r??(n==null?e[0]:e.find(i=>!n.some(a=>i.url.pathname.toLowerCase().endsWith(`.${a}`))))}ae.findFile=Iv;function Nv(e,t,n){if(e==null)throw yt.newError(`Cannot parse update info from ${t} in the latest release artifacts (${n}): rawData: null`,"ERR_UPDATER_INVALID_UPDATE_INFO");let r;try{r=bv.load(e)}catch(i){throw yt.newError(`Cannot parse update info from ${t} in the latest release artifacts (${n}): ${i.stack||i.message}, rawData: ${e}`,"ERR_UPDATER_INVALID_UPDATE_INFO")}return r}ae.parseUpdateInfo=Nv;function Hu(e){const t=e.files;if(t!=null&&t.length>0)return t;if(e.path!=null)return[{url:e.path,sha2:e.sha2,sha512:e.sha512}];throw yt.newError(`No files provided: ${yt.safeStringifyJson(e)}`,"ERR_UPDATER_NO_FILES_PROVIDED")}ae.getFileList=Hu;function Rv(e,t,n=r=>r){const i=Hu(e).map(s=>{if(s.sha2==null&&s.sha512==null)throw yt.newError(`Update info doesn't contain nor sha256 neither sha512 checksum: ${yt.safeStringifyJson(s)}`,"ERR_UPDATER_NO_CHECKSUM");return{url:qu.newUrlFromBase(n(s.url),t),info:s}}),a=e.packages,o=a==null?null:a[process.arch]||a.ia32;return o!=null&&(i[0].packageInfo=Ie(F({},o),{path:qu.newUrlFromBase(n(o.path),t).href})),i}ae.resolveFiles=Rv;Object.defineProperty(er,"__esModule",{value:!0});er.GenericProvider=void 0;const ju=te,Ba=Ee,qa=ae;class Dv extends qa.Provider{constructor(t,n,r){super(r);this.configuration=t,this.updater=n,this.baseUrl=Ba.newBaseUrl(this.configuration.url)}get channel(){const t=this.updater.channel||this.configuration.channel;return t==null?this.getDefaultChannelName():this.getCustomChannelName(t)}async getLatestVersion(){const t=Ba.getChannelFilename(this.channel),n=Ba.newUrlFromBase(t,this.baseUrl,this.updater.isAddNoCacheQuery);for(let r=0;;r++)try{return qa.parseUpdateInfo(await this.httpRequest(n),t,n)}catch(i){if(i instanceof ju.HttpError&&i.statusCode===404)throw ju.newError(`Cannot find channel "${t}" update info: ${i.stack||i.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");if(i.code==="ECONNREFUSED"&&r<3){await new Promise((a,o)=>{try{setTimeout(a,1e3*r)}catch(s){o(s)}});continue}throw i}}resolveFiles(t){return qa.resolveFiles(t,this.baseUrl)}}er.GenericProvider=Dv;var cn={},yi={},Ei={};Object.defineProperty(Ei,"__esModule",{value:!0});Ei.BintrayClient=void 0;const Gu=J;class Pv{constructor(t,n,r,i){if(this.httpExecutor=n,this.cancellationToken=r,this.requestHeaders=null,t.owner==null)throw new Error("owner is not specified");if(t.package==null)throw new Error("package is not specified");this.repo=t.repo||"generic",this.packageName=t.package,this.owner=t.owner,this.user=t.user||t.owner,this.component=t.component||null,this.distribution=t.distribution||"stable",this.auth=i==null?null:`Basic ${Buffer.from(`${this.user}:${i}`).toString("base64")}`,this.basePath=`/packages/${this.owner}/${this.repo}/${this.packageName}`}setRequestHeaders(t){this.requestHeaders=t}bintrayRequest(t,n,r=null,i,a){return Gu.parseJson(this.httpExecutor.request(Gu.configureRequestOptions({hostname:"api.bintray.com",path:t,headers:this.requestHeaders||void 0},n,a),i,r))}getVersion(t){return this.bintrayRequest(`${this.basePath}/versions/${t}`,this.auth,null,this.cancellationToken)}getVersionFiles(t){return this.bintrayRequest(`${this.basePath}/versions/${t}/files`,this.auth,null,this.cancellationToken)}createVersion(t){return this.bintrayRequest(`${this.basePath}/versions`,this.auth,{name:t},this.cancellationToken)}deleteVersion(t){return this.bintrayRequest(`${this.basePath}/versions/${t}`,this.auth,null,this.cancellationToken,"DELETE")}}Ei.BintrayClient=Pv;Object.defineProperty(yi,"__esModule",{value:!0});yi.BintrayProvider=void 0;const Ha=te,xv=Ei,Fv=St.default,Vu=Ee,ja=ae;class Lv extends ja.Provider{constructor(t,n){super(n);this.client=new xv.BintrayClient(t,n.executor,new Ha.CancellationToken),this.baseUrl=Vu.newBaseUrl(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}`)}setRequestHeaders(t){super.setRequestHeaders(t),this.client.setRequestHeaders(t)}async getLatestVersion(){try{const t=await this.client.getVersion("_latest"),n=Vu.getChannelFilename(this.getDefaultChannelName()),r=await this.client.getVersionFiles(t.name),i=r.find(o=>o.name.endsWith(`_${n}`)||o.name.endsWith(`-${n}`));if(i==null)throw Ha.newError(`Cannot find channel file "${n}", existing files:
${r.map(o=>JSON.stringify(o,null,2)).join(`,
`)}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");const a=new Fv.URL(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}/${i.name}`);return ja.parseUpdateInfo(await this.httpRequest(a),n,a)}catch(t){throw"statusCode"in t&&t.statusCode===404?Ha.newError(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${t.stack||t.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND"):t}}resolveFiles(t){return ja.resolveFiles(t,this.baseUrl)}}yi.BintrayProvider=Lv;var vi={};Object.defineProperty(vi,"__esModule",{value:!0});vi.BitbucketProvider=void 0;const Yu=te,Ga=Ee,Va=ae;class Uv extends Va.Provider{constructor(t,n,r){super(Ie(F({},r),{isUseMultipleRangeRequest:!1}));this.configuration=t,this.updater=n;const{owner:i,slug:a}=t;this.baseUrl=Ga.newBaseUrl(`https://api.bitbucket.org/2.0/repositories/${i}/${a}/downloads`)}get channel(){return this.updater.channel||this.configuration.channel||"latest"}async getLatestVersion(){const t=new Yu.CancellationToken,n=Ga.getChannelFilename(this.getCustomChannelName(this.channel)),r=Ga.newUrlFromBase(n,this.baseUrl,this.updater.isAddNoCacheQuery);try{const i=await this.httpRequest(r,void 0,t);return Va.parseUpdateInfo(i,n,r)}catch(i){throw Yu.newError(`Unable to find latest version on ${this.toString()}, please ensure release exists: ${i.stack||i.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}resolveFiles(t){return Va.resolveFiles(t,this.baseUrl)}toString(){const{owner:t,slug:n}=this.configuration;return`Bitbucket (owner: ${t}, slug: ${n}, channel: ${this.channel})`}}vi.BitbucketProvider=Uv;var rt={};Object.defineProperty(rt,"__esModule",{value:!0});rt.computeReleaseNotes=rt.GitHubProvider=rt.BaseGitHubProvider=void 0;const it=te,Wu=Du,kv=St.default,fn=Ee,Ya=ae,Xu=/\/tag\/([^/]+)$/;class zu extends Ya.Provider{constructor(t,n,r){super(Ie(F({},r),{isUseMultipleRangeRequest:!1}));this.options=t,this.baseUrl=fn.newBaseUrl(it.githubUrl(t,n));const i=n==="github.com"?"api.github.com":n;this.baseApiUrl=fn.newBaseUrl(it.githubUrl(t,i))}computeGithubBasePath(t){const n=this.options.host;return n!=null&&n!=="github.com"&&n!=="api.github.com"?`/api/v3${t}`:t}}rt.BaseGitHubProvider=zu;class Mv extends zu{constructor(t,n,r){super(t,"github.com",r);this.options=t,this.updater=n}async getLatestVersion(){const t=new it.CancellationToken,n=await this.httpRequest(fn.newUrlFromBase(`${this.basePath}.atom`,this.baseUrl),{accept:"application/xml, application/atom+xml, text/xml, */*"},t),r=it.parseXml(n);let i=r.element("entry",!1,"No published versions on GitHub"),a;try{if(this.updater.allowPrerelease)a=Xu.exec(i.element("link").attribute("href"))[1];else{a=await this.getLatestTagName(t);for(const c of r.getElements("entry"))if(Xu.exec(c.element("link").attribute("href"))[1]===a){i=c;break}}}catch(c){throw it.newError(`Cannot parse releases feed: ${c.stack||c.message},
XML:
${n}`,"ERR_UPDATER_INVALID_RELEASE_FEED")}if(a==null)throw it.newError("No published versions on GitHub","ERR_UPDATER_NO_PUBLISHED_VERSIONS");const o=fn.getChannelFilename(this.getDefaultChannelName()),s=fn.newUrlFromBase(this.getBaseDownloadPath(a,o),this.baseUrl),l=this.createRequestOptions(s);let p;try{p=await this.executor.request(l,t)}catch(c){throw!this.updater.allowPrerelease&&c instanceof it.HttpError&&c.statusCode===404?it.newError(`Cannot find ${o} in the latest release artifacts (${s}): ${c.stack||c.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND"):c}const f=Ya.parseUpdateInfo(p,o,s);return f.releaseName==null&&(f.releaseName=i.elementValueOrEmpty("title")),f.releaseNotes==null&&(f.releaseNotes=Ju(this.updater.currentVersion,this.updater.fullChangelog,r,i)),F({tag:a},f)}async getLatestTagName(t){const n=this.options,r=n.host==null||n.host==="github.com"?fn.newUrlFromBase(`${this.basePath}/latest`,this.baseUrl):new kv.URL(`${this.computeGithubBasePath(`/repos/${n.owner}/${n.repo}/releases`)}/latest`,this.baseApiUrl);try{const i=await this.httpRequest(r,{Accept:"application/json"},t);return i==null?null:JSON.parse(i).tag_name}catch(i){throw it.newError(`Unable to find latest version on GitHub (${r}), please ensure a production release exists: ${i.stack||i.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}get basePath(){return`/${this.options.owner}/${this.options.repo}/releases`}resolveFiles(t){return Ya.resolveFiles(t,this.baseUrl,n=>this.getBaseDownloadPath(t.tag,n.replace(/ /g,"-")))}getBaseDownloadPath(t,n){return`${this.basePath}/download/${t}/${n}`}}rt.GitHubProvider=Mv;function Ku(e){const t=e.elementValueOrEmpty("content");return t==="No content."?"":t}function Ju(e,t,n,r){if(!t)return Ku(r);const i=[];for(const a of n.getElements("entry")){const o=/\/tag\/v?([^/]+)$/.exec(a.element("link").attribute("href"))[1];Wu.lt(e,o)&&i.push({version:o,note:Ku(a)})}return i.sort((a,o)=>Wu.rcompare(a.version,o.version))}rt.computeReleaseNotes=Ju;var wi={};Object.defineProperty(wi,"__esModule",{value:!0});wi.KeygenProvider=void 0;const Qu=te,Wa=Ee,Xa=ae;class Bv extends Xa.Provider{constructor(t,n,r){super(Ie(F({},r),{isUseMultipleRangeRequest:!1}));this.configuration=t,this.updater=n,this.baseUrl=Wa.newBaseUrl(`https://api.keygen.sh/v1/accounts/${this.configuration.account}/artifacts`)}get channel(){return this.updater.channel||this.configuration.channel||"stable"}async getLatestVersion(){const t=new Qu.CancellationToken,n=Wa.getChannelFilename(this.getCustomChannelName(this.channel)),r=Wa.newUrlFromBase(n,this.baseUrl,this.updater.isAddNoCacheQuery);try{const i=await this.httpRequest(r,{Accept:"application/vnd.api+json"},t);return Xa.parseUpdateInfo(i,n,r)}catch(i){throw Qu.newError(`Unable to find latest version on ${this.toString()}, please ensure release exists: ${i.stack||i.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}resolveFiles(t){return Xa.resolveFiles(t,this.baseUrl)}toString(){const{account:t,product:n,platform:r}=this.configuration;return`Keygen (account: ${t}, product: ${n}, platform: ${r}, channel: ${this.channel})`}}wi.KeygenProvider=Bv;var _i={};Object.defineProperty(_i,"__esModule",{value:!0});_i.PrivateGitHubProvider=void 0;const dn=te,qv=ge,Hv=re.default,Zu=St.default,ec=Ee,jv=rt,Gv=ae;class Vv extends jv.BaseGitHubProvider{constructor(t,n,r,i){super(t,"api.github.com",i);this.updater=n,this.token=r}createRequestOptions(t,n){const r=super.createRequestOptions(t,n);return r.redirect="manual",r}async getLatestVersion(){const t=new dn.CancellationToken,n=ec.getChannelFilename(this.getDefaultChannelName()),r=await this.getLatestVersionInfo(t),i=r.assets.find(s=>s.name===n);if(i==null)throw dn.newError(`Cannot find ${n} in the release ${r.html_url||r.name}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");const a=new Zu.URL(i.url);let o;try{o=qv.load(await this.httpRequest(a,this.configureHeaders("application/octet-stream"),t))}catch(s){throw s instanceof dn.HttpError&&s.statusCode===404?dn.newError(`Cannot find ${n} in the latest release artifacts (${a}): ${s.stack||s.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND"):s}return o.assets=r.assets,o}get fileExtraDownloadHeaders(){return this.configureHeaders("application/octet-stream")}configureHeaders(t){return{accept:t,authorization:`token ${this.token}`}}async getLatestVersionInfo(t){const n=this.updater.allowPrerelease;let r=this.basePath;n||(r=`${r}/latest`);const i=ec.newUrlFromBase(r,this.baseUrl);try{const a=JSON.parse(await this.httpRequest(i,this.configureHeaders("application/vnd.github.v3+json"),t));return n?a.find(o=>o.prerelease)||a[0]:a}catch(a){throw dn.newError(`Unable to find latest version on GitHub (${i}), please ensure a production release exists: ${a.stack||a.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}get basePath(){return this.computeGithubBasePath(`/repos/${this.options.owner}/${this.options.repo}/releases`)}resolveFiles(t){return Gv.getFileList(t).map(n=>{const r=Hv.posix.basename(n.url).replace(/ /g,"-"),i=t.assets.find(a=>a!=null&&a.name===r);if(i==null)throw dn.newError(`Cannot find asset "${r}" in: ${JSON.stringify(t.assets,null,2)}`,"ERR_UPDATER_ASSET_NOT_FOUND");return{url:new Zu.URL(i.url),info:n}})}}_i.PrivateGitHubProvider=Vv;Object.defineProperty(cn,"__esModule",{value:!0});cn.createClient=cn.isUrlProbablySupportMultiRangeRequests=void 0;const Ti=te,Yv=yi,Wv=vi,tc=er,Xv=rt,zv=wi,Kv=_i;function nc(e){return!e.includes("s3.amazonaws.com")}cn.isUrlProbablySupportMultiRangeRequests=nc;function Jv(e,t,n){if(typeof e=="string")throw Ti.newError("Please pass PublishConfiguration object","ERR_UPDATER_INVALID_PROVIDER_CONFIGURATION");const r=e.provider;switch(r){case"github":{const i=e,a=(i.private?process.env.GH_TOKEN||process.env.GITHUB_TOKEN:null)||i.token;return a==null?new Xv.GitHubProvider(i,t,n):new Kv.PrivateGitHubProvider(i,t,a,n)}case"bitbucket":return new Wv.BitbucketProvider(e,t,n);case"keygen":return new zv.KeygenProvider(e,t,n);case"s3":case"spaces":return new tc.GenericProvider({provider:"generic",url:Ti.getS3LikeProviderBaseUrl(e),channel:e.channel||null},t,Ie(F({},n),{isUseMultipleRangeRequest:!1}));case"generic":{const i=e;return new tc.GenericProvider(i,t,Ie(F({},n),{isUseMultipleRangeRequest:i.useMultipleRangeRequest!==!1&&nc(i.url)}))}case"bintray":return new Yv.BintrayProvider(e,n);case"custom":{const i=e,a=i.updateProvider;if(!a)throw Ti.newError("Custom provider not specified","ERR_UPDATER_INVALID_PROVIDER_CONFIGURATION");return new a(i,t,n)}default:throw Ti.newError(`Unsupported provider: ${r}`,"ERR_UPDATER_UNSUPPORTED_PROVIDER")}}cn.createClient=Jv;Object.defineProperty(ut,"__esModule",{value:!0});ut.NoOpLogger=ut.AppUpdater=void 0;const De=te,Qv=Ar.default,Zv=bo.default,ew=Dt,tr=Yf.default,tw=ge,za=ti,hn=re.default,pn=Du,rc=un,nw=mi,ic=Fu,rw=er,Ai=Ht,Ka=cn;class Ja extends Zv.EventEmitter{constructor(t,n){super();this.autoDownload=!0,this.autoInstallOnAppQuit=!0,this.allowPrerelease=!1,this.fullChangelog=!1,this.allowDowngrade=!1,this._channel=null,this.downloadedUpdateHelper=null,this.requestHeaders=null,this._logger=console,this.signals=new Ai.UpdaterSignal(this),this._appUpdateConfigPath=null,this.clientPromise=null,this.stagingUserIdPromise=new za.Lazy(()=>this.getOrCreateStagingUserId()),this.configOnDisk=new za.Lazy(()=>this.loadUpdateConfig()),this.checkForUpdatesPromise=null,this.updateInfoAndProvider=null,this._testOnlyOptions=null,this.on("error",a=>{this._logger.error(`Error: ${a.stack||a.message}`)}),n==null?(this.app=new nw.ElectronAppAdapter,this.httpExecutor=new ic.ElectronHttpExecutor((a,o)=>this.emit("login",a,o))):(this.app=n,this.httpExecutor=null);const r=this.app.version,i=pn.parse(r);if(i==null)throw De.newError(`App version is not a valid semver version: "${r}"`,"ERR_UPDATER_INVALID_VERSION");this.currentVersion=i,this.allowPrerelease=iw(i),t!=null&&(this.setFeedURL(t),typeof t!="string"&&t.requestHeaders&&(this.requestHeaders=t.requestHeaders))}get channel(){return this._channel}set channel(t){if(this._channel!=null){if(typeof t!="string")throw De.newError(`Channel must be a string, but got: ${t}`,"ERR_UPDATER_INVALID_CHANNEL");if(t.length===0)throw De.newError("Channel must be not an empty string","ERR_UPDATER_INVALID_CHANNEL")}this._channel=t,this.allowDowngrade=!0}addAuthHeader(t){this.requestHeaders=Object.assign({},this.requestHeaders,{authorization:t})}get netSession(){return ic.getNetSession()}get logger(){return this._logger}set logger(t){this._logger=t??new ac}set updateConfigPath(t){this.clientPromise=null,this._appUpdateConfigPath=t,this.configOnDisk=new za.Lazy(()=>this.loadUpdateConfig())}getFeedURL(){return"Deprecated. Do not use it."}setFeedURL(t){const n=this.createProviderRuntimeOptions();let r;typeof t=="string"?r=new rw.GenericProvider({provider:"generic",url:t},this,Ie(F({},n),{isUseMultipleRangeRequest:Ka.isUrlProbablySupportMultiRangeRequests(t)})):r=Ka.createClient(t,this,n),this.clientPromise=Promise.resolve(r)}checkForUpdates(){let t=this.checkForUpdatesPromise;if(t!=null)return this._logger.info("Checking for update (already in progress)"),t;const n=()=>this.checkForUpdatesPromise=null;return this._logger.info("Checking for update"),t=this.doCheckForUpdates().then(r=>(n(),r)).catch(r=>{throw n(),this.emit("error",r,`Cannot check for updates: ${(r.stack||r).toString()}`),r}),this.checkForUpdatesPromise=t,t}isUpdaterActive(){return this.app.isPackaged?!0:(this._logger.info("Skip checkForUpdatesAndNotify because application is not packed"),!1)}checkForUpdatesAndNotify(t){return this.isUpdaterActive()?this.checkForUpdates().then(n=>{const r=n.downloadPromise;return r==null?(this._logger.debug!=null&&this._logger.debug("checkForUpdatesAndNotify called, downloadPromise is null"),n):(r.then(()=>{const i=Ja.formatDownloadNotification(n.updateInfo.version,this.app.name,t);new Cn.default.Notification(i).show()}),n)}):Promise.resolve(null)}static formatDownloadNotification(t,n,r){return r==null&&(r={title:"A new update is ready to install",body:"{appName} version {version} has been downloaded and will be automatically installed on exit"}),r={title:r.title.replace("{appName}",n).replace("{version}",t),body:r.body.replace("{appName}",n).replace("{version}",t)},r}async isStagingMatch(t){const n=t.stagingPercentage;let r=n;if(r==null)return!0;if(r=parseInt(r,10),isNaN(r))return this._logger.warn(`Staging percentage is NaN: ${n}`),!0;r=r/100;const i=await this.stagingUserIdPromise.value,o=De.UUID.parse(i).readUInt32BE(12)/4294967295;return this._logger.info(`Staging percentage: ${r}, percentage: ${o}, user id: ${i}`),o<r}computeFinalHeaders(t){return this.requestHeaders!=null&&Object.assign(t,this.requestHeaders),t}async isUpdateAvailable(t){const n=pn.parse(t.version);if(n==null)throw De.newError(`This file could not be downloaded, or the latest version (from update server) does not have a valid semver version: "${t.version}"`,"ERR_UPDATER_INVALID_VERSION");const r=this.currentVersion;if(pn.eq(n,r)||!await this.isStagingMatch(t))return!1;const a=pn.gt(n,r),o=pn.lt(n,r);return a?!0:this.allowDowngrade&&o}async getUpdateInfoAndProvider(){await this.app.whenReady(),this.clientPromise==null&&(this.clientPromise=this.configOnDisk.value.then(r=>Ka.createClient(r,this,this.createProviderRuntimeOptions())));const t=await this.clientPromise,n=await this.stagingUserIdPromise.value;return t.setRequestHeaders(this.computeFinalHeaders({"x-user-staging-id":n})),{info:await t.getLatestVersion(),provider:t}}createProviderRuntimeOptions(){return{isUseMultipleRangeRequest:!0,platform:this._testOnlyOptions==null?process.platform:this._testOnlyOptions.platform,executor:this.httpExecutor}}async doCheckForUpdates(){this.emit("checking-for-update");const t=await this.getUpdateInfoAndProvider(),n=t.info;if(!await this.isUpdateAvailable(n))return this._logger.info(`Update for version ${this.currentVersion} is not available (latest version: ${n.version}, downgrade is ${this.allowDowngrade?"allowed":"disallowed"}).`),this.emit("update-not-available",n),{versionInfo:n,updateInfo:n};this.updateInfoAndProvider=t,this.onUpdateAvailable(n);const r=new De.CancellationToken;return{versionInfo:n,updateInfo:n,cancellationToken:r,downloadPromise:this.autoDownload?this.downloadUpdate(r):null}}onUpdateAvailable(t){this._logger.info(`Found version ${t.version} (url: ${De.asArray(t.files).map(n=>n.url).join(", ")})`),this.emit("update-available",t)}downloadUpdate(t=new De.CancellationToken){const n=this.updateInfoAndProvider;if(n==null){const i=new Error("Please check update first");return this.dispatchError(i),Promise.reject(i)}this._logger.info(`Downloading update from ${De.asArray(n.info.files).map(i=>i.url).join(", ")}`);const r=i=>{if(!(i instanceof De.CancellationError))try{this.dispatchError(i)}catch(a){this._logger.warn(`Cannot dispatch error event: ${a.stack||a}`)}return i};try{return this.doDownloadUpdate({updateInfoAndProvider:n,requestHeaders:this.computeRequestHeaders(n.provider),cancellationToken:t}).catch(i=>{throw r(i)})}catch(i){return Promise.reject(r(i))}}dispatchError(t){this.emit("error",t,(t.stack||t).toString())}dispatchUpdateDownloaded(t){this.emit(Ai.UPDATE_DOWNLOADED,t)}async loadUpdateConfig(){return this._appUpdateConfigPath==null&&(this._appUpdateConfigPath=this.app.appUpdateConfigPath),tw.load(await tr.readFile(this._appUpdateConfigPath,"utf-8"))}computeRequestHeaders(t){const n=t.fileExtraDownloadHeaders;if(n!=null){const r=this.requestHeaders;return r==null?n:F(F({},n),r)}return this.computeFinalHeaders({accept:"*/*"})}async getOrCreateStagingUserId(){const t=hn.join(this.app.userDataPath,".updaterId");try{const r=await tr.readFile(t,"utf-8");if(De.UUID.check(r))return r;this._logger.warn(`Staging user id file exists, but content was invalid: ${r}`)}catch(r){r.code!=="ENOENT"&&this._logger.warn(`Couldn't read staging user ID, creating a blank one: ${r}`)}const n=De.UUID.v5(Qv.randomBytes(4096),De.UUID.OID);this._logger.info(`Generated new staging user ID: ${n}`);try{await ew.outputFile(t,n)}catch(r){this._logger.warn(`Couldn't write out staging user ID: ${r}`)}return n}get isAddNoCacheQuery(){const t=this.requestHeaders;if(t==null)return!0;for(const n of Object.keys(t)){const r=n.toLowerCase();if(r==="authorization"||r==="private-token")return!1}return!0}async getOrCreateDownloadHelper(){let t=this.downloadedUpdateHelper;if(t==null){const n=(await this.configOnDisk.value).updaterCacheDirName,r=this._logger;n==null&&r.error("updaterCacheDirName is not specified in app-update.yml Was app build using at least electron-builder 20.34.0?");const i=hn.join(this.app.baseCachePath,n||this.app.name);r.debug!=null&&r.debug(`updater cache dir: ${i}`),t=new rc.DownloadedUpdateHelper(i),this.downloadedUpdateHelper=t}return t}async executeDownload(t){const n=t.fileInfo,r={headers:t.downloadUpdateOptions.requestHeaders,cancellationToken:t.downloadUpdateOptions.cancellationToken,sha2:n.info.sha2,sha512:n.info.sha512};this.listenerCount(Ai.DOWNLOAD_PROGRESS)>0&&(r.onProgress=$=>this.emit(Ai.DOWNLOAD_PROGRESS,$));const i=t.downloadUpdateOptions.updateInfoAndProvider.info,a=i.version,o=n.packageInfo;function s(){const $=decodeURIComponent(t.fileInfo.url.pathname);return $.endsWith(`.${t.fileExtension}`)?hn.posix.basename($):`update.${t.fileExtension}`}const l=await this.getOrCreateDownloadHelper(),p=l.cacheDirForPendingUpdate;await tr.mkdir(p,{recursive:!0});const f=s();let c=hn.join(p,f);const m=o==null?null:hn.join(p,`package-${a}${hn.extname(o.path)||".7z"}`),g=async $=>(await l.setDownloadedFile(c,m,i,n,f,$),await t.done(Ie(F({},i),{downloadedFile:c})),m==null?[c]:[c,m]),w=this._logger,A=await l.validateDownloadedPath(c,i,n,w);if(A!=null)return c=A,await g(!1);const S=async()=>(await l.clear().catch(()=>{}),await tr.unlink(c).catch(()=>{})),C=await rc.createTempUpdateFile(`temp-${f}`,p,w);try{await t.task(C,r,m,S),await tr.rename(C,c)}catch($){throw await S(),$ instanceof De.CancellationError&&(w.info("cancelled"),this.emit("update-cancelled",i)),$}return w.info(`New version ${a} has been downloaded to ${c}`),await g(!0)}}ut.AppUpdater=Ja;function iw(e){const t=pn.prerelease(e);return t!=null&&t.length>0}class ac{info(t){}warn(t){}error(t){}}ut.NoOpLogger=ac;var nr={},rr={};Object.defineProperty(rr,"__esModule",{value:!0});rr.BaseUpdater=void 0;const oc=Ze.default,sc=re.default,aw=ut;class ow extends aw.AppUpdater{constructor(t,n){super(t,n);this.quitAndInstallCalled=!1,this.quitHandlerAdded=!1}quitAndInstall(t=!1,n=!1){this._logger.info("Install on explicit quitAndInstall"),this.install(t,t?n:!0)?setImmediate(()=>{this.app.quit()}):this.quitAndInstallCalled=!1}executeDownload(t){return super.executeDownload(Ie(F({},t),{done:n=>(this.dispatchUpdateDownloaded(n),this.addQuitHandler(),Promise.resolve())}))}install(t,n){if(this.quitAndInstallCalled)return this._logger.warn("install call ignored: quitAndInstallCalled is set to true"),!1;const r=this.downloadedUpdateHelper,i=r==null?null:r.file,a=r==null?null:r.downloadedFileInfo;if(i==null||a==null)return this.dispatchError(new Error("No valid update available, can't quit and install")),!1;this.quitAndInstallCalled=!0;try{let o=!1;if(process.platform==="win32")try{const s=sc.join(sc.dirname(process.execPath),`access-${Math.floor(Math.random()*100)}.tmp`);oc.writeFileSync(s," "),oc.rmSync(s)}catch{o=!0}return this._logger.info(`Install: isSilent: ${t}, isForceRunAfter: ${n}, installPathRequiresElevation: ${o}`),this.doInstall({installerPath:i,isSilent:t,isForceRunAfter:n,isAdminRightsRequired:o||a.isAdminRightsRequired})}catch(o){return this.dispatchError(o),!1}}addQuitHandler(){this.quitHandlerAdded||!this.autoInstallOnAppQuit||(this.quitHandlerAdded=!0,this.app.onQuit(t=>{if(this.quitAndInstallCalled){this._logger.info("Update installer has already been triggered. Quitting application.");return}if(!this.autoInstallOnAppQuit){this._logger.info("Update will not be installed on quit because autoInstallOnAppQuit is set to false.");return}if(t!==0){this._logger.info(`Update will be not installed on quit because application is quitting with exit code ${t}`);return}this._logger.info("Auto install update on quit"),this.install(!0,!1)}))}}rr.BaseUpdater=ow;var ir={},ar={},Mt={},Si={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.computeOperations=e.OperationKind=void 0;var t;(function(s){s[s.COPY=0]="COPY",s[s.DOWNLOAD=1]="DOWNLOAD"})(t=e.OperationKind||(e.OperationKind={}));function n(s,l,p){const f=o(s.files),c=o(l.files);let m=null;const g=l.files[0],w=[],A=g.name,S=f.get(A);if(S==null)throw new Error(`no file ${A} in old blockmap`);const C=c.get(A);let $=0;const{checksumToOffset:Q,checksumToOldSize:D}=a(f.get(A),S.offset,p);let le=g.offset;for(let j=0;j<C.checksums.length;le+=C.sizes[j],j++){const M=C.sizes[j],O=C.checksums[j];let y=Q.get(O);y!=null&&D.get(O)!==M&&(p.warn(`Checksum ("${O}") matches, but size differs (old: ${D.get(O)}, new: ${M})`),y=void 0),y===void 0?($++,m!=null&&m.kind===t.DOWNLOAD&&m.end===le?m.end+=M:(m={kind:t.DOWNLOAD,start:le,end:le+M},i(m,w,O,j))):m!=null&&m.kind===t.COPY&&m.end===y?m.end+=M:(m={kind:t.COPY,start:y,end:y+M},i(m,w,O,j))}return $>0&&p.info(`File${g.name==="file"?"":" "+g.name} has ${$} changed blocks`),w}e.computeOperations=n;const r=process.env.DIFFERENTIAL_DOWNLOAD_PLAN_BUILDER_VALIDATE_RANGES==="true";function i(s,l,p,f){if(r&&l.length!==0){const c=l[l.length-1];if(c.kind===s.kind&&s.start<c.end&&s.start>c.start){const m=[c.start,c.end,s.start,s.end].reduce((g,w)=>g<w?g:w);throw new Error(`operation (block index: ${f}, checksum: ${p}, kind: ${t[s.kind]}) overlaps previous operation (checksum: ${p}):
abs: ${c.start} until ${c.end} and ${s.start} until ${s.end}
rel: ${c.start-m} until ${c.end-m} and ${s.start-m} until ${s.end-m}`)}}l.push(s)}function a(s,l,p){const f=new Map,c=new Map;let m=l;for(let g=0;g<s.checksums.length;g++){const w=s.checksums[g],A=s.sizes[g],S=c.get(w);if(S===void 0)f.set(w,m),c.set(w,A);else if(p.debug!=null){const C=S===A?"(same size)":`(size: ${S}, this size: ${A})`;p.debug(`${w} duplicated in blockmap ${C}, it doesn't lead to broken differential downloader, just corresponding block will be skipped)`)}m+=A}return{checksumToOffset:f,checksumToOldSize:c}}function o(s){const l=new Map;for(const p of s)l.set(p.name,p);return l}})(Si);Object.defineProperty(Mt,"__esModule",{value:!0});Mt.DataSplitter=Mt.copyData=void 0;const $i=te,sw=Ze.default,lw=$n.default,uw=Si,lc=Buffer.from(`\r
\r
`);var Et;(function(e){e[e.INIT=0]="INIT",e[e.HEADER=1]="HEADER",e[e.BODY=2]="BODY"})(Et||(Et={}));function uc(e,t,n,r,i){const a=sw.createReadStream("",{fd:n,autoClose:!1,start:e.start,end:e.end-1});a.on("error",r),a.once("end",i),a.pipe(t,{end:!1})}Mt.copyData=uc;class cw extends lw.Writable{constructor(t,n,r,i,a,o){super();this.out=t,this.options=n,this.partIndexToTaskIndex=r,this.partIndexToLength=a,this.finishHandler=o,this.partIndex=-1,this.headerListBuffer=null,this.readState=Et.INIT,this.ignoreByteCount=0,this.remainingPartDataCount=0,this.actualPartLength=0,this.boundaryLength=i.length+4,this.ignoreByteCount=this.boundaryLength-2}get isFinished(){return this.partIndex===this.partIndexToLength.length}_write(t,n,r){if(this.isFinished){console.error(`Trailing ignored data: ${t.length} bytes`);return}this.handleData(t).then(r).catch(r)}async handleData(t){let n=0;if(this.ignoreByteCount!==0&&this.remainingPartDataCount!==0)throw $i.newError("Internal error","ERR_DATA_SPLITTER_BYTE_COUNT_MISMATCH");if(this.ignoreByteCount>0){const r=Math.min(this.ignoreByteCount,t.length);this.ignoreByteCount-=r,n=r}else if(this.remainingPartDataCount>0){const r=Math.min(this.remainingPartDataCount,t.length);this.remainingPartDataCount-=r,await this.processPartData(t,0,r),n=r}if(n!==t.length){if(this.readState===Et.HEADER){const r=this.searchHeaderListEnd(t,n);if(r===-1)return;n=r,this.readState=Et.BODY,this.headerListBuffer=null}for(;;){if(this.readState===Et.BODY)this.readState=Et.INIT;else{this.partIndex++;let o=this.partIndexToTaskIndex.get(this.partIndex);if(o==null)if(this.isFinished)o=this.options.end;else throw $i.newError("taskIndex is null","ERR_DATA_SPLITTER_TASK_INDEX_IS_NULL");const s=this.partIndex===0?this.options.start:this.partIndexToTaskIndex.get(this.partIndex-1)+1;if(s<o)await this.copyExistingData(s,o);else if(s>o)throw $i.newError("prevTaskIndex must be < taskIndex","ERR_DATA_SPLITTER_TASK_INDEX_ASSERT_FAILED");if(this.isFinished){this.onPartEnd(),this.finishHandler();return}if(n=this.searchHeaderListEnd(t,n),n===-1){this.readState=Et.HEADER;return}}const r=this.partIndexToLength[this.partIndex],i=n+r,a=Math.min(i,t.length);if(await this.processPartStarted(t,n,a),this.remainingPartDataCount=r-(a-n),this.remainingPartDataCount>0)return;if(n=i+this.boundaryLength,n>=t.length){this.ignoreByteCount=this.boundaryLength-(t.length-i);return}}}}copyExistingData(t,n){return new Promise((r,i)=>{const a=()=>{if(t===n){r();return}const o=this.options.tasks[t];if(o.kind!==uw.OperationKind.COPY){i(new Error("Task kind must be COPY"));return}uc(o,this.out,this.options.oldFileFd,i,()=>{t++,a()})};a()})}searchHeaderListEnd(t,n){const r=t.indexOf(lc,n);if(r!==-1)return r+lc.length;const i=n===0?t:t.slice(n);return this.headerListBuffer==null?this.headerListBuffer=i:this.headerListBuffer=Buffer.concat([this.headerListBuffer,i]),-1}onPartEnd(){const t=this.partIndexToLength[this.partIndex-1];if(this.actualPartLength!==t)throw $i.newError(`Expected length: ${t} differs from actual: ${this.actualPartLength}`,"ERR_DATA_SPLITTER_LENGTH_MISMATCH");this.actualPartLength=0}processPartStarted(t,n,r){return this.partIndex!==0&&this.onPartEnd(),this.processPartData(t,n,r)}processPartData(t,n,r){this.actualPartLength+=r-n;const i=this.out;return i.write(n===0&&t.length===r?t:t.slice(n,r))?Promise.resolve():new Promise((a,o)=>{i.on("error",o),i.once("drain",()=>{i.removeListener("error",o),a()})})}}Mt.DataSplitter=cw;var mn={};Object.defineProperty(mn,"__esModule",{value:!0});mn.checkIsRangesSupported=mn.executeTasksUsingMultipleRangeRequests=void 0;const Qa=te,cc=Mt,fc=Si;function fw(e,t,n,r,i){const a=o=>{if(o>=t.length){e.fileMetadataBuffer!=null&&n.write(e.fileMetadataBuffer),n.end();return}const s=o+1e3;dw(e,{tasks:t,start:o,end:Math.min(t.length,s),oldFileFd:r},n,()=>a(s),i)};return a}mn.executeTasksUsingMultipleRangeRequests=fw;function dw(e,t,n,r,i){let a="bytes=",o=0;const s=new Map,l=[];for(let c=t.start;c<t.end;c++){const m=t.tasks[c];m.kind===fc.OperationKind.DOWNLOAD&&(a+=`${m.start}-${m.end-1}, `,s.set(o,c),o++,l.push(m.end-m.start))}if(o<=1){const c=m=>{if(m>=t.end){r();return}const g=t.tasks[m++];if(g.kind===fc.OperationKind.COPY)cc.copyData(g,n,t.oldFileFd,i,()=>c(m));else{const w=e.createRequestOptions();w.headers.Range=`bytes=${g.start}-${g.end-1}`;const A=e.httpExecutor.createRequest(w,S=>{!Za(S,i)||(S.pipe(n,{end:!1}),S.once("end",()=>c(m)))});e.httpExecutor.addErrorAndTimeoutHandlers(A,i),A.end()}};c(t.start);return}const p=e.createRequestOptions();p.headers.Range=a.substring(0,a.length-2);const f=e.httpExecutor.createRequest(p,c=>{if(!Za(c,i))return;const m=Qa.safeGetHeader(c,"content-type"),g=/^multipart\/.+?(?:; boundary=(?:(?:"(.+)")|(?:([^\s]+))))$/i.exec(m);if(g==null){i(new Error(`Content-Type "multipart/byteranges" is expected, but got "${m}"`));return}const w=new cc.DataSplitter(n,t,s,g[1]||g[2],l,r);w.on("error",i),c.pipe(w),c.on("end",()=>{setTimeout(()=>{f.abort(),i(new Error("Response ends without calling any handlers"))},1e4)})});e.httpExecutor.addErrorAndTimeoutHandlers(f,i),f.end()}function Za(e,t){if(e.statusCode>=400)return t(Qa.createHttpError(e)),!1;if(e.statusCode!==206){const n=Qa.safeGetHeader(e,"accept-ranges");if(n==null||n==="none")return t(new Error(`Server doesn't support Accept-Ranges (response code ${e.statusCode})`)),!1}return!0}mn.checkIsRangesSupported=Za;var Ci={};Object.defineProperty(Ci,"__esModule",{value:!0});Ci.ProgressDifferentialDownloadCallbackTransform=void 0;const hw=$n.default;var gn;(function(e){e[e.COPY=0]="COPY",e[e.DOWNLOAD=1]="DOWNLOAD"})(gn||(gn={}));class pw extends hw.Transform{constructor(t,n,r){super();this.progressDifferentialDownloadInfo=t,this.cancellationToken=n,this.onProgress=r,this.start=Date.now(),this.transferred=0,this.delta=0,this.expectedBytes=0,this.index=0,this.operationType=gn.COPY,this.nextUpdate=this.start+1e3}_transform(t,n,r){if(this.cancellationToken.cancelled){r(new Error("cancelled"),null);return}if(this.operationType==gn.COPY){r(null,t);return}this.transferred+=t.length,this.delta+=t.length;const i=Date.now();i>=this.nextUpdate&&this.transferred!==this.expectedBytes&&this.transferred!==this.progressDifferentialDownloadInfo.grandTotal&&(this.nextUpdate=i+1e3,this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.progressDifferentialDownloadInfo.grandTotal*100,bytesPerSecond:Math.round(this.transferred/((i-this.start)/1e3))}),this.delta=0),r(null,t)}beginFileCopy(){this.operationType=gn.COPY}beginRangeDownload(){this.operationType=gn.DOWNLOAD,this.expectedBytes+=this.progressDifferentialDownloadInfo.expectedByteCounts[this.index++]}endRangeDownload(){this.transferred!==this.progressDifferentialDownloadInfo.grandTotal&&this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.progressDifferentialDownloadInfo.grandTotal*100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))})}_flush(t){if(this.cancellationToken.cancelled){t(new Error("cancelled"));return}this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))}),this.delta=0,this.transferred=0,t(null)}}Ci.ProgressDifferentialDownloadCallbackTransform=pw;Object.defineProperty(ar,"__esModule",{value:!0});ar.DifferentialDownloader=void 0;const or=te,eo=Dt,mw=Ze.default,gw=Mt,yw=St.default,bi=Si,dc=mn,Ew=Ci;class vw{constructor(t,n,r){this.blockAwareFileInfo=t,this.httpExecutor=n,this.options=r,this.fileMetadataBuffer=null,this.logger=r.logger}createRequestOptions(){const t={headers:Ie(F({},this.options.requestHeaders),{accept:"*/*"})};return or.configureRequestUrl(this.options.newUrl,t),or.configureRequestOptions(t),t}doDownload(t,n){if(t.version!==n.version)throw new Error(`version is different (${t.version} - ${n.version}), full download is required`);const r=this.logger,i=bi.computeOperations(t,n,r);r.debug!=null&&r.debug(JSON.stringify(i,null,2));let a=0,o=0;for(const l of i){const p=l.end-l.start;l.kind===bi.OperationKind.DOWNLOAD?a+=p:o+=p}const s=this.blockAwareFileInfo.size;if(a+o+(this.fileMetadataBuffer==null?0:this.fileMetadataBuffer.length)!==s)throw new Error(`Internal error, size mismatch: downloadSize: ${a}, copySize: ${o}, newSize: ${s}`);return r.info(`Full: ${hc(s)}, To download: ${hc(a)} (${Math.round(a/(s/100))}%)`),this.downloadFile(i)}downloadFile(t){const n=[],r=()=>Promise.all(n.map(i=>eo.close(i.descriptor).catch(a=>{this.logger.error(`cannot close file "${i.path}": ${a}`)})));return this.doDownloadFile(t,n).then(r).catch(i=>r().catch(a=>{try{this.logger.error(`cannot close files: ${a}`)}catch(o){try{console.error(o)}catch{}}throw i}).then(()=>{throw i}))}async doDownloadFile(t,n){const r=await eo.open(this.options.oldFile,"r");n.push({descriptor:r,path:this.options.oldFile});const i=await eo.open(this.options.newFile,"w");n.push({descriptor:i,path:this.options.newFile});const a=mw.createWriteStream(this.options.newFile,{fd:i});await new Promise((o,s)=>{const l=[];let p;if(!this.options.isUseMultipleRangeRequest&&this.options.onProgress){const C=[];let $=0;for(const D of t)D.kind===bi.OperationKind.DOWNLOAD&&(C.push(D.end-D.start),$+=D.end-D.start);const Q={expectedByteCounts:C,grandTotal:$};p=new Ew.ProgressDifferentialDownloadCallbackTransform(Q,this.options.cancellationToken,this.options.onProgress),l.push(p)}const f=new or.DigestTransform(this.blockAwareFileInfo.sha512);f.isValidateOnEnd=!1,l.push(f),a.on("finish",()=>{a.close(()=>{n.splice(1,1);try{f.validate()}catch(C){s(C);return}o(void 0)})}),l.push(a);let c=null;for(const C of l)C.on("error",s),c==null?c=C:c=c.pipe(C);const m=l[0];let g;if(this.options.isUseMultipleRangeRequest){g=dc.executeTasksUsingMultipleRangeRequests(this,t,m,r,s),g(0);return}let w=0,A=null;this.logger.info(`Differential download: ${this.options.newUrl}`);const S=this.createRequestOptions();S.redirect="manual",g=C=>{var $,Q;if(C>=t.length){this.fileMetadataBuffer!=null&&m.write(this.fileMetadataBuffer),m.end();return}const D=t[C++];if(D.kind===bi.OperationKind.COPY){p&&p.beginFileCopy(),gw.copyData(D,m,r,s,()=>g(C));return}const le=`bytes=${D.start}-${D.end-1}`;S.headers.range=le,(Q=($=this.logger)===null||$===void 0?void 0:$.debug)===null||Q===void 0||Q.call($,`download range: ${le}`),p&&p.beginRangeDownload();const j=this.httpExecutor.createRequest(S,M=>{M.statusCode>=400&&s(or.createHttpError(M)),M.pipe(m,{end:!1}),M.once("end",()=>{p&&p.endRangeDownload(),++w==100?(w=0,setTimeout(()=>g(C),1e3)):g(C)})});j.on("redirect",(M,O,y)=>{this.logger.info(`Redirect to ${ww(y)}`),A=y,or.configureRequestUrl(new yw.URL(A),S),j.followRedirect()}),this.httpExecutor.addErrorAndTimeoutHandlers(j,s),j.end()},g(0)})}async readRemoteBytes(t,n){const r=Buffer.allocUnsafe(n+1-t),i=this.createRequestOptions();i.headers.range=`bytes=${t}-${n}`;let a=0;if(await this.request(i,o=>{o.copy(r,a),a+=o.length}),a!==r.length)throw new Error(`Received data length ${a} is not equal to expected ${r.length}`);return r}request(t,n){return new Promise((r,i)=>{const a=this.httpExecutor.createRequest(t,o=>{!dc.checkIsRangesSupported(o,i)||(o.on("data",n),o.on("end",()=>r()))});this.httpExecutor.addErrorAndTimeoutHandlers(a,i),a.end()})}}ar.DifferentialDownloader=vw;function hc(e,t=" KB"){return new Intl.NumberFormat("en").format((e/1024).toFixed(2))+t}function ww(e){const t=e.indexOf("?");return t<0?e:e.substring(0,t)}Object.defineProperty(ir,"__esModule",{value:!0});ir.FileWithEmbeddedBlockMapDifferentialDownloader=void 0;const yn=Dt,_w=ar,Tw=Ro.default;class Aw extends _w.DifferentialDownloader{async download(){const t=this.blockAwareFileInfo,n=t.size,r=n-(t.blockMapSize+4);this.fileMetadataBuffer=await this.readRemoteBytes(r,n-1);const i=pc(this.fileMetadataBuffer.slice(0,this.fileMetadataBuffer.length-4));await this.doDownload(await Sw(this.options.oldFile),i)}}ir.FileWithEmbeddedBlockMapDifferentialDownloader=Aw;function pc(e){return JSON.parse(Tw.inflateRawSync(e).toString())}async function Sw(e){const t=await yn.open(e,"r");try{const n=(await yn.fstat(t)).size,r=Buffer.allocUnsafe(4);await yn.read(t,r,0,r.length,n-r.length);const i=Buffer.allocUnsafe(r.readUInt32BE(0));return await yn.read(t,i,0,i.length,n-r.length-i.length),await yn.close(t),pc(i)}catch(n){throw await yn.close(t),n}}Object.defineProperty(nr,"__esModule",{value:!0});nr.AppImageUpdater=void 0;const mc=te,to=Sr.default,$w=Dt,Cw=Ze.default,sr=re.default,bw=rr,Ow=ir,gc=Ht,Iw=ae;class Nw extends bw.BaseUpdater{constructor(t,n){super(t,n)}isUpdaterActive(){return process.env.APPIMAGE==null?(process.env.SNAP==null?this._logger.warn("APPIMAGE env is not defined, current application is not an AppImage"):this._logger.info("SNAP env is defined, updater is disabled"),!1):super.isUpdaterActive()}doDownloadUpdate(t){const n=t.updateInfoAndProvider.provider,r=Iw.findFile(n.resolveFiles(t.updateInfoAndProvider.info),"AppImage");return this.executeDownload({fileExtension:"AppImage",fileInfo:r,downloadUpdateOptions:t,task:async(i,a)=>{const o=process.env.APPIMAGE;if(o==null)throw mc.newError("APPIMAGE env is not defined","ERR_UPDATER_OLD_FILE_NOT_FOUND");let s=!1;try{const l={newUrl:r.url,oldFile:o,logger:this._logger,newFile:i,isUseMultipleRangeRequest:n.isUseMultipleRangeRequest,requestHeaders:t.requestHeaders,cancellationToken:t.cancellationToken};this.listenerCount(gc.DOWNLOAD_PROGRESS)>0&&(l.onProgress=p=>this.emit(gc.DOWNLOAD_PROGRESS,p)),await new Ow.FileWithEmbeddedBlockMapDifferentialDownloader(r.info,this.httpExecutor,l).download()}catch(l){this._logger.error(`Cannot download differentially, fallback to full download: ${l.stack||l}`),s=process.platform==="linux"}s&&await this.httpExecutor.download(r.url,i,a),await $w.chmod(i,493)}})}doInstall(t){const n=process.env.APPIMAGE;if(n==null)throw mc.newError("APPIMAGE env is not defined","ERR_UPDATER_OLD_FILE_NOT_FOUND");Cw.unlinkSync(n);let r;const i=sr.basename(n);sr.basename(t.installerPath)===i||!/\d+\.\d+\.\d+/.test(i)?r=n:r=sr.join(sr.dirname(n),sr.basename(t.installerPath)),to.execFileSync("mv",["-f",t.installerPath,r]),r!==n&&this.emit("appimage-filename-updated",r);const a=Ie(F({},process.env),{APPIMAGE_SILENT_INSTALL:"true"});return t.isForceRunAfter?to.spawn(r,[],{detached:!0,stdio:"ignore",env:a}).unref():(a.APPIMAGE_EXIT_AFTER_INSTALL="true",to.execFileSync(r,[],{env:a})),!0}}nr.AppImageUpdater=Nw;var lr={};Object.defineProperty(lr,"__esModule",{value:!0});lr.MacUpdater=void 0;const yc=te,Rw=Dt,Dw=Ze.default,Pw=Wf.default,xw=ut,Fw=ae,Lw=Sr.default;class Uw extends xw.AppUpdater{constructor(t,n){super(t,n);this.nativeUpdater=Cn.default.autoUpdater,this.squirrelDownloadedUpdate=!1,this.nativeUpdater.on("error",r=>{this._logger.warn(r),this.emit("error",r)}),this.nativeUpdater.on("update-downloaded",()=>{this.squirrelDownloadedUpdate=!0})}debug(t){this._logger.debug!=null&&this._logger.debug(t)}async doDownloadUpdate(t){let n=t.updateInfoAndProvider.provider.resolveFiles(t.updateInfoAndProvider.info);const r=this._logger,i="sysctl.proc_translated";let a=!1;try{this.debug("Checking for macOS Rosetta environment"),a=Lw.execFileSync("sysctl",[i],{encoding:"utf8"}).includes(`${i}: 1`),r.info(`Checked for macOS Rosetta environment (isRosetta=${a})`)}catch(p){r.warn(`sysctl shell command to check for macOS Rosetta environment failed: ${p}`)}const o=process.arch==="arm64"||a,s=p=>{var f;return p.url.pathname.includes("arm64")||((f=p.info.url)===null||f===void 0?void 0:f.includes("arm64"))};o&&n.some(s)?n=n.filter(p=>o===s(p)):n=n.filter(p=>!s(p));const l=Fw.findFile(n,"zip",["pkg","dmg"]);if(l==null)throw yc.newError(`ZIP file not provided: ${yc.safeStringifyJson(n)}`,"ERR_UPDATER_ZIP_FILE_NOT_FOUND");return this.executeDownload({fileExtension:"zip",fileInfo:l,downloadUpdateOptions:t,task:(p,f)=>this.httpExecutor.download(l.url,p,f),done:p=>this.updateDownloaded(l,p)})}async updateDownloaded(t,n){var r;const i=n.downloadedFile,a=(r=t.info.size)!==null&&r!==void 0?r:(await Rw.stat(i)).size,o=this._logger,s=`fileToProxy=${t.url.href}`;this.debug(`Creating proxy server for native Squirrel.Mac (${s})`);const l=Pw.createServer();this.debug(`Proxy server for native Squirrel.Mac is created (${s})`),l.on("close",()=>{o.info(`Proxy server for native Squirrel.Mac is closed (${s})`)});function p(){return`http://127.0.0.1:${l.address().port}`}return await new Promise((f,c)=>{const m=`/${Date.now().toString(16)}-${Math.floor(Math.random()*9999).toString(16)}.zip`;l.on("request",(g,w)=>{const A=g.url;if(o.info(`${A} requested`),A==="/"){const $=Buffer.from(`{ "url": "${p()}${m}" }`);w.writeHead(200,{"Content-Type":"application/json","Content-Length":$.length}),w.end($);return}if(!A.startsWith(m)){o.warn(`${A} requested, but not supported`),w.writeHead(404),w.end();return}o.info(`${m} requested by Squirrel.Mac, pipe ${i}`);let S=!1;w.on("finish",()=>{try{setImmediate(()=>l.close())}finally{S||(this.nativeUpdater.removeListener("error",c),f([]))}});const C=Dw.createReadStream(i);C.on("error",$=>{try{w.end()}catch(Q){o.warn(`cannot end response: ${Q}`)}S=!0,this.nativeUpdater.removeListener("error",c),c(new Error(`Cannot pipe "${i}": ${$}`))}),w.writeHead(200,{"Content-Type":"application/zip","Content-Length":a}),C.pipe(w)}),this.debug(`Proxy server for native Squirrel.Mac is starting to listen (${s})`),l.listen(0,"127.0.0.1",()=>{this.debug(`Proxy server for native Squirrel.Mac is listening (address=${p()}, ${s})`),this.nativeUpdater.setFeedURL({url:p(),headers:{"Cache-Control":"no-cache"}}),this.dispatchUpdateDownloaded(n),this.autoInstallOnAppQuit?(this.nativeUpdater.once("error",c),this.nativeUpdater.checkForUpdates()):f([])})})}quitAndInstall(){this.squirrelDownloadedUpdate?this.nativeUpdater.quitAndInstall():this.nativeUpdater.on("update-downloaded",()=>{this.nativeUpdater.quitAndInstall()})}}lr.MacUpdater=Uw;var ur={},Oi={};Object.defineProperty(Oi,"__esModule",{value:!0});Oi.GenericDifferentialDownloader=void 0;const kw=ar;class Mw extends kw.DifferentialDownloader{download(t,n){return this.doDownload(t,n)}}Oi.GenericDifferentialDownloader=Mw;var Ii={};Object.defineProperty(Ii,"__esModule",{value:!0});Ii.verifySignature=void 0;const Bw=te,Ec=Sr.default,qw=No.default;function Hw(e,t,n){return new Promise(r=>{const i=t.replace(/'/g,"''").replace(/`/g,"``");Ec.execFile("powershell.exe",["-NoProfile","-NonInteractive","-InputFormat","None","-Command",`Get-AuthenticodeSignature '${i}' | ConvertTo-Json -Compress | ForEach-Object { [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($_)) }`],{timeout:20*1e3},(a,o,s)=>{try{if(a!=null||s){Gw(n,a,s),r(null);return}const l=jw(Buffer.from(o,"base64").toString("utf-8"));if(l.Status===0){const f=Bw.parseDn(l.SignerCertificate.Subject).get("CN");if(e.includes(f)){r(null);return}}const p=`publisherNames: ${e.join(" | ")}, raw info: `+JSON.stringify(l,(f,c)=>f==="RawData"?void 0:c,2);n.warn(`Sign verification failed, installer signed with incorrect certificate: ${p}`),r(p)}catch{n.warn(`Cannot execute Get-AuthenticodeSignature: ${a}. Ignoring signature validation due to unknown error.`),r(null);return}})})}Ii.verifySignature=Hw;function jw(e){const t=JSON.parse(e);delete t.PrivateKey,delete t.IsOSBinary,delete t.SignatureType;const n=t.SignerCertificate;return n!=null&&(delete n.Archived,delete n.Extensions,delete n.Handle,delete n.HasPrivateKey,delete n.SubjectName),delete t.Path,t}function Gw(e,t,n){if(Vw()){e.warn(`Cannot execute Get-AuthenticodeSignature: ${t||n}. Ignoring signature validation due to unsupported powershell version. Please upgrade to powershell 3 or higher.`);return}try{Ec.execFileSync("powershell.exe",["-NoProfile","-NonInteractive","-Command","ConvertTo-Json test"],{timeout:10*1e3})}catch(r){e.warn(`Cannot execute ConvertTo-Json: ${r.message}. Ignoring signature validation due to unsupported powershell version. Please upgrade to powershell 3 or higher.`);return}if(t!=null)throw t;if(n){e.warn(`Cannot execute Get-AuthenticodeSignature, stderr: ${n}. Ignoring signature validation due to unknown stderr.`);return}}function Vw(){const e=qw.release();return e.startsWith("6.")&&!e.startsWith("6.3")}Object.defineProperty(ur,"__esModule",{value:!0});ur.NsisUpdater=void 0;const no=te,Yw=Sr.default,ro=re.default,Ww=rr,Xw=ir,zw=Oi,Ni=Ht,Kw=Ee,Jw=ae,Qw=Dt,Zw=Ii,vc=St.default,e_=Ro.default;class t_ extends Ww.BaseUpdater{constructor(t,n){super(t,n)}doDownloadUpdate(t){const n=t.updateInfoAndProvider.provider,r=Jw.findFile(n.resolveFiles(t.updateInfoAndProvider.info),"exe");return this.executeDownload({fileExtension:"exe",downloadUpdateOptions:t,fileInfo:r,task:async(i,a,o,s)=>{const l=r.packageInfo,p=l!=null&&o!=null;(p||await this.differentialDownloadInstaller(r,t,i,n))&&await this.httpExecutor.download(r.url,i,a);const f=await this.verifySignature(i);if(f!=null)throw await s(),no.newError(`New version ${t.updateInfoAndProvider.info.version} is not signed by the application owner: ${f}`,"ERR_UPDATER_INVALID_SIGNATURE");if(p&&await this.differentialDownloadWebPackage(t,l,o,n))try{await this.httpExecutor.download(new vc.URL(l.path),o,{headers:t.requestHeaders,cancellationToken:t.cancellationToken,sha512:l.sha512})}catch(c){try{await Qw.unlink(o)}catch{}throw c}}})}async verifySignature(t){let n;try{if(n=(await this.configOnDisk.value).publisherName,n==null)return null}catch(r){if(r.code==="ENOENT")return null;throw r}return await Zw.verifySignature(Array.isArray(n)?n:[n],t,this._logger)}doInstall(t){const n=["--updated"];t.isSilent&&n.push("/S"),t.isForceRunAfter&&n.push("--force-run");const r=this.downloadedUpdateHelper==null?null:this.downloadedUpdateHelper.packageFile;r!=null&&n.push(`--package-file=${r}`);const i=()=>{wc(ro.join(process.resourcesPath,"elevate.exe"),[t.installerPath].concat(n)).catch(a=>this.dispatchError(a))};return t.isAdminRightsRequired?(this._logger.info("isAdminRightsRequired is set to true, run installer using elevate.exe"),i(),!0):(wc(t.installerPath,n).catch(a=>{const o=a.code;this._logger.info(`Cannot run installer: error code: ${o}, error message: "${a.message}", will be executed again using elevate if EACCES"`),o==="UNKNOWN"||o==="EACCES"?i():this.dispatchError(a)}),!0)}async differentialDownloadInstaller(t,n,r,i){try{if(this._testOnlyOptions!=null&&!this._testOnlyOptions.isUseDifferentialDownload)return!0;const a=Kw.blockmapFiles(t.url,this.app.version,n.updateInfoAndProvider.info.version);this._logger.info(`Download block maps (old: "${a[0]}", new: ${a[1]})`);const o=async p=>{const f=await this.httpExecutor.downloadToBuffer(p,{headers:n.requestHeaders,cancellationToken:n.cancellationToken});if(f==null||f.length===0)throw new Error(`Blockmap "${p.href}" is empty`);try{return JSON.parse(e_.gunzipSync(f).toString())}catch(c){throw new Error(`Cannot parse blockmap "${p.href}", error: ${c}`)}},s={newUrl:t.url,oldFile:ro.join(this.downloadedUpdateHelper.cacheDir,no.CURRENT_APP_INSTALLER_FILE_NAME),logger:this._logger,newFile:r,isUseMultipleRangeRequest:i.isUseMultipleRangeRequest,requestHeaders:n.requestHeaders,cancellationToken:n.cancellationToken};this.listenerCount(Ni.DOWNLOAD_PROGRESS)>0&&(s.onProgress=p=>this.emit(Ni.DOWNLOAD_PROGRESS,p));const l=await Promise.all(a.map(p=>o(p)));return await new zw.GenericDifferentialDownloader(t.info,this.httpExecutor,s).download(l[0],l[1]),!1}catch(a){if(this._logger.error(`Cannot download differentially, fallback to full download: ${a.stack||a}`),this._testOnlyOptions!=null)throw a;return!0}}async differentialDownloadWebPackage(t,n,r,i){if(n.blockMapSize==null)return!0;try{const a={newUrl:new vc.URL(n.path),oldFile:ro.join(this.downloadedUpdateHelper.cacheDir,no.CURRENT_APP_PACKAGE_FILE_NAME),logger:this._logger,newFile:r,requestHeaders:this.requestHeaders,isUseMultipleRangeRequest:i.isUseMultipleRangeRequest,cancellationToken:t.cancellationToken};this.listenerCount(Ni.DOWNLOAD_PROGRESS)>0&&(a.onProgress=o=>this.emit(Ni.DOWNLOAD_PROGRESS,o)),await new Xw.FileWithEmbeddedBlockMapDifferentialDownloader(n,this.httpExecutor,a).download()}catch(a){return this._logger.error(`Cannot download differentially, fallback to full download: ${a.stack||a}`),process.platform==="win32"}return!1}}ur.NsisUpdater=t_;async function wc(e,t){return new Promise((n,r)=>{try{const i=Yw.spawn(e,t,{detached:!0,stdio:"ignore"});i.on("error",a=>{r(a)}),i.unref(),i.pid!==void 0&&n(!0)}catch(i){r(i)}})}(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.UpdaterSignal=e.UPDATE_DOWNLOADED=e.DOWNLOAD_PROGRESS=e.NsisUpdater=e.MacUpdater=e.AppImageUpdater=e.Provider=e.CancellationToken=e.NoOpLogger=e.AppUpdater=void 0;const t=te;Object.defineProperty(e,"CancellationToken",{enumerable:!0,get:function(){return t.CancellationToken}});var n=ut;Object.defineProperty(e,"AppUpdater",{enumerable:!0,get:function(){return n.AppUpdater}}),Object.defineProperty(e,"NoOpLogger",{enumerable:!0,get:function(){return n.NoOpLogger}});var r=ae;Object.defineProperty(e,"Provider",{enumerable:!0,get:function(){return r.Provider}});var i=nr;Object.defineProperty(e,"AppImageUpdater",{enumerable:!0,get:function(){return i.AppImageUpdater}});var a=lr;Object.defineProperty(e,"MacUpdater",{enumerable:!0,get:function(){return a.MacUpdater}});var o=ur;Object.defineProperty(e,"NsisUpdater",{enumerable:!0,get:function(){return o.NsisUpdater}});let s;function l(){return process.platform==="win32"?s=new ur.NsisUpdater:process.platform==="darwin"?s=new lr.MacUpdater:s=new nr.AppImageUpdater,s}Object.defineProperty(e,"autoUpdater",{enumerable:!0,get:()=>s||l()}),e.DOWNLOAD_PROGRESS="download-progress",e.UPDATE_DOWNLOADED="update-downloaded";class p{constructor(m){this.emitter=m}login(m){f(this.emitter,"login",m)}progress(m){f(this.emitter,e.DOWNLOAD_PROGRESS,m)}updateDownloaded(m){f(this.emitter,e.UPDATE_DOWNLOADED,m)}updateCancelled(m){f(this.emitter,"update-cancelled",m)}}e.UpdaterSignal=p;function f(c,m,g){c.on(m,g)}})(Ht);var n_=Xf(Ht),r_=Object.freeze(jf({__proto__:null,[Symbol.toStringTag]:"Module",default:n_},[Ht]));exports.main=r_;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
